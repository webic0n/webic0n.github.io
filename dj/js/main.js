function onYouTubePlayerAPIReady(){mejs.YouTubeApi.iFrameReady()}function onYouTubePlayerReady(e){mejs.YouTubeApi.flashReady(e)}!function(e,t){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:this,function(e,t){"use strict";function i(e,t,i){t=t||re;var n,s=t.createElement("script");if(s.text=e,i)for(n in be)i[n]&&(s[n]=i[n]);t.head.appendChild(s).parentNode.removeChild(s)}function n(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?he[pe.call(e)]||"object":typeof e}function s(e){var t=!!e&&"length"in e&&e.length,i=n(e);return!ye(e)&&!we(e)&&("array"===i||0===t||"number"==typeof t&&t>0&&t-1 in e)}function o(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function r(e,t,i){return ye(t)?Te.grep(e,function(e,n){return!!t.call(e,n,e)!==i}):t.nodeType?Te.grep(e,function(e){return e===t!==i}):"string"!=typeof t?Te.grep(e,function(e){return de.call(t,e)>-1!==i}):Te.filter(t,e,i)}function a(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function l(e){var t={};return Te.each(e.match(Fe)||[],function(e,i){t[i]=!0}),t}function u(e){return e}function c(e){throw e}function d(e,t,i,n){var s;try{e&&ye(s=e.promise)?s.call(e).done(t).fail(i):e&&ye(s=e.then)?s.call(e,t,i):t.apply(void 0,[e].slice(n))}catch(e){i.apply(void 0,[e])}}function h(){re.removeEventListener("DOMContentLoaded",h),e.removeEventListener("load",h),Te.ready()}function p(e,t){return t.toUpperCase()}function f(e){return e.replace(He,"ms-").replace(Ie,p)}function m(){this.expando=Te.expando+m.uid++}function g(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:We.test(e)?JSON.parse(e):e)}function v(e,t,i){var n;if(void 0===i&&1===e.nodeType)if(n="data-"+t.replace(Re,"-$&").toLowerCase(),i=e.getAttribute(n),"string"==typeof i){try{i=g(i)}catch(s){}Be.set(e,t,i)}else i=void 0;return i}function y(e,t,i,n){var s,o,r=20,a=n?function(){return n.cur()}:function(){return Te.css(e,t,"")},l=a(),u=i&&i[3]||(Te.cssNumber[t]?"":"px"),c=(Te.cssNumber[t]||"px"!==u&&+l)&&Ue.exec(Te.css(e,t));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;r--;)Te.style(e,t,c+u),(1-o)*(1-(o=a()/l||.5))<=0&&(r=0),c/=o;c=2*c,Te.style(e,t,c+u),i=i||[]}return i&&(c=+c||+l||0,s=i[1]?c+(i[1]+1)*i[2]:+i[2],n&&(n.unit=u,n.start=c,n.end=s)),s}function w(e){var t,i=e.ownerDocument,n=e.nodeName,s=Ge[n];return s?s:(t=i.body.appendChild(i.createElement(n)),s=Te.css(t,"display"),t.parentNode.removeChild(t),"none"===s&&(s="block"),Ge[n]=s,s)}function b(e,t){for(var i,n,s=[],o=0,r=e.length;o<r;o++)n=e[o],n.style&&(i=n.style.display,t?("none"===i&&(s[o]=qe.get(n,"display")||null,s[o]||(n.style.display="")),""===n.style.display&&Xe(n)&&(s[o]=w(n))):"none"!==i&&(s[o]="none",qe.set(n,"display",i)));for(o=0;o<r;o++)null!=s[o]&&(e[o].style.display=s[o]);return e}function x(e,t){var i;return i="undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t||"*"):"undefined"!=typeof e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&o(e,t)?Te.merge([e],i):i}function T(e,t){for(var i=0,n=e.length;i<n;i++)qe.set(e[i],"globalEval",!t||qe.get(t[i],"globalEval"))}function C(e,t,i,s,o){for(var r,a,l,u,c,d,h=t.createDocumentFragment(),p=[],f=0,m=e.length;f<m;f++)if(r=e[f],r||0===r)if("object"===n(r))Te.merge(p,r.nodeType?[r]:r);else if(tt.test(r)){for(a=a||h.appendChild(t.createElement("div")),l=(Je.exec(r)||["",""])[1].toLowerCase(),u=et[l]||et._default,a.innerHTML=u[1]+Te.htmlPrefilter(r)+u[2],d=u[0];d--;)a=a.lastChild;Te.merge(p,a.childNodes),a=h.firstChild,a.textContent=""}else p.push(t.createTextNode(r));for(h.textContent="",f=0;r=p[f++];)if(s&&Te.inArray(r,s)>-1)o&&o.push(r);else if(c=Te.contains(r.ownerDocument,r),a=x(h.appendChild(r),"script"),c&&T(a),i)for(d=0;r=a[d++];)Ke.test(r.type||"")&&i.push(r);return h}function j(){return!0}function _(){return!1}function S(){try{return re.activeElement}catch(e){}}function E(e,t,i,n,s,o){var r,a;if("object"==typeof t){"string"!=typeof i&&(n=n||i,i=void 0);for(a in t)E(e,a,i,n,t[a],o);return e}if(null==n&&null==s?(s=i,n=i=void 0):null==s&&("string"==typeof i?(s=n,n=void 0):(s=n,n=i,i=void 0)),s===!1)s=_;else if(!s)return e;return 1===o&&(r=s,s=function(e){return Te().off(e),r.apply(this,arguments)},s.guid=r.guid||(r.guid=Te.guid++)),e.each(function(){Te.event.add(this,t,s,n,i)})}function k(e,t){return o(e,"table")&&o(11!==t.nodeType?t:t.firstChild,"tr")?Te(e).children("tbody")[0]||e:e}function A(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function M(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function N(e,t){var i,n,s,o,r,a,l,u;if(1===t.nodeType){if(qe.hasData(e)&&(o=qe.access(e),r=qe.set(t,o),u=o.events)){delete r.handle,r.events={};for(s in u)for(i=0,n=u[s].length;i<n;i++)Te.event.add(t,s,u[s][i])}Be.hasData(e)&&(a=Be.access(e),l=Te.extend({},a),Be.set(t,l))}}function D(e,t){var i=t.nodeName.toLowerCase();"input"===i&&Ze.test(e.type)?t.checked=e.checked:"input"!==i&&"textarea"!==i||(t.defaultValue=e.defaultValue)}function P(e,t,n,s){t=ue.apply([],t);var o,r,a,l,u,c,d=0,h=e.length,p=h-1,f=t[0],m=ye(f);if(m||h>1&&"string"==typeof f&&!ve.checkClone&&lt.test(f))return e.each(function(i){var o=e.eq(i);m&&(t[0]=f.call(this,i,o.html())),P(o,t,n,s)});if(h&&(o=C(t,e[0].ownerDocument,!1,e,s),r=o.firstChild,1===o.childNodes.length&&(o=r),r||s)){for(a=Te.map(x(o,"script"),A),l=a.length;d<h;d++)u=o,d!==p&&(u=Te.clone(u,!0,!0),l&&Te.merge(a,x(u,"script"))),n.call(e[d],u,d);if(l)for(c=a[a.length-1].ownerDocument,Te.map(a,M),d=0;d<l;d++)u=a[d],Ke.test(u.type||"")&&!qe.access(u,"globalEval")&&Te.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?Te._evalUrl&&Te._evalUrl(u.src):i(u.textContent.replace(ut,""),c,u))}return e}function F(e,t,i){for(var n,s=t?Te.filter(t,e):e,o=0;null!=(n=s[o]);o++)i||1!==n.nodeType||Te.cleanData(x(n)),n.parentNode&&(i&&Te.contains(n.ownerDocument,n)&&T(x(n,"script")),n.parentNode.removeChild(n));return e}function $(e,t,i){var n,s,o,r,a=e.style;return i=i||dt(e),i&&(r=i.getPropertyValue(t)||i[t],""!==r||Te.contains(e.ownerDocument,e)||(r=Te.style(e,t)),!ve.pixelBoxStyles()&&ct.test(r)&&ht.test(t)&&(n=a.width,s=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=n,a.minWidth=s,a.maxWidth=o)),void 0!==r?r+"":r}function L(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function z(e){if(e in yt)return e;for(var t=e[0].toUpperCase()+e.slice(1),i=vt.length;i--;)if(e=vt[i]+t,e in yt)return e}function H(e){var t=Te.cssProps[e];return t||(t=Te.cssProps[e]=z(e)||e),t}function I(e,t,i){var n=Ue.exec(t);return n?Math.max(0,n[2]-(i||0))+(n[3]||"px"):t}function O(e,t,i,n,s,o){var r="width"===t?1:0,a=0,l=0;if(i===(n?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=Te.css(e,i+Ye[r],!0,s)),n?("content"===i&&(l-=Te.css(e,"padding"+Ye[r],!0,s)),"margin"!==i&&(l-=Te.css(e,"border"+Ye[r]+"Width",!0,s))):(l+=Te.css(e,"padding"+Ye[r],!0,s),"padding"!==i?l+=Te.css(e,"border"+Ye[r]+"Width",!0,s):a+=Te.css(e,"border"+Ye[r]+"Width",!0,s));return!n&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))),l}function q(e,t,i){var n=dt(e),s=$(e,t,n),o="border-box"===Te.css(e,"boxSizing",!1,n),r=o;if(ct.test(s)){if(!i)return s;s="auto"}return r=r&&(ve.boxSizingReliable()||s===e.style[t]),("auto"===s||!parseFloat(s)&&"inline"===Te.css(e,"display",!1,n))&&(s=e["offset"+t[0].toUpperCase()+t.slice(1)],r=!0),s=parseFloat(s)||0,s+O(e,t,i||(o?"border":"content"),r,n,s)+"px"}function B(e,t,i,n,s){return new B.prototype.init(e,t,i,n,s)}function W(){bt&&(re.hidden===!1&&e.requestAnimationFrame?e.requestAnimationFrame(W):e.setTimeout(W,Te.fx.interval),Te.fx.tick())}function R(){return e.setTimeout(function(){wt=void 0}),wt=Date.now()}function V(e,t){var i,n=0,s={height:e};for(t=t?1:0;n<4;n+=2-t)i=Ye[n],s["margin"+i]=s["padding"+i]=e;return t&&(s.opacity=s.width=e),s}function U(e,t,i){for(var n,s=(Q.tweeners[t]||[]).concat(Q.tweeners["*"]),o=0,r=s.length;o<r;o++)if(n=s[o].call(i,t,e))return n}function Y(e,t,i){var n,s,o,r,a,l,u,c,d="width"in t||"height"in t,h=this,p={},f=e.style,m=e.nodeType&&Xe(e),g=qe.get(e,"fxshow");i.queue||(r=Te._queueHooks(e,"fx"),null==r.unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,Te.queue(e,"fx").length||r.empty.fire()})}));for(n in t)if(s=t[n],xt.test(s)){if(delete t[n],o=o||"toggle"===s,s===(m?"hide":"show")){if("show"!==s||!g||void 0===g[n])continue;m=!0}p[n]=g&&g[n]||Te.style(e,n)}if(l=!Te.isEmptyObject(t),l||!Te.isEmptyObject(p)){d&&1===e.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],u=g&&g.display,null==u&&(u=qe.get(e,"display")),c=Te.css(e,"display"),"none"===c&&(u?c=u:(b([e],!0),u=e.style.display||u,c=Te.css(e,"display"),b([e]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===Te.css(e,"float")&&(l||(h.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1;for(n in p)l||(g?"hidden"in g&&(m=g.hidden):g=qe.access(e,"fxshow",{display:u}),o&&(g.hidden=!m),m&&b([e],!0),h.done(function(){m||b([e]),qe.remove(e,"fxshow");for(n in p)Te.style(e,n,p[n])})),l=U(m?g[n]:0,n,h),n in g||(g[n]=l.start,m&&(l.end=l.start,l.start=0))}}function X(e,t){var i,n,s,o,r;for(i in e)if(n=f(i),s=t[n],o=e[i],Array.isArray(o)&&(s=o[1],o=e[i]=o[0]),i!==n&&(e[n]=o,delete e[i]),r=Te.cssHooks[n],r&&"expand"in r){o=r.expand(o),delete e[n];for(i in o)i in e||(e[i]=o[i],t[i]=s)}else t[n]=s}function Q(e,t,i){var n,s,o=0,r=Q.prefilters.length,a=Te.Deferred().always(function(){delete l.elem}),l=function(){if(s)return!1;for(var t=wt||R(),i=Math.max(0,u.startTime+u.duration-t),n=i/u.duration||0,o=1-n,r=0,l=u.tweens.length;r<l;r++)u.tweens[r].run(o);return a.notifyWith(e,[u,o,i]),o<1&&l?i:(l||a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u]),!1)},u=a.promise({elem:e,props:Te.extend({},t),opts:Te.extend(!0,{specialEasing:{},easing:Te.easing._default},i),originalProperties:t,originalOptions:i,startTime:wt||R(),duration:i.duration,tweens:[],createTween:function(t,i){var n=Te.Tween(e,u.opts,t,i,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(n),n},stop:function(t){var i=0,n=t?u.tweens.length:0;if(s)return this;for(s=!0;i<n;i++)u.tweens[i].run(1);return t?(a.notifyWith(e,[u,1,0]),a.resolveWith(e,[u,t])):a.rejectWith(e,[u,t]),this}}),c=u.props;for(X(c,u.opts.specialEasing);o<r;o++)if(n=Q.prefilters[o].call(u,e,c,u.opts))return ye(n.stop)&&(Te._queueHooks(u.elem,u.opts.queue).stop=n.stop.bind(n)),n;return Te.map(c,U,u),ye(u.opts.start)&&u.opts.start.call(e,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),Te.fx.timer(Te.extend(l,{elem:e,anim:u,queue:u.opts.queue})),u}function G(e){var t=e.match(Fe)||[];return t.join(" ")}function Z(e){return e.getAttribute&&e.getAttribute("class")||""}function J(e){return Array.isArray(e)?e:"string"==typeof e?e.match(Fe)||[]:[]}function K(e,t,i,s){var o;if(Array.isArray(t))Te.each(t,function(t,n){i||Pt.test(e)?s(e,n):K(e+"["+("object"==typeof n&&null!=n?t:"")+"]",n,i,s)});else if(i||"object"!==n(t))s(e,t);else for(o in t)K(e+"["+o+"]",t[o],i,s)}function ee(e){return function(t,i){"string"!=typeof t&&(i=t,t="*");var n,s=0,o=t.toLowerCase().match(Fe)||[];if(ye(i))for(;n=o[s++];)"+"===n[0]?(n=n.slice(1)||"*",(e[n]=e[n]||[]).unshift(i)):(e[n]=e[n]||[]).push(i)}}function te(e,t,i,n){function s(a){var l;return o[a]=!0,Te.each(e[a]||[],function(e,a){var u=a(t,i,n);return"string"!=typeof u||r||o[u]?r?!(l=u):void 0:(t.dataTypes.unshift(u),s(u),!1)}),l}var o={},r=e===Vt;return s(t.dataTypes[0])||!o["*"]&&s("*")}function ie(e,t){var i,n,s=Te.ajaxSettings.flatOptions||{};for(i in t)void 0!==t[i]&&((s[i]?e:n||(n={}))[i]=t[i]);return n&&Te.extend(!0,e,n),e}function ne(e,t,i){for(var n,s,o,r,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===n&&(n=e.mimeType||t.getResponseHeader("Content-Type"));if(n)for(s in a)if(a[s]&&a[s].test(n)){l.unshift(s);break}if(l[0]in i)o=l[0];else{for(s in i){if(!l[0]||e.converters[s+" "+l[0]]){o=s;break}r||(r=s)}o=o||r}if(o)return o!==l[0]&&l.unshift(o),i[o]}function se(e,t,i,n){var s,o,r,a,l,u={},c=e.dataTypes.slice();if(c[1])for(r in e.converters)u[r.toLowerCase()]=e.converters[r];for(o=c.shift();o;)if(e.responseFields[o]&&(i[e.responseFields[o]]=t),!l&&n&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=c.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(r=u[l+" "+o]||u["* "+o],!r)for(s in u)if(a=s.split(" "),a[1]===o&&(r=u[l+" "+a[0]]||u["* "+a[0]])){r===!0?r=u[s]:u[s]!==!0&&(o=a[0],c.unshift(a[1]));break}if(r!==!0)if(r&&e["throws"])t=r(t);else try{t=r(t)}catch(d){return{state:"parsererror",error:r?d:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}var oe=[],re=e.document,ae=Object.getPrototypeOf,le=oe.slice,ue=oe.concat,ce=oe.push,de=oe.indexOf,he={},pe=he.toString,fe=he.hasOwnProperty,me=fe.toString,ge=me.call(Object),ve={},ye=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},we=function(e){return null!=e&&e===e.window},be={type:!0,src:!0,noModule:!0},xe="3.3.1",Te=function(e,t){return new Te.fn.init(e,t)},Ce=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;Te.fn=Te.prototype={jquery:xe,constructor:Te,length:0,toArray:function(){return le.call(this)},get:function(e){return null==e?le.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=Te.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return Te.each(this,e)},map:function(e){return this.pushStack(Te.map(this,function(t,i){return e.call(t,i,t)}))},slice:function(){return this.pushStack(le.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,i=+e+(e<0?t:0);return this.pushStack(i>=0&&i<t?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:ce,sort:oe.sort,splice:oe.splice},Te.extend=Te.fn.extend=function(){var e,t,i,n,s,o,r=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof r&&(u=r,r=arguments[a]||{},a++),"object"==typeof r||ye(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)i=r[t],n=e[t],r!==n&&(u&&n&&(Te.isPlainObject(n)||(s=Array.isArray(n)))?(s?(s=!1,o=i&&Array.isArray(i)?i:[]):o=i&&Te.isPlainObject(i)?i:{},r[t]=Te.extend(u,o,n)):void 0!==n&&(r[t]=n));return r},Te.extend({expando:"jQuery"+(xe+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,i;return!(!e||"[object Object]"!==pe.call(e))&&(!(t=ae(e))||(i=fe.call(t,"constructor")&&t.constructor,"function"==typeof i&&me.call(i)===ge))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){i(e)},each:function(e,t){var i,n=0;if(s(e))for(i=e.length;n<i&&t.call(e[n],n,e[n])!==!1;n++);else for(n in e)if(t.call(e[n],n,e[n])===!1)break;return e},trim:function(e){return null==e?"":(e+"").replace(Ce,"")},makeArray:function(e,t){var i=t||[];return null!=e&&(s(Object(e))?Te.merge(i,"string"==typeof e?[e]:e):ce.call(i,e)),i},inArray:function(e,t,i){return null==t?-1:de.call(t,e,i)},merge:function(e,t){for(var i=+t.length,n=0,s=e.length;n<i;n++)e[s++]=t[n];return e.length=s,e},grep:function(e,t,i){for(var n,s=[],o=0,r=e.length,a=!i;o<r;o++)n=!t(e[o],o),n!==a&&s.push(e[o]);return s},map:function(e,t,i){var n,o,r=0,a=[];if(s(e))for(n=e.length;r<n;r++)o=t(e[r],r,i),null!=o&&a.push(o);else for(r in e)o=t(e[r],r,i),null!=o&&a.push(o);return ue.apply([],a)},guid:1,support:ve}),"function"==typeof Symbol&&(Te.fn[Symbol.iterator]=oe[Symbol.iterator]),Te.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){he["[object "+t+"]"]=t.toLowerCase()});var je=function(e){function t(e,t,i,n){var s,o,r,a,l,u,c,h=t&&t.ownerDocument,f=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==f&&9!==f&&11!==f)return i;if(!n&&((t?t.ownerDocument||t:q)!==P&&D(t),t=t||P,$)){if(11!==f&&(l=ve.exec(e)))if(s=l[1]){if(9===f){if(!(r=t.getElementById(s)))return i;if(r.id===s)return i.push(r),i}else if(h&&(r=h.getElementById(s))&&I(t,r)&&r.id===s)return i.push(r),i}else{if(l[2])return J.apply(i,t.getElementsByTagName(e)),i;if((s=l[3])&&T.getElementsByClassName&&t.getElementsByClassName)return J.apply(i,t.getElementsByClassName(s)),i}if(T.qsa&&!U[e+" "]&&(!L||!L.test(e))){if(1!==f)h=t,c=e;else if("object"!==t.nodeName.toLowerCase()){for((a=t.getAttribute("id"))?a=a.replace(xe,Te):t.setAttribute("id",a=O),u=S(e),o=u.length;o--;)u[o]="#"+a+" "+p(u[o]);c=u.join(","),h=ye.test(e)&&d(t.parentNode)||t}if(c)try{return J.apply(i,h.querySelectorAll(c)),i}catch(m){}finally{a===O&&t.removeAttribute("id")}}}return k(e.replace(ae,"$1"),t,i,n)}function i(){function e(i,n){return t.push(i+" ")>C.cacheLength&&delete e[t.shift()],e[i+" "]=n}var t=[];return e}function n(e){return e[O]=!0,e}function s(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(i){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function o(e,t){for(var i=e.split("|"),n=i.length;n--;)C.attrHandle[i[n]]=t}function r(e,t){var i=t&&e,n=i&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(n)return n;if(i)for(;i=i.nextSibling;)if(i===t)return-1;return e?1:-1}function a(e){return function(t){var i=t.nodeName.toLowerCase();return"input"===i&&t.type===e}}function l(e){return function(t){var i=t.nodeName.toLowerCase();return("input"===i||"button"===i)&&t.type===e}}function u(e){return function(t){return"form"in t?t.parentNode&&t.disabled===!1?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&je(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function c(e){return n(function(t){return t=+t,n(function(i,n){for(var s,o=e([],i.length,t),r=o.length;r--;)i[s=o[r]]&&(i[s]=!(n[s]=i[s]))})})}function d(e){return e&&"undefined"!=typeof e.getElementsByTagName&&e}function h(){}function p(e){for(var t=0,i=e.length,n="";t<i;t++)n+=e[t].value;return n}function f(e,t,i){var n=t.dir,s=t.next,o=s||n,r=i&&"parentNode"===o,a=W++;return t.first?function(t,i,s){for(;t=t[n];)if(1===t.nodeType||r)return e(t,i,s);return!1}:function(t,i,l){var u,c,d,h=[B,a];if(l){for(;t=t[n];)if((1===t.nodeType||r)&&e(t,i,l))return!0}else for(;t=t[n];)if(1===t.nodeType||r)if(d=t[O]||(t[O]={}),c=d[t.uniqueID]||(d[t.uniqueID]={}),s&&s===t.nodeName.toLowerCase())t=t[n]||t;else{if((u=c[o])&&u[0]===B&&u[1]===a)return h[2]=u[2];if(c[o]=h,h[2]=e(t,i,l))return!0}return!1}}function m(e){return e.length>1?function(t,i,n){for(var s=e.length;s--;)if(!e[s](t,i,n))return!1;return!0}:e[0]}function g(e,i,n){for(var s=0,o=i.length;s<o;s++)t(e,i[s],n);return n}function v(e,t,i,n,s){for(var o,r=[],a=0,l=e.length,u=null!=t;a<l;a++)(o=e[a])&&(i&&!i(o,n,s)||(r.push(o),u&&t.push(a)));return r}function y(e,t,i,s,o,r){return s&&!s[O]&&(s=y(s)),o&&!o[O]&&(o=y(o,r)),n(function(n,r,a,l){var u,c,d,h=[],p=[],f=r.length,m=n||g(t||"*",a.nodeType?[a]:a,[]),y=!e||!n&&t?m:v(m,h,e,a,l),w=i?o||(n?e:f||s)?[]:r:y;if(i&&i(y,w,a,l),s)for(u=v(w,p),s(u,[],a,l),c=u.length;c--;)(d=u[c])&&(w[p[c]]=!(y[p[c]]=d));if(n){if(o||e){if(o){for(u=[],c=w.length;c--;)(d=w[c])&&u.push(y[c]=d);o(null,w=[],u,l)}for(c=w.length;c--;)(d=w[c])&&(u=o?ee(n,d):h[c])>-1&&(n[u]=!(r[u]=d))}}else w=v(w===r?w.splice(f,w.length):w),o?o(null,r,w,l):J.apply(r,w)})}function w(e){for(var t,i,n,s=e.length,o=C.relative[e[0].type],r=o||C.relative[" "],a=o?1:0,l=f(function(e){return e===t},r,!0),u=f(function(e){return ee(t,e)>-1},r,!0),c=[function(e,i,n){var s=!o&&(n||i!==A)||((t=i).nodeType?l(e,i,n):u(e,i,n));return t=null,s}];a<s;a++)if(i=C.relative[e[a].type])c=[f(m(c),i)];else{if(i=C.filter[e[a].type].apply(null,e[a].matches),i[O]){for(n=++a;n<s&&!C.relative[e[n].type];n++);return y(a>1&&m(c),a>1&&p(e.slice(0,a-1).concat({value:" "===e[a-2].type?"*":""})).replace(ae,"$1"),i,a<n&&w(e.slice(a,n)),n<s&&w(e=e.slice(n)),n<s&&p(e))}c.push(i)}return m(c)}function b(e,i){var s=i.length>0,o=e.length>0,r=function(n,r,a,l,u){var c,d,h,p=0,f="0",m=n&&[],g=[],y=A,w=n||o&&C.find.TAG("*",u),b=B+=null==y?1:Math.random()||.1,x=w.length;for(u&&(A=r===P||r||u);f!==x&&null!=(c=w[f]);f++){if(o&&c){for(d=0,r||c.ownerDocument===P||(D(c),a=!$);h=e[d++];)if(h(c,r||P,a)){l.push(c);break}u&&(B=b)}s&&((c=!h&&c)&&p--,n&&m.push(c))}if(p+=f,s&&f!==p){for(d=0;h=i[d++];)h(m,g,r,a);if(n){if(p>0)for(;f--;)m[f]||g[f]||(g[f]=G.call(l));g=v(g)}J.apply(l,g),u&&!n&&g.length>0&&p+i.length>1&&t.uniqueSort(l)}return u&&(B=b,A=y),m};return s?n(r):r}var x,T,C,j,_,S,E,k,A,M,N,D,P,F,$,L,z,H,I,O="sizzle"+1*new Date,q=e.document,B=0,W=0,R=i(),V=i(),U=i(),Y=function(e,t){return e===t&&(N=!0),0},X={}.hasOwnProperty,Q=[],G=Q.pop,Z=Q.push,J=Q.push,K=Q.slice,ee=function(e,t){for(var i=0,n=e.length;i<n;i++)if(e[i]===t)return i;return-1},te="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",ie="[\\x20\\t\\r\\n\\f]",ne="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",se="\\["+ie+"*("+ne+")(?:"+ie+"*([*^$|!~]?=)"+ie+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ne+"))|)"+ie+"*\\]",oe=":("+ne+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+se+")*)|.*)\\)|)",re=new RegExp(ie+"+","g"),ae=new RegExp("^"+ie+"+|((?:^|[^\\\\])(?:\\\\.)*)"+ie+"+$","g"),le=new RegExp("^"+ie+"*,"+ie+"*"),ue=new RegExp("^"+ie+"*([>+~]|"+ie+")"+ie+"*"),ce=new RegExp("="+ie+"*([^\\]'\"]*?)"+ie+"*\\]","g"),de=new RegExp(oe),he=new RegExp("^"+ne+"$"),pe={ID:new RegExp("^#("+ne+")"),CLASS:new RegExp("^\\.("+ne+")"),TAG:new RegExp("^("+ne+"|[*])"),ATTR:new RegExp("^"+se),PSEUDO:new RegExp("^"+oe),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+ie+"*(even|odd|(([+-]|)(\\d*)n|)"+ie+"*(?:([+-]|)"+ie+"*(\\d+)|))"+ie+"*\\)|)","i"),bool:new RegExp("^(?:"+te+")$","i"),needsContext:new RegExp("^"+ie+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+ie+"*((?:-\\d)?\\d*)"+ie+"*\\)|)(?=[^-]|$)","i")},fe=/^(?:input|select|textarea|button)$/i,me=/^h\d$/i,ge=/^[^{]+\{\s*\[native \w/,ve=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ye=/[+~]/,we=new RegExp("\\\\([\\da-f]{1,6}"+ie+"?|("+ie+")|.)","ig"),be=function(e,t,i){var n="0x"+t-65536;return n!==n||i?t:n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320)},xe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Te=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Ce=function(){D()},je=f(function(e){return e.disabled===!0&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{J.apply(Q=K.call(q.childNodes),q.childNodes),Q[q.childNodes.length].nodeType}catch(_e){J={apply:Q.length?function(e,t){Z.apply(e,K.call(t))}:function(e,t){for(var i=e.length,n=0;e[i++]=t[n++];);e.length=i-1}}}T=t.support={},_=t.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},D=t.setDocument=function(e){var t,i,n=e?e.ownerDocument||e:q;return n!==P&&9===n.nodeType&&n.documentElement?(P=n,F=P.documentElement,$=!_(P),q!==P&&(i=P.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",Ce,!1):i.attachEvent&&i.attachEvent("onunload",Ce)),T.attributes=s(function(e){return e.className="i",!e.getAttribute("className")}),T.getElementsByTagName=s(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),T.getElementsByClassName=ge.test(P.getElementsByClassName),T.getById=s(function(e){return F.appendChild(e).id=O,!P.getElementsByName||!P.getElementsByName(O).length}),T.getById?(C.filter.ID=function(e){var t=e.replace(we,be);return function(e){return e.getAttribute("id")===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&$){var i=t.getElementById(e);return i?[i]:[]}}):(C.filter.ID=function(e){var t=e.replace(we,be);return function(e){var i="undefined"!=typeof e.getAttributeNode&&e.getAttributeNode("id");return i&&i.value===t}},C.find.ID=function(e,t){if("undefined"!=typeof t.getElementById&&$){var i,n,s,o=t.getElementById(e);if(o){if(i=o.getAttributeNode("id"),i&&i.value===e)return[o];for(s=t.getElementsByName(e),n=0;o=s[n++];)if(i=o.getAttributeNode("id"),i&&i.value===e)return[o]}return[]}}),C.find.TAG=T.getElementsByTagName?function(e,t){return"undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e):T.qsa?t.querySelectorAll(e):void 0}:function(e,t){var i,n=[],s=0,o=t.getElementsByTagName(e);if("*"===e){for(;i=o[s++];)1===i.nodeType&&n.push(i);return n}return o},C.find.CLASS=T.getElementsByClassName&&function(e,t){if("undefined"!=typeof t.getElementsByClassName&&$)return t.getElementsByClassName(e)},z=[],L=[],(T.qsa=ge.test(P.querySelectorAll))&&(s(function(e){F.appendChild(e).innerHTML="<a id='"+O+"'></a><select id='"+O+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&L.push("[*^$]="+ie+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||L.push("\\["+ie+"*(?:value|"+te+")"),e.querySelectorAll("[id~="+O+"-]").length||L.push("~="),e.querySelectorAll(":checked").length||L.push(":checked"),e.querySelectorAll("a#"+O+"+*").length||L.push(".#.+[+~]")}),s(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&L.push("name"+ie+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&L.push(":enabled",":disabled"),F.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&L.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),L.push(",.*:")})),(T.matchesSelector=ge.test(H=F.matches||F.webkitMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector||F.msMatchesSelector))&&s(function(e){T.disconnectedMatch=H.call(e,"*"),H.call(e,"[s!='']:x"),z.push("!=",oe)}),L=L.length&&new RegExp(L.join("|")),z=z.length&&new RegExp(z.join("|")),t=ge.test(F.compareDocumentPosition),I=t||ge.test(F.contains)?function(e,t){var i=9===e.nodeType?e.documentElement:e,n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(i.contains?i.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},Y=t?function(e,t){if(e===t)return N=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i?i:(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1,1&i||!T.sortDetached&&t.compareDocumentPosition(e)===i?e===P||e.ownerDocument===q&&I(q,e)?-1:t===P||t.ownerDocument===q&&I(q,t)?1:M?ee(M,e)-ee(M,t):0:4&i?-1:1)}:function(e,t){if(e===t)return N=!0,0;var i,n=0,s=e.parentNode,o=t.parentNode,a=[e],l=[t];if(!s||!o)return e===P?-1:t===P?1:s?-1:o?1:M?ee(M,e)-ee(M,t):0;if(s===o)return r(e,t);for(i=e;i=i.parentNode;)a.unshift(i);for(i=t;i=i.parentNode;)l.unshift(i);for(;a[n]===l[n];)n++;return n?r(a[n],l[n]):a[n]===q?-1:l[n]===q?1:0},P):P},t.matches=function(e,i){return t(e,null,null,i)},t.matchesSelector=function(e,i){if((e.ownerDocument||e)!==P&&D(e),i=i.replace(ce,"='$1']"),T.matchesSelector&&$&&!U[i+" "]&&(!z||!z.test(i))&&(!L||!L.test(i)))try{var n=H.call(e,i);if(n||T.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(s){}return t(i,P,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==P&&D(e),I(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==P&&D(e);var i=C.attrHandle[t.toLowerCase()],n=i&&X.call(C.attrHandle,t.toLowerCase())?i(e,t,!$):void 0;return void 0!==n?n:T.attributes||!$?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},t.escape=function(e){return(e+"").replace(xe,Te)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,i=[],n=0,s=0;if(N=!T.detectDuplicates,M=!T.sortStable&&e.slice(0),e.sort(Y),N){for(;t=e[s++];)t===e[s]&&(n=i.push(s));for(;n--;)e.splice(i[n],1)}return M=null,e},j=t.getText=function(e){var t,i="",n=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)i+=j(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[n++];)i+=j(t);return i},C=t.selectors={cacheLength:50,createPseudo:n,match:pe,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(we,be),e[3]=(e[3]||e[4]||e[5]||"").replace(we,be),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,i=!e[6]&&e[2];return pe.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":i&&de.test(i)&&(t=S(i,!0))&&(t=i.indexOf(")",i.length-t)-i.length)&&(e[0]=e[0].slice(0,t),e[2]=i.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(we,be).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=R[e+" "];return t||(t=new RegExp("(^|"+ie+")"+e+"("+ie+"|$)"))&&R(e,function(e){return t.test("string"==typeof e.className&&e.className||"undefined"!=typeof e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,i,n){return function(s){var o=t.attr(s,e);return null==o?"!="===i:!i||(o+="","="===i?o===n:"!="===i?o!==n:"^="===i?n&&0===o.indexOf(n):"*="===i?n&&o.indexOf(n)>-1:"$="===i?n&&o.slice(-n.length)===n:"~="===i?(" "+o.replace(re," ")+" ").indexOf(n)>-1:"|="===i&&(o===n||o.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,i,n,s){var o="nth"!==e.slice(0,3),r="last"!==e.slice(-4),a="of-type"===t;return 1===n&&0===s?function(e){return!!e.parentNode}:function(t,i,l){var u,c,d,h,p,f,m=o!==r?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(g){if(o){for(;m;){for(h=t;h=h[m];)if(a?h.nodeName.toLowerCase()===v:1===h.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[r?g.firstChild:g.lastChild],r&&y){for(h=g,d=h[O]||(h[O]={}),c=d[h.uniqueID]||(d[h.uniqueID]={}),u=c[e]||[],p=u[0]===B&&u[1],w=p&&u[2],h=p&&g.childNodes[p];h=++p&&h&&h[m]||(w=p=0)||f.pop();)if(1===h.nodeType&&++w&&h===t){c[e]=[B,p,w];break}}else if(y&&(h=t,d=h[O]||(h[O]={}),c=d[h.uniqueID]||(d[h.uniqueID]={}),u=c[e]||[],p=u[0]===B&&u[1],w=p),w===!1)for(;(h=++p&&h&&h[m]||(w=p=0)||f.pop())&&((a?h.nodeName.toLowerCase()!==v:1!==h.nodeType)||!++w||(y&&(d=h[O]||(h[O]={}),c=d[h.uniqueID]||(d[h.uniqueID]={}),c[e]=[B,w]),h!==t)););return w-=s,w===n||w%n===0&&w/n>=0}}},PSEUDO:function(e,i){var s,o=C.pseudos[e]||C.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return o[O]?o(i):o.length>1?(s=[e,e,"",i],C.setFilters.hasOwnProperty(e.toLowerCase())?n(function(e,t){for(var n,s=o(e,i),r=s.length;r--;)n=ee(e,s[r]),e[n]=!(t[n]=s[r])}):function(e){return o(e,0,s)}):o}},pseudos:{not:n(function(e){var t=[],i=[],s=E(e.replace(ae,"$1"));return s[O]?n(function(e,t,i,n){for(var o,r=s(e,null,n,[]),a=e.length;a--;)(o=r[a])&&(e[a]=!(t[a]=o))}):function(e,n,o){return t[0]=e,s(t,null,o,i),t[0]=null,!i.pop()}}),has:n(function(e){return function(i){return t(e,i).length>0}}),contains:n(function(e){return e=e.replace(we,be),function(t){return(t.textContent||t.innerText||j(t)).indexOf(e)>-1}}),lang:n(function(e){return he.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(we,be).toLowerCase(),function(t){var i;do if(i=$?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return i=i.toLowerCase(),i===e||0===i.indexOf(e+"-");while((t=t.parentNode)&&1===t.nodeType);
return!1}}),target:function(t){var i=e.location&&e.location.hash;return i&&i.slice(1)===t.id},root:function(e){return e===F},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:u(!1),disabled:u(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!C.pseudos.empty(e)},header:function(e){return me.test(e.nodeName)},input:function(e){return fe.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:c(function(){return[0]}),last:c(function(e,t){return[t-1]}),eq:c(function(e,t,i){return[i<0?i+t:i]}),even:c(function(e,t){for(var i=0;i<t;i+=2)e.push(i);return e}),odd:c(function(e,t){for(var i=1;i<t;i+=2)e.push(i);return e}),lt:c(function(e,t,i){for(var n=i<0?i+t:i;--n>=0;)e.push(n);return e}),gt:c(function(e,t,i){for(var n=i<0?i+t:i;++n<t;)e.push(n);return e})}},C.pseudos.nth=C.pseudos.eq;for(x in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[x]=a(x);for(x in{submit:!0,reset:!0})C.pseudos[x]=l(x);return h.prototype=C.filters=C.pseudos,C.setFilters=new h,S=t.tokenize=function(e,i){var n,s,o,r,a,l,u,c=V[e+" "];if(c)return i?0:c.slice(0);for(a=e,l=[],u=C.preFilter;a;){n&&!(s=le.exec(a))||(s&&(a=a.slice(s[0].length)||a),l.push(o=[])),n=!1,(s=ue.exec(a))&&(n=s.shift(),o.push({value:n,type:s[0].replace(ae," ")}),a=a.slice(n.length));for(r in C.filter)!(s=pe[r].exec(a))||u[r]&&!(s=u[r](s))||(n=s.shift(),o.push({value:n,type:r,matches:s}),a=a.slice(n.length));if(!n)break}return i?a.length:a?t.error(e):V(e,l).slice(0)},E=t.compile=function(e,t){var i,n=[],s=[],o=U[e+" "];if(!o){for(t||(t=S(e)),i=t.length;i--;)o=w(t[i]),o[O]?n.push(o):s.push(o);o=U(e,b(s,n)),o.selector=e}return o},k=t.select=function(e,t,i,n){var s,o,r,a,l,u="function"==typeof e&&e,c=!n&&S(e=u.selector||e);if(i=i||[],1===c.length){if(o=c[0]=c[0].slice(0),o.length>2&&"ID"===(r=o[0]).type&&9===t.nodeType&&$&&C.relative[o[1].type]){if(t=(C.find.ID(r.matches[0].replace(we,be),t)||[])[0],!t)return i;u&&(t=t.parentNode),e=e.slice(o.shift().value.length)}for(s=pe.needsContext.test(e)?0:o.length;s--&&(r=o[s],!C.relative[a=r.type]);)if((l=C.find[a])&&(n=l(r.matches[0].replace(we,be),ye.test(o[0].type)&&d(t.parentNode)||t))){if(o.splice(s,1),e=n.length&&p(o),!e)return J.apply(i,n),i;break}}return(u||E(e,c))(n,t,!$,i,!t||ye.test(e)&&d(t.parentNode)||t),i},T.sortStable=O.split("").sort(Y).join("")===O,T.detectDuplicates=!!N,D(),T.sortDetached=s(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),s(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||o("type|href|height|width",function(e,t,i){if(!i)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),T.attributes&&s(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||o("value",function(e,t,i){if(!i&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),s(function(e){return null==e.getAttribute("disabled")})||o(te,function(e,t,i){var n;if(!i)return e[t]===!0?t.toLowerCase():(n=e.getAttributeNode(t))&&n.specified?n.value:null}),t}(e);Te.find=je,Te.expr=je.selectors,Te.expr[":"]=Te.expr.pseudos,Te.uniqueSort=Te.unique=je.uniqueSort,Te.text=je.getText,Te.isXMLDoc=je.isXML,Te.contains=je.contains,Te.escapeSelector=je.escape;var _e=function(e,t,i){for(var n=[],s=void 0!==i;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(s&&Te(e).is(i))break;n.push(e)}return n},Se=function(e,t){for(var i=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&i.push(e);return i},Ee=Te.expr.match.needsContext,ke=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;Te.filter=function(e,t,i){var n=t[0];return i&&(e=":not("+e+")"),1===t.length&&1===n.nodeType?Te.find.matchesSelector(n,e)?[n]:[]:Te.find.matches(e,Te.grep(t,function(e){return 1===e.nodeType}))},Te.fn.extend({find:function(e){var t,i,n=this.length,s=this;if("string"!=typeof e)return this.pushStack(Te(e).filter(function(){for(t=0;t<n;t++)if(Te.contains(s[t],this))return!0}));for(i=this.pushStack([]),t=0;t<n;t++)Te.find(e,s[t],i);return n>1?Te.uniqueSort(i):i},filter:function(e){return this.pushStack(r(this,e||[],!1))},not:function(e){return this.pushStack(r(this,e||[],!0))},is:function(e){return!!r(this,"string"==typeof e&&Ee.test(e)?Te(e):e||[],!1).length}});var Ae,Me=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,Ne=Te.fn.init=function(e,t,i){var n,s;if(!e)return this;if(i=i||Ae,"string"==typeof e){if(n="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:Me.exec(e),!n||!n[1]&&t)return!t||t.jquery?(t||i).find(e):this.constructor(t).find(e);if(n[1]){if(t=t instanceof Te?t[0]:t,Te.merge(this,Te.parseHTML(n[1],t&&t.nodeType?t.ownerDocument||t:re,!0)),ke.test(n[1])&&Te.isPlainObject(t))for(n in t)ye(this[n])?this[n](t[n]):this.attr(n,t[n]);return this}return s=re.getElementById(n[2]),s&&(this[0]=s,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):ye(e)?void 0!==i.ready?i.ready(e):e(Te):Te.makeArray(e,this)};Ne.prototype=Te.fn,Ae=Te(re);var De=/^(?:parents|prev(?:Until|All))/,Pe={children:!0,contents:!0,next:!0,prev:!0};Te.fn.extend({has:function(e){var t=Te(e,this),i=t.length;return this.filter(function(){for(var e=0;e<i;e++)if(Te.contains(this,t[e]))return!0})},closest:function(e,t){var i,n=0,s=this.length,o=[],r="string"!=typeof e&&Te(e);if(!Ee.test(e))for(;n<s;n++)for(i=this[n];i&&i!==t;i=i.parentNode)if(i.nodeType<11&&(r?r.index(i)>-1:1===i.nodeType&&Te.find.matchesSelector(i,e))){o.push(i);break}return this.pushStack(o.length>1?Te.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?de.call(Te(e),this[0]):de.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(Te.uniqueSort(Te.merge(this.get(),Te(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),Te.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _e(e,"parentNode")},parentsUntil:function(e,t,i){return _e(e,"parentNode",i)},next:function(e){return a(e,"nextSibling")},prev:function(e){return a(e,"previousSibling")},nextAll:function(e){return _e(e,"nextSibling")},prevAll:function(e){return _e(e,"previousSibling")},nextUntil:function(e,t,i){return _e(e,"nextSibling",i)},prevUntil:function(e,t,i){return _e(e,"previousSibling",i)},siblings:function(e){return Se((e.parentNode||{}).firstChild,e)},children:function(e){return Se(e.firstChild)},contents:function(e){return o(e,"iframe")?e.contentDocument:(o(e,"template")&&(e=e.content||e),Te.merge([],e.childNodes))}},function(e,t){Te.fn[e]=function(i,n){var s=Te.map(this,t,i);return"Until"!==e.slice(-5)&&(n=i),n&&"string"==typeof n&&(s=Te.filter(n,s)),this.length>1&&(Pe[e]||Te.uniqueSort(s),De.test(e)&&s.reverse()),this.pushStack(s)}});var Fe=/[^\x20\t\r\n\f]+/g;Te.Callbacks=function(e){e="string"==typeof e?l(e):Te.extend({},e);var t,i,s,o,r=[],a=[],u=-1,c=function(){for(o=o||e.once,s=t=!0;a.length;u=-1)for(i=a.shift();++u<r.length;)r[u].apply(i[0],i[1])===!1&&e.stopOnFalse&&(u=r.length,i=!1);e.memory||(i=!1),t=!1,o&&(r=i?[]:"")},d={add:function(){return r&&(i&&!t&&(u=r.length-1,a.push(i)),function s(t){Te.each(t,function(t,i){ye(i)?e.unique&&d.has(i)||r.push(i):i&&i.length&&"string"!==n(i)&&s(i)})}(arguments),i&&!t&&c()),this},remove:function(){return Te.each(arguments,function(e,t){for(var i;(i=Te.inArray(t,r,i))>-1;)r.splice(i,1),i<=u&&u--}),this},has:function(e){return e?Te.inArray(e,r)>-1:r.length>0},empty:function(){return r&&(r=[]),this},disable:function(){return o=a=[],r=i="",this},disabled:function(){return!r},lock:function(){return o=a=[],i||t||(r=i=""),this},locked:function(){return!!o},fireWith:function(e,i){return o||(i=i||[],i=[e,i.slice?i.slice():i],a.push(i),t||c()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!s}};return d},Te.extend({Deferred:function(t){var i=[["notify","progress",Te.Callbacks("memory"),Te.Callbacks("memory"),2],["resolve","done",Te.Callbacks("once memory"),Te.Callbacks("once memory"),0,"resolved"],["reject","fail",Te.Callbacks("once memory"),Te.Callbacks("once memory"),1,"rejected"]],n="pending",s={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},"catch":function(e){return s.then(null,e)},pipe:function(){var e=arguments;return Te.Deferred(function(t){Te.each(i,function(i,n){var s=ye(e[n[4]])&&e[n[4]];o[n[1]](function(){var e=s&&s.apply(this,arguments);e&&ye(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[n[0]+"With"](this,s?[e]:arguments)})}),e=null}).promise()},then:function(t,n,s){function o(t,i,n,s){return function(){var a=this,l=arguments,d=function(){var e,d;if(!(t<r)){if(e=n.apply(a,l),e===i.promise())throw new TypeError("Thenable self-resolution");d=e&&("object"==typeof e||"function"==typeof e)&&e.then,ye(d)?s?d.call(e,o(r,i,u,s),o(r,i,c,s)):(r++,d.call(e,o(r,i,u,s),o(r,i,c,s),o(r,i,u,i.notifyWith))):(n!==u&&(a=void 0,l=[e]),(s||i.resolveWith)(a,l))}},h=s?d:function(){try{d()}catch(e){Te.Deferred.exceptionHook&&Te.Deferred.exceptionHook(e,h.stackTrace),t+1>=r&&(n!==c&&(a=void 0,l=[e]),i.rejectWith(a,l))}};t?h():(Te.Deferred.getStackHook&&(h.stackTrace=Te.Deferred.getStackHook()),e.setTimeout(h))}}var r=0;return Te.Deferred(function(e){i[0][3].add(o(0,e,ye(s)?s:u,e.notifyWith)),i[1][3].add(o(0,e,ye(t)?t:u)),i[2][3].add(o(0,e,ye(n)?n:c))}).promise()},promise:function(e){return null!=e?Te.extend(e,s):s}},o={};return Te.each(i,function(e,t){var r=t[2],a=t[5];s[t[1]]=r.add,a&&r.add(function(){n=a},i[3-e][2].disable,i[3-e][3].disable,i[0][2].lock,i[0][3].lock),r.add(t[3].fire),o[t[0]]=function(){return o[t[0]+"With"](this===o?void 0:this,arguments),this},o[t[0]+"With"]=r.fireWith}),s.promise(o),t&&t.call(o,o),o},when:function(e){var t=arguments.length,i=t,n=Array(i),s=le.call(arguments),o=Te.Deferred(),r=function(e){return function(i){n[e]=this,s[e]=arguments.length>1?le.call(arguments):i,--t||o.resolveWith(n,s)}};if(t<=1&&(d(e,o.done(r(i)).resolve,o.reject,!t),"pending"===o.state()||ye(s[i]&&s[i].then)))return o.then();for(;i--;)d(s[i],r(i),o.reject);return o.promise()}});var $e=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;Te.Deferred.exceptionHook=function(t,i){e.console&&e.console.warn&&t&&$e.test(t.name)&&e.console.warn("jQuery.Deferred exception: "+t.message,t.stack,i)},Te.readyException=function(t){e.setTimeout(function(){throw t})};var Le=Te.Deferred();Te.fn.ready=function(e){return Le.then(e)["catch"](function(e){Te.readyException(e)}),this},Te.extend({isReady:!1,readyWait:1,ready:function(e){(e===!0?--Te.readyWait:Te.isReady)||(Te.isReady=!0,e!==!0&&--Te.readyWait>0||Le.resolveWith(re,[Te]))}}),Te.ready.then=Le.then,"complete"===re.readyState||"loading"!==re.readyState&&!re.documentElement.doScroll?e.setTimeout(Te.ready):(re.addEventListener("DOMContentLoaded",h),e.addEventListener("load",h));var ze=function(e,t,i,s,o,r,a){var l=0,u=e.length,c=null==i;if("object"===n(i)){o=!0;for(l in i)ze(e,t,l,i[l],!0,r,a)}else if(void 0!==s&&(o=!0,ye(s)||(a=!0),c&&(a?(t.call(e,s),t=null):(c=t,t=function(e,t,i){return c.call(Te(e),i)})),t))for(;l<u;l++)t(e[l],i,a?s:s.call(e[l],l,t(e[l],i)));return o?e:c?t.call(e):u?t(e[0],i):r},He=/^-ms-/,Ie=/-([a-z])/g,Oe=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};m.uid=1,m.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Oe(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,i){var n,s=this.cache(e);if("string"==typeof t)s[f(t)]=i;else for(n in t)s[f(n)]=t[n];return s},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][f(t)]},access:function(e,t,i){return void 0===t||t&&"string"==typeof t&&void 0===i?this.get(e,t):(this.set(e,t,i),void 0!==i?i:t)},remove:function(e,t){var i,n=e[this.expando];if(void 0!==n){if(void 0!==t){Array.isArray(t)?t=t.map(f):(t=f(t),t=t in n?[t]:t.match(Fe)||[]),i=t.length;for(;i--;)delete n[t[i]]}(void 0===t||Te.isEmptyObject(n))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!Te.isEmptyObject(t)}};var qe=new m,Be=new m,We=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Re=/[A-Z]/g;Te.extend({hasData:function(e){return Be.hasData(e)||qe.hasData(e)},data:function(e,t,i){return Be.access(e,t,i)},removeData:function(e,t){Be.remove(e,t)},_data:function(e,t,i){return qe.access(e,t,i)},_removeData:function(e,t){qe.remove(e,t)}}),Te.fn.extend({data:function(e,t){var i,n,s,o=this[0],r=o&&o.attributes;if(void 0===e){if(this.length&&(s=Be.get(o),1===o.nodeType&&!qe.get(o,"hasDataAttrs"))){for(i=r.length;i--;)r[i]&&(n=r[i].name,0===n.indexOf("data-")&&(n=f(n.slice(5)),v(o,n,s[n])));qe.set(o,"hasDataAttrs",!0)}return s}return"object"==typeof e?this.each(function(){Be.set(this,e)}):ze(this,function(t){var i;if(o&&void 0===t){if(i=Be.get(o,e),void 0!==i)return i;if(i=v(o,e),void 0!==i)return i}else this.each(function(){Be.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Be.remove(this,e)})}}),Te.extend({queue:function(e,t,i){var n;if(e)return t=(t||"fx")+"queue",n=qe.get(e,t),i&&(!n||Array.isArray(i)?n=qe.access(e,t,Te.makeArray(i)):n.push(i)),n||[]},dequeue:function(e,t){t=t||"fx";var i=Te.queue(e,t),n=i.length,s=i.shift(),o=Te._queueHooks(e,t),r=function(){Te.dequeue(e,t)};"inprogress"===s&&(s=i.shift(),n--),s&&("fx"===t&&i.unshift("inprogress"),delete o.stop,s.call(e,r,o)),!n&&o&&o.empty.fire()},_queueHooks:function(e,t){var i=t+"queueHooks";return qe.get(e,i)||qe.access(e,i,{empty:Te.Callbacks("once memory").add(function(){qe.remove(e,[t+"queue",i])})})}}),Te.fn.extend({queue:function(e,t){var i=2;return"string"!=typeof e&&(t=e,e="fx",i--),arguments.length<i?Te.queue(this[0],e):void 0===t?this:this.each(function(){var i=Te.queue(this,e,t);Te._queueHooks(this,e),"fx"===e&&"inprogress"!==i[0]&&Te.dequeue(this,e)})},dequeue:function(e){return this.each(function(){Te.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var i,n=1,s=Te.Deferred(),o=this,r=this.length,a=function(){--n||s.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";r--;)i=qe.get(o[r],e+"queueHooks"),i&&i.empty&&(n++,i.empty.add(a));return a(),s.promise(t)}});var Ve=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Ue=new RegExp("^(?:([+-])=|)("+Ve+")([a-z%]*)$","i"),Ye=["Top","Right","Bottom","Left"],Xe=function(e,t){return e=t||e,"none"===e.style.display||""===e.style.display&&Te.contains(e.ownerDocument,e)&&"none"===Te.css(e,"display")},Qe=function(e,t,i,n){var s,o,r={};for(o in t)r[o]=e.style[o],e.style[o]=t[o];s=i.apply(e,n||[]);for(o in t)e.style[o]=r[o];return s},Ge={};Te.fn.extend({show:function(){return b(this,!0)},hide:function(){return b(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){Xe(this)?Te(this).show():Te(this).hide()})}});var Ze=/^(?:checkbox|radio)$/i,Je=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Ke=/^$|^module$|\/(?:java|ecma)script/i,et={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};et.optgroup=et.option,et.tbody=et.tfoot=et.colgroup=et.caption=et.thead,et.th=et.td;var tt=/<|&#?\w+;/;!function(){var e=re.createDocumentFragment(),t=e.appendChild(re.createElement("div")),i=re.createElement("input");i.setAttribute("type","radio"),i.setAttribute("checked","checked"),i.setAttribute("name","t"),t.appendChild(i),ve.checkClone=t.cloneNode(!0).cloneNode(!0).lastChild.checked,t.innerHTML="<textarea>x</textarea>",ve.noCloneChecked=!!t.cloneNode(!0).lastChild.defaultValue}();var it=re.documentElement,nt=/^key/,st=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ot=/^([^.]*)(?:\.(.+)|)/;Te.event={global:{},add:function(e,t,i,n,s){var o,r,a,l,u,c,d,h,p,f,m,g=qe.get(e);if(g)for(i.handler&&(o=i,i=o.handler,s=o.selector),s&&Te.find.matchesSelector(it,s),i.guid||(i.guid=Te.guid++),(l=g.events)||(l=g.events={}),(r=g.handle)||(r=g.handle=function(t){return"undefined"!=typeof Te&&Te.event.triggered!==t.type?Te.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Fe)||[""],u=t.length;u--;)a=ot.exec(t[u])||[],p=m=a[1],f=(a[2]||"").split(".").sort(),p&&(d=Te.event.special[p]||{},p=(s?d.delegateType:d.bindType)||p,d=Te.event.special[p]||{},c=Te.extend({type:p,origType:m,data:n,handler:i,guid:i.guid,selector:s,needsContext:s&&Te.expr.match.needsContext.test(s),namespace:f.join(".")},o),(h=l[p])||(h=l[p]=[],h.delegateCount=0,d.setup&&d.setup.call(e,n,f,r)!==!1||e.addEventListener&&e.addEventListener(p,r)),d.add&&(d.add.call(e,c),c.handler.guid||(c.handler.guid=i.guid)),s?h.splice(h.delegateCount++,0,c):h.push(c),Te.event.global[p]=!0)},remove:function(e,t,i,n,s){var o,r,a,l,u,c,d,h,p,f,m,g=qe.hasData(e)&&qe.get(e);if(g&&(l=g.events)){for(t=(t||"").match(Fe)||[""],u=t.length;u--;)if(a=ot.exec(t[u])||[],p=m=a[1],f=(a[2]||"").split(".").sort(),p){for(d=Te.event.special[p]||{},p=(n?d.delegateType:d.bindType)||p,h=l[p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=o=h.length;o--;)c=h[o],!s&&m!==c.origType||i&&i.guid!==c.guid||a&&!a.test(c.namespace)||n&&n!==c.selector&&("**"!==n||!c.selector)||(h.splice(o,1),c.selector&&h.delegateCount--,d.remove&&d.remove.call(e,c));r&&!h.length&&(d.teardown&&d.teardown.call(e,f,g.handle)!==!1||Te.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)Te.event.remove(e,p+t[u],i,n,!0);Te.isEmptyObject(l)&&qe.remove(e,"handle events")}},dispatch:function(e){var t,i,n,s,o,r,a=Te.event.fix(e),l=new Array(arguments.length),u=(qe.get(this,"events")||{})[a.type]||[],c=Te.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,a)!==!1){for(r=Te.event.handlers.call(this,a,u),t=0;(s=r[t++])&&!a.isPropagationStopped();)for(a.currentTarget=s.elem,i=0;(o=s.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,n=((Te.event.special[o.origType]||{}).handle||o.handler).apply(s.elem,l),void 0!==n&&(a.result=n)===!1&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var i,n,s,o,r,a=[],l=t.delegateCount,u=e.target;if(l&&u.nodeType&&!("click"===e.type&&e.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==e.type||u.disabled!==!0)){for(o=[],r={},i=0;i<l;i++)n=t[i],s=n.selector+" ",void 0===r[s]&&(r[s]=n.needsContext?Te(s,this).index(u)>-1:Te.find(s,this,null,[u]).length),r[s]&&o.push(n);o.length&&a.push({elem:u,handlers:o})}return u=this,l<t.length&&a.push({elem:u,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(Te.Event.prototype,e,{enumerable:!0,configurable:!0,get:ye(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[Te.expando]?e:new Te.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==S()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===S()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&o(this,"input"))return this.click(),!1},_default:function(e){return o(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},Te.removeEvent=function(e,t,i){e.removeEventListener&&e.removeEventListener(t,i)},Te.Event=function(e,t){return this instanceof Te.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&e.returnValue===!1?j:_,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&Te.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),void(this[Te.expando]=!0)):new Te.Event(e,t)},Te.Event.prototype={constructor:Te.Event,isDefaultPrevented:_,isPropagationStopped:_,isImmediatePropagationStopped:_,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=j,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=j,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=j,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},Te.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&nt.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&st.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},Te.event.addProp),Te.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){Te.event.special[e]={delegateType:t,bindType:t,handle:function(e){var i,n=this,s=e.relatedTarget,o=e.handleObj;return s&&(s===n||Te.contains(n,s))||(e.type=o.origType,i=o.handler.apply(this,arguments),e.type=t),i}}}),Te.fn.extend({on:function(e,t,i,n){return E(this,e,t,i,n)},one:function(e,t,i,n){return E(this,e,t,i,n,1)},off:function(e,t,i){var n,s;if(e&&e.preventDefault&&e.handleObj)return n=e.handleObj,Te(e.delegateTarget).off(n.namespace?n.origType+"."+n.namespace:n.origType,n.selector,n.handler),this;if("object"==typeof e){for(s in e)this.off(s,t,e[s]);return this}return t!==!1&&"function"!=typeof t||(i=t,t=void 0),i===!1&&(i=_),this.each(function(){Te.event.remove(this,e,i,t)})}});var rt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,at=/<script|<style|<link/i,lt=/checked\s*(?:[^=]|=\s*.checked.)/i,ut=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;Te.extend({htmlPrefilter:function(e){return e.replace(rt,"<$1></$2>")},clone:function(e,t,i){var n,s,o,r,a=e.cloneNode(!0),l=Te.contains(e.ownerDocument,e);if(!(ve.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||Te.isXMLDoc(e)))for(r=x(a),o=x(e),n=0,s=o.length;n<s;n++)D(o[n],r[n]);if(t)if(i)for(o=o||x(e),r=r||x(a),n=0,s=o.length;n<s;n++)N(o[n],r[n]);else N(e,a);return r=x(a,"script"),r.length>0&&T(r,!l&&x(e,"script")),a},cleanData:function(e){for(var t,i,n,s=Te.event.special,o=0;void 0!==(i=e[o]);o++)if(Oe(i)){if(t=i[qe.expando]){if(t.events)for(n in t.events)s[n]?Te.event.remove(i,n):Te.removeEvent(i,n,t.handle);i[qe.expando]=void 0}i[Be.expando]&&(i[Be.expando]=void 0)}}}),Te.fn.extend({detach:function(e){return F(this,e,!0)},remove:function(e){return F(this,e)},text:function(e){return ze(this,function(e){return void 0===e?Te.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.appendChild(e)}})},prepend:function(){return P(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=k(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return P(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(Te.cleanData(x(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return Te.clone(this,e,t)})},html:function(e){return ze(this,function(e){var t=this[0]||{},i=0,n=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!at.test(e)&&!et[(Je.exec(e)||["",""])[1].toLowerCase()]){e=Te.htmlPrefilter(e);try{for(;i<n;i++)t=this[i]||{},1===t.nodeType&&(Te.cleanData(x(t,!1)),t.innerHTML=e);t=0}catch(s){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return P(this,arguments,function(t){var i=this.parentNode;Te.inArray(this,e)<0&&(Te.cleanData(x(this)),i&&i.replaceChild(t,this))},e)}}),Te.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){Te.fn[e]=function(e){for(var i,n=[],s=Te(e),o=s.length-1,r=0;r<=o;r++)i=r===o?this:this.clone(!0),Te(s[r])[t](i),ce.apply(n,i.get());return this.pushStack(n)}});var ct=new RegExp("^("+Ve+")(?!px)[a-z%]+$","i"),dt=function(t){var i=t.ownerDocument.defaultView;return i&&i.opener||(i=e),i.getComputedStyle(t)},ht=new RegExp(Ye.join("|"),"i");!function(){function t(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",it.appendChild(l).appendChild(u);var t=e.getComputedStyle(u);n="1%"!==t.top,a=12===i(t.marginLeft),u.style.right="60%",r=36===i(t.right),s=36===i(t.width),u.style.position="absolute",o=36===u.offsetWidth||"absolute",it.removeChild(l),u=null}}function i(e){return Math.round(parseFloat(e))}var n,s,o,r,a,l=re.createElement("div"),u=re.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",ve.clearCloneStyle="content-box"===u.style.backgroundClip,Te.extend(ve,{boxSizingReliable:function(){return t(),s},pixelBoxStyles:function(){return t(),r},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),a},scrollboxSize:function(){return t(),o}}))}();var pt=/^(none|table(?!-c[ea]).+)/,ft=/^--/,mt={position:"absolute",visibility:"hidden",display:"block"},gt={letterSpacing:"0",fontWeight:"400"},vt=["Webkit","Moz","ms"],yt=re.createElement("div").style;Te.extend({cssHooks:{opacity:{get:function(e,t){if(t){var i=$(e,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,i,n){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var s,o,r,a=f(t),l=ft.test(t),u=e.style;return l||(t=H(a)),r=Te.cssHooks[t]||Te.cssHooks[a],void 0===i?r&&"get"in r&&void 0!==(s=r.get(e,!1,n))?s:u[t]:(o=typeof i,"string"===o&&(s=Ue.exec(i))&&s[1]&&(i=y(e,t,s),o="number"),null!=i&&i===i&&("number"===o&&(i+=s&&s[3]||(Te.cssNumber[a]?"":"px")),ve.clearCloneStyle||""!==i||0!==t.indexOf("background")||(u[t]="inherit"),r&&"set"in r&&void 0===(i=r.set(e,i,n))||(l?u.setProperty(t,i):u[t]=i)),void 0)}},css:function(e,t,i,n){var s,o,r,a=f(t),l=ft.test(t);return l||(t=H(a)),r=Te.cssHooks[t]||Te.cssHooks[a],r&&"get"in r&&(s=r.get(e,!0,i)),void 0===s&&(s=$(e,t,n)),"normal"===s&&t in gt&&(s=gt[t]),""===i||i?(o=parseFloat(s),i===!0||isFinite(o)?o||0:s):s}}),Te.each(["height","width"],function(e,t){Te.cssHooks[t]={get:function(e,i,n){if(i)return!pt.test(Te.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?q(e,t,n):Qe(e,mt,function(){return q(e,t,n)})},set:function(e,i,n){var s,o=dt(e),r="border-box"===Te.css(e,"boxSizing",!1,o),a=n&&O(e,t,n,r,o);return r&&ve.scrollboxSize()===o.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-O(e,t,"border",!1,o)-.5)),a&&(s=Ue.exec(i))&&"px"!==(s[3]||"px")&&(e.style[t]=i,i=Te.css(e,t)),I(e,i,a)}}}),Te.cssHooks.marginLeft=L(ve.reliableMarginLeft,function(e,t){if(t)return(parseFloat($(e,"marginLeft"))||e.getBoundingClientRect().left-Qe(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),Te.each({margin:"",padding:"",border:"Width"},function(e,t){Te.cssHooks[e+t]={expand:function(i){for(var n=0,s={},o="string"==typeof i?i.split(" "):[i];n<4;n++)s[e+Ye[n]+t]=o[n]||o[n-2]||o[0];return s}},"margin"!==e&&(Te.cssHooks[e+t].set=I)}),Te.fn.extend({css:function(e,t){return ze(this,function(e,t,i){var n,s,o={},r=0;if(Array.isArray(t)){for(n=dt(e),s=t.length;r<s;r++)o[t[r]]=Te.css(e,t[r],!1,n);return o}return void 0!==i?Te.style(e,t,i):Te.css(e,t)},e,t,arguments.length>1)}}),Te.Tween=B,B.prototype={constructor:B,init:function(e,t,i,n,s,o){this.elem=e,this.prop=i,this.easing=s||Te.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=n,this.unit=o||(Te.cssNumber[i]?"":"px")},cur:function(){var e=B.propHooks[this.prop];return e&&e.get?e.get(this):B.propHooks._default.get(this)},run:function(e){var t,i=B.propHooks[this.prop];return this.options.duration?this.pos=t=Te.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):B.propHooks._default.set(this),this}},B.prototype.init.prototype=B.prototype,B.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=Te.css(e.elem,e.prop,""),t&&"auto"!==t?t:0)},set:function(e){Te.fx.step[e.prop]?Te.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[Te.cssProps[e.prop]]&&!Te.cssHooks[e.prop]?e.elem[e.prop]=e.now:Te.style(e.elem,e.prop,e.now+e.unit)}}},B.propHooks.scrollTop=B.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},Te.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},Te.fx=B.prototype.init,Te.fx.step={};var wt,bt,xt=/^(?:toggle|show|hide)$/,Tt=/queueHooks$/;Te.Animation=Te.extend(Q,{tweeners:{"*":[function(e,t){var i=this.createTween(e,t);return y(i.elem,e,Ue.exec(t),i),i}]},tweener:function(e,t){ye(e)?(t=e,e=["*"]):e=e.match(Fe);for(var i,n=0,s=e.length;n<s;n++)i=e[n],Q.tweeners[i]=Q.tweeners[i]||[],Q.tweeners[i].unshift(t)},prefilters:[Y],prefilter:function(e,t){t?Q.prefilters.unshift(e):Q.prefilters.push(e)}}),Te.speed=function(e,t,i){var n=e&&"object"==typeof e?Te.extend({},e):{complete:i||!i&&t||ye(e)&&e,duration:e,easing:i&&t||t&&!ye(t)&&t};return Te.fx.off?n.duration=0:"number"!=typeof n.duration&&(n.duration in Te.fx.speeds?n.duration=Te.fx.speeds[n.duration]:n.duration=Te.fx.speeds._default),null!=n.queue&&n.queue!==!0||(n.queue="fx"),n.old=n.complete,n.complete=function(){ye(n.old)&&n.old.call(this),n.queue&&Te.dequeue(this,n.queue)},n},Te.fn.extend({fadeTo:function(e,t,i,n){return this.filter(Xe).css("opacity",0).show().end().animate({opacity:t},e,i,n)},animate:function(e,t,i,n){var s=Te.isEmptyObject(e),o=Te.speed(t,i,n),r=function(){var t=Q(this,Te.extend({},e),o);(s||qe.get(this,"finish"))&&t.stop(!0)};return r.finish=r,s||o.queue===!1?this.each(r):this.queue(o.queue,r)},stop:function(e,t,i){var n=function(e){var t=e.stop;delete e.stop,t(i)};return"string"!=typeof e&&(i=t,t=e,e=void 0),t&&e!==!1&&this.queue(e||"fx",[]),this.each(function(){var t=!0,s=null!=e&&e+"queueHooks",o=Te.timers,r=qe.get(this);
if(s)r[s]&&r[s].stop&&n(r[s]);else for(s in r)r[s]&&r[s].stop&&Tt.test(s)&&n(r[s]);for(s=o.length;s--;)o[s].elem!==this||null!=e&&o[s].queue!==e||(o[s].anim.stop(i),t=!1,o.splice(s,1));!t&&i||Te.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||"fx"),this.each(function(){var t,i=qe.get(this),n=i[e+"queue"],s=i[e+"queueHooks"],o=Te.timers,r=n?n.length:0;for(i.finish=!0,Te.queue(this,e,[]),s&&s.stop&&s.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<r;t++)n[t]&&n[t].finish&&n[t].finish.call(this);delete i.finish})}}),Te.each(["toggle","show","hide"],function(e,t){var i=Te.fn[t];Te.fn[t]=function(e,n,s){return null==e||"boolean"==typeof e?i.apply(this,arguments):this.animate(V(t,!0),e,n,s)}}),Te.each({slideDown:V("show"),slideUp:V("hide"),slideToggle:V("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){Te.fn[e]=function(e,i,n){return this.animate(t,e,i,n)}}),Te.timers=[],Te.fx.tick=function(){var e,t=0,i=Te.timers;for(wt=Date.now();t<i.length;t++)e=i[t],e()||i[t]!==e||i.splice(t--,1);i.length||Te.fx.stop(),wt=void 0},Te.fx.timer=function(e){Te.timers.push(e),Te.fx.start()},Te.fx.interval=13,Te.fx.start=function(){bt||(bt=!0,W())},Te.fx.stop=function(){bt=null},Te.fx.speeds={slow:600,fast:200,_default:400},Te.fn.delay=function(t,i){return t=Te.fx?Te.fx.speeds[t]||t:t,i=i||"fx",this.queue(i,function(i,n){var s=e.setTimeout(i,t);n.stop=function(){e.clearTimeout(s)}})},function(){var e=re.createElement("input"),t=re.createElement("select"),i=t.appendChild(re.createElement("option"));e.type="checkbox",ve.checkOn=""!==e.value,ve.optSelected=i.selected,e=re.createElement("input"),e.value="t",e.type="radio",ve.radioValue="t"===e.value}();var Ct,jt=Te.expr.attrHandle;Te.fn.extend({attr:function(e,t){return ze(this,Te.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){Te.removeAttr(this,e)})}}),Te.extend({attr:function(e,t,i){var n,s,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return"undefined"==typeof e.getAttribute?Te.prop(e,t,i):(1===o&&Te.isXMLDoc(e)||(s=Te.attrHooks[t.toLowerCase()]||(Te.expr.match.bool.test(t)?Ct:void 0)),void 0!==i?null===i?void Te.removeAttr(e,t):s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:(e.setAttribute(t,i+""),i):s&&"get"in s&&null!==(n=s.get(e,t))?n:(n=Te.find.attr(e,t),null==n?void 0:n))},attrHooks:{type:{set:function(e,t){if(!ve.radioValue&&"radio"===t&&o(e,"input")){var i=e.value;return e.setAttribute("type",t),i&&(e.value=i),t}}}},removeAttr:function(e,t){var i,n=0,s=t&&t.match(Fe);if(s&&1===e.nodeType)for(;i=s[n++];)e.removeAttribute(i)}}),Ct={set:function(e,t,i){return t===!1?Te.removeAttr(e,i):e.setAttribute(i,i),i}},Te.each(Te.expr.match.bool.source.match(/\w+/g),function(e,t){var i=jt[t]||Te.find.attr;jt[t]=function(e,t,n){var s,o,r=t.toLowerCase();return n||(o=jt[r],jt[r]=s,s=null!=i(e,t,n)?r:null,jt[r]=o),s}});var _t=/^(?:input|select|textarea|button)$/i,St=/^(?:a|area)$/i;Te.fn.extend({prop:function(e,t){return ze(this,Te.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[Te.propFix[e]||e]})}}),Te.extend({prop:function(e,t,i){var n,s,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&Te.isXMLDoc(e)||(t=Te.propFix[t]||t,s=Te.propHooks[t]),void 0!==i?s&&"set"in s&&void 0!==(n=s.set(e,i,t))?n:e[t]=i:s&&"get"in s&&null!==(n=s.get(e,t))?n:e[t]},propHooks:{tabIndex:{get:function(e){var t=Te.find.attr(e,"tabindex");return t?parseInt(t,10):_t.test(e.nodeName)||St.test(e.nodeName)&&e.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),ve.optSelected||(Te.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),Te.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){Te.propFix[this.toLowerCase()]=this}),Te.fn.extend({addClass:function(e){var t,i,n,s,o,r,a,l=0;if(ye(e))return this.each(function(t){Te(this).addClass(e.call(this,t,Z(this)))});if(t=J(e),t.length)for(;i=this[l++];)if(s=Z(i),n=1===i.nodeType&&" "+G(s)+" "){for(r=0;o=t[r++];)n.indexOf(" "+o+" ")<0&&(n+=o+" ");a=G(n),s!==a&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,n,s,o,r,a,l=0;if(ye(e))return this.each(function(t){Te(this).removeClass(e.call(this,t,Z(this)))});if(!arguments.length)return this.attr("class","");if(t=J(e),t.length)for(;i=this[l++];)if(s=Z(i),n=1===i.nodeType&&" "+G(s)+" "){for(r=0;o=t[r++];)for(;n.indexOf(" "+o+" ")>-1;)n=n.replace(" "+o+" "," ");a=G(n),s!==a&&i.setAttribute("class",a)}return this},toggleClass:function(e,t){var i=typeof e,n="string"===i||Array.isArray(e);return"boolean"==typeof t&&n?t?this.addClass(e):this.removeClass(e):ye(e)?this.each(function(i){Te(this).toggleClass(e.call(this,i,Z(this),t),t)}):this.each(function(){var t,s,o,r;if(n)for(s=0,o=Te(this),r=J(e);t=r[s++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==i||(t=Z(this),t&&qe.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||e===!1?"":qe.get(this,"__className__")||""))})},hasClass:function(e){var t,i,n=0;for(t=" "+e+" ";i=this[n++];)if(1===i.nodeType&&(" "+G(Z(i))+" ").indexOf(t)>-1)return!0;return!1}});var Et=/\r/g;Te.fn.extend({val:function(e){var t,i,n,s=this[0];{if(arguments.length)return n=ye(e),this.each(function(i){var s;1===this.nodeType&&(s=n?e.call(this,i,Te(this).val()):e,null==s?s="":"number"==typeof s?s+="":Array.isArray(s)&&(s=Te.map(s,function(e){return null==e?"":e+""})),t=Te.valHooks[this.type]||Te.valHooks[this.nodeName.toLowerCase()],t&&"set"in t&&void 0!==t.set(this,s,"value")||(this.value=s))});if(s)return t=Te.valHooks[s.type]||Te.valHooks[s.nodeName.toLowerCase()],t&&"get"in t&&void 0!==(i=t.get(s,"value"))?i:(i=s.value,"string"==typeof i?i.replace(Et,""):null==i?"":i)}}}),Te.extend({valHooks:{option:{get:function(e){var t=Te.find.attr(e,"value");return null!=t?t:G(Te.text(e))}},select:{get:function(e){var t,i,n,s=e.options,r=e.selectedIndex,a="select-one"===e.type,l=a?null:[],u=a?r+1:s.length;for(n=r<0?u:a?r:0;n<u;n++)if(i=s[n],(i.selected||n===r)&&!i.disabled&&(!i.parentNode.disabled||!o(i.parentNode,"optgroup"))){if(t=Te(i).val(),a)return t;l.push(t)}return l},set:function(e,t){for(var i,n,s=e.options,o=Te.makeArray(t),r=s.length;r--;)n=s[r],(n.selected=Te.inArray(Te.valHooks.option.get(n),o)>-1)&&(i=!0);return i||(e.selectedIndex=-1),o}}}}),Te.each(["radio","checkbox"],function(){Te.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=Te.inArray(Te(e).val(),t)>-1}},ve.checkOn||(Te.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),ve.focusin="onfocusin"in e;var kt=/^(?:focusinfocus|focusoutblur)$/,At=function(e){e.stopPropagation()};Te.extend(Te.event,{trigger:function(t,i,n,s){var o,r,a,l,u,c,d,h,p=[n||re],f=fe.call(t,"type")?t.type:t,m=fe.call(t,"namespace")?t.namespace.split("."):[];if(r=h=a=n=n||re,3!==n.nodeType&&8!==n.nodeType&&!kt.test(f+Te.event.triggered)&&(f.indexOf(".")>-1&&(m=f.split("."),f=m.shift(),m.sort()),u=f.indexOf(":")<0&&"on"+f,t=t[Te.expando]?t:new Te.Event(f,"object"==typeof t&&t),t.isTrigger=s?2:3,t.namespace=m.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),i=null==i?[t]:Te.makeArray(i,[t]),d=Te.event.special[f]||{},s||!d.trigger||d.trigger.apply(n,i)!==!1)){if(!s&&!d.noBubble&&!we(n)){for(l=d.delegateType||f,kt.test(l+f)||(r=r.parentNode);r;r=r.parentNode)p.push(r),a=r;a===(n.ownerDocument||re)&&p.push(a.defaultView||a.parentWindow||e)}for(o=0;(r=p[o++])&&!t.isPropagationStopped();)h=r,t.type=o>1?l:d.bindType||f,c=(qe.get(r,"events")||{})[t.type]&&qe.get(r,"handle"),c&&c.apply(r,i),c=u&&r[u],c&&c.apply&&Oe(r)&&(t.result=c.apply(r,i),t.result===!1&&t.preventDefault());return t.type=f,s||t.isDefaultPrevented()||d._default&&d._default.apply(p.pop(),i)!==!1||!Oe(n)||u&&ye(n[f])&&!we(n)&&(a=n[u],a&&(n[u]=null),Te.event.triggered=f,t.isPropagationStopped()&&h.addEventListener(f,At),n[f](),t.isPropagationStopped()&&h.removeEventListener(f,At),Te.event.triggered=void 0,a&&(n[u]=a)),t.result}},simulate:function(e,t,i){var n=Te.extend(new Te.Event,i,{type:e,isSimulated:!0});Te.event.trigger(n,null,t)}}),Te.fn.extend({trigger:function(e,t){return this.each(function(){Te.event.trigger(e,t,this)})},triggerHandler:function(e,t){var i=this[0];if(i)return Te.event.trigger(e,t,i,!0)}}),ve.focusin||Te.each({focus:"focusin",blur:"focusout"},function(e,t){var i=function(e){Te.event.simulate(t,e.target,Te.event.fix(e))};Te.event.special[t]={setup:function(){var n=this.ownerDocument||this,s=qe.access(n,t);s||n.addEventListener(e,i,!0),qe.access(n,t,(s||0)+1)},teardown:function(){var n=this.ownerDocument||this,s=qe.access(n,t)-1;s?qe.access(n,t,s):(n.removeEventListener(e,i,!0),qe.remove(n,t))}}});var Mt=e.location,Nt=Date.now(),Dt=/\?/;Te.parseXML=function(t){var i;if(!t||"string"!=typeof t)return null;try{i=(new e.DOMParser).parseFromString(t,"text/xml")}catch(n){i=void 0}return i&&!i.getElementsByTagName("parsererror").length||Te.error("Invalid XML: "+t),i};var Pt=/\[\]$/,Ft=/\r?\n/g,$t=/^(?:submit|button|image|reset|file)$/i,Lt=/^(?:input|select|textarea|keygen)/i;Te.param=function(e,t){var i,n=[],s=function(e,t){var i=ye(t)?t():t;n[n.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==i?"":i)};if(Array.isArray(e)||e.jquery&&!Te.isPlainObject(e))Te.each(e,function(){s(this.name,this.value)});else for(i in e)K(i,e[i],t,s);return n.join("&")},Te.fn.extend({serialize:function(){return Te.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=Te.prop(this,"elements");return e?Te.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!Te(this).is(":disabled")&&Lt.test(this.nodeName)&&!$t.test(e)&&(this.checked||!Ze.test(e))}).map(function(e,t){var i=Te(this).val();return null==i?null:Array.isArray(i)?Te.map(i,function(e){return{name:t.name,value:e.replace(Ft,"\r\n")}}):{name:t.name,value:i.replace(Ft,"\r\n")}}).get()}});var zt=/%20/g,Ht=/#.*$/,It=/([?&])_=[^&]*/,Ot=/^(.*?):[ \t]*([^\r\n]*)$/gm,qt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Bt=/^(?:GET|HEAD)$/,Wt=/^\/\//,Rt={},Vt={},Ut="*/".concat("*"),Yt=re.createElement("a");Yt.href=Mt.href,Te.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Mt.href,type:"GET",isLocal:qt.test(Mt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ut,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":Te.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?ie(ie(e,Te.ajaxSettings),t):ie(Te.ajaxSettings,e)},ajaxPrefilter:ee(Rt),ajaxTransport:ee(Vt),ajax:function(t,i){function n(t,i,n,a){var u,h,p,b,x,T=i;c||(c=!0,l&&e.clearTimeout(l),s=void 0,r=a||"",C.readyState=t>0?4:0,u=t>=200&&t<300||304===t,n&&(b=ne(f,C,n)),b=se(f,b,C,u),u?(f.ifModified&&(x=C.getResponseHeader("Last-Modified"),x&&(Te.lastModified[o]=x),x=C.getResponseHeader("etag"),x&&(Te.etag[o]=x)),204===t||"HEAD"===f.type?T="nocontent":304===t?T="notmodified":(T=b.state,h=b.data,p=b.error,u=!p)):(p=T,!t&&T||(T="error",t<0&&(t=0))),C.status=t,C.statusText=(i||T)+"",u?v.resolveWith(m,[h,T,C]):v.rejectWith(m,[C,T,p]),C.statusCode(w),w=void 0,d&&g.trigger(u?"ajaxSuccess":"ajaxError",[C,f,u?h:p]),y.fireWith(m,[C,T]),d&&(g.trigger("ajaxComplete",[C,f]),--Te.active||Te.event.trigger("ajaxStop")))}"object"==typeof t&&(i=t,t=void 0),i=i||{};var s,o,r,a,l,u,c,d,h,p,f=Te.ajaxSetup({},i),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?Te(m):Te.event,v=Te.Deferred(),y=Te.Callbacks("once memory"),w=f.statusCode||{},b={},x={},T="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Ot.exec(r);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?r:null},setRequestHeader:function(e,t){return null==c&&(e=x[e.toLowerCase()]=x[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)C.always(e[C.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||T;return s&&s.abort(t),n(0,t),this}};if(v.promise(C),f.url=((t||f.url||Mt.href)+"").replace(Wt,Mt.protocol+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(Fe)||[""],null==f.crossDomain){u=re.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=Yt.protocol+"//"+Yt.host!=u.protocol+"//"+u.host}catch(j){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=Te.param(f.data,f.traditional)),te(Rt,f,i,C),c)return C;d=Te.event&&f.global,d&&0===Te.active++&&Te.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Bt.test(f.type),o=f.url.replace(Ht,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(zt,"+")):(p=f.url.slice(o.length),f.data&&(f.processData||"string"==typeof f.data)&&(o+=(Dt.test(o)?"&":"?")+f.data,delete f.data),f.cache===!1&&(o=o.replace(It,"$1"),p=(Dt.test(o)?"&":"?")+"_="+Nt++ +p),f.url=o+p),f.ifModified&&(Te.lastModified[o]&&C.setRequestHeader("If-Modified-Since",Te.lastModified[o]),Te.etag[o]&&C.setRequestHeader("If-None-Match",Te.etag[o])),(f.data&&f.hasContent&&f.contentType!==!1||i.contentType)&&C.setRequestHeader("Content-Type",f.contentType),C.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ut+"; q=0.01":""):f.accepts["*"]);for(h in f.headers)C.setRequestHeader(h,f.headers[h]);if(f.beforeSend&&(f.beforeSend.call(m,C,f)===!1||c))return C.abort();if(T="abort",y.add(f.complete),C.done(f.success),C.fail(f.error),s=te(Vt,f,i,C)){if(C.readyState=1,d&&g.trigger("ajaxSend",[C,f]),c)return C;f.async&&f.timeout>0&&(l=e.setTimeout(function(){C.abort("timeout")},f.timeout));try{c=!1,s.send(b,n)}catch(j){if(c)throw j;n(-1,j)}}else n(-1,"No Transport");return C},getJSON:function(e,t,i){return Te.get(e,t,i,"json")},getScript:function(e,t){return Te.get(e,void 0,t,"script")}}),Te.each(["get","post"],function(e,t){Te[t]=function(e,i,n,s){return ye(i)&&(s=s||n,n=i,i=void 0),Te.ajax(Te.extend({url:e,type:t,dataType:s,data:i,success:n},Te.isPlainObject(e)&&e))}}),Te._evalUrl=function(e){return Te.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},Te.fn.extend({wrapAll:function(e){var t;return this[0]&&(ye(e)&&(e=e.call(this[0])),t=Te(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return ye(e)?this.each(function(t){Te(this).wrapInner(e.call(this,t))}):this.each(function(){var t=Te(this),i=t.contents();i.length?i.wrapAll(e):t.append(e)})},wrap:function(e){var t=ye(e);return this.each(function(i){Te(this).wrapAll(t?e.call(this,i):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){Te(this).replaceWith(this.childNodes)}),this}}),Te.expr.pseudos.hidden=function(e){return!Te.expr.pseudos.visible(e)},Te.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},Te.ajaxSettings.xhr=function(){try{return new e.XMLHttpRequest}catch(t){}};var Xt={0:200,1223:204},Qt=Te.ajaxSettings.xhr();ve.cors=!!Qt&&"withCredentials"in Qt,ve.ajax=Qt=!!Qt,Te.ajaxTransport(function(t){var i,n;if(ve.cors||Qt&&!t.crossDomain)return{send:function(s,o){var r,a=t.xhr();if(a.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(r in t.xhrFields)a[r]=t.xhrFields[r];t.mimeType&&a.overrideMimeType&&a.overrideMimeType(t.mimeType),t.crossDomain||s["X-Requested-With"]||(s["X-Requested-With"]="XMLHttpRequest");for(r in s)a.setRequestHeader(r,s[r]);i=function(e){return function(){i&&(i=n=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Xt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=i(),n=a.onerror=a.ontimeout=i("error"),void 0!==a.onabort?a.onabort=n:a.onreadystatechange=function(){4===a.readyState&&e.setTimeout(function(){i&&n()})},i=i("abort");try{a.send(t.hasContent&&t.data||null)}catch(l){if(i)throw l}},abort:function(){i&&i()}}}),Te.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),Te.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return Te.globalEval(e),e}}}),Te.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),Te.ajaxTransport("script",function(e){if(e.crossDomain){var t,i;return{send:function(n,s){t=Te("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",i=function(e){t.remove(),i=null,e&&s("error"===e.type?404:200,e.type)}),re.head.appendChild(t[0])},abort:function(){i&&i()}}}});var Gt=[],Zt=/(=)\?(?=&|$)|\?\?/;Te.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Gt.pop()||Te.expando+"_"+Nt++;return this[e]=!0,e}}),Te.ajaxPrefilter("json jsonp",function(t,i,n){var s,o,r,a=t.jsonp!==!1&&(Zt.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Zt.test(t.data)&&"data");if(a||"jsonp"===t.dataTypes[0])return s=t.jsonpCallback=ye(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(Zt,"$1"+s):t.jsonp!==!1&&(t.url+=(Dt.test(t.url)?"&":"?")+t.jsonp+"="+s),t.converters["script json"]=function(){return r||Te.error(s+" was not called"),r[0]},t.dataTypes[0]="json",o=e[s],e[s]=function(){r=arguments},n.always(function(){void 0===o?Te(e).removeProp(s):e[s]=o,t[s]&&(t.jsonpCallback=i.jsonpCallback,Gt.push(s)),r&&ye(o)&&o(r[0]),r=o=void 0}),"script"}),ve.createHTMLDocument=function(){var e=re.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),Te.parseHTML=function(e,t,i){if("string"!=typeof e)return[];"boolean"==typeof t&&(i=t,t=!1);var n,s,o;return t||(ve.createHTMLDocument?(t=re.implementation.createHTMLDocument(""),n=t.createElement("base"),n.href=re.location.href,t.head.appendChild(n)):t=re),s=ke.exec(e),o=!i&&[],s?[t.createElement(s[1])]:(s=C([e],t,o),o&&o.length&&Te(o).remove(),Te.merge([],s.childNodes))},Te.fn.load=function(e,t,i){var n,s,o,r=this,a=e.indexOf(" ");return a>-1&&(n=G(e.slice(a)),e=e.slice(0,a)),ye(t)?(i=t,t=void 0):t&&"object"==typeof t&&(s="POST"),r.length>0&&Te.ajax({url:e,type:s||"GET",dataType:"html",data:t}).done(function(e){o=arguments,r.html(n?Te("<div>").append(Te.parseHTML(e)).find(n):e)}).always(i&&function(e,t){r.each(function(){i.apply(this,o||[e.responseText,t,e])})}),this},Te.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){Te.fn[t]=function(e){return this.on(t,e)}}),Te.expr.pseudos.animated=function(e){return Te.grep(Te.timers,function(t){return e===t.elem}).length},Te.offset={setOffset:function(e,t,i){var n,s,o,r,a,l,u,c=Te.css(e,"position"),d=Te(e),h={};"static"===c&&(e.style.position="relative"),a=d.offset(),o=Te.css(e,"top"),l=Te.css(e,"left"),u=("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1,u?(n=d.position(),r=n.top,s=n.left):(r=parseFloat(o)||0,s=parseFloat(l)||0),ye(t)&&(t=t.call(e,i,Te.extend({},a))),null!=t.top&&(h.top=t.top-a.top+r),null!=t.left&&(h.left=t.left-a.left+s),"using"in t?t.using.call(e,h):d.css(h)}},Te.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){Te.offset.setOffset(this,e,t)});var t,i,n=this[0];if(n)return n.getClientRects().length?(t=n.getBoundingClientRect(),i=n.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var e,t,i,n=this[0],s={top:0,left:0};if("fixed"===Te.css(n,"position"))t=n.getBoundingClientRect();else{for(t=this.offset(),i=n.ownerDocument,e=n.offsetParent||i.documentElement;e&&(e===i.body||e===i.documentElement)&&"static"===Te.css(e,"position");)e=e.parentNode;e&&e!==n&&1===e.nodeType&&(s=Te(e).offset(),s.top+=Te.css(e,"borderTopWidth",!0),s.left+=Te.css(e,"borderLeftWidth",!0))}return{top:t.top-s.top-Te.css(n,"marginTop",!0),left:t.left-s.left-Te.css(n,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===Te.css(e,"position");)e=e.offsetParent;return e||it})}}),Te.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var i="pageYOffset"===t;Te.fn[e]=function(n){return ze(this,function(e,n,s){var o;return we(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===s?o?o[t]:e[n]:void(o?o.scrollTo(i?o.pageXOffset:s,i?s:o.pageYOffset):e[n]=s)},e,n,arguments.length)}}),Te.each(["top","left"],function(e,t){Te.cssHooks[t]=L(ve.pixelPosition,function(e,i){if(i)return i=$(e,t),ct.test(i)?Te(e).position()[t]+"px":i})}),Te.each({Height:"height",Width:"width"},function(e,t){Te.each({padding:"inner"+e,content:t,"":"outer"+e},function(i,n){Te.fn[n]=function(s,o){var r=arguments.length&&(i||"boolean"!=typeof s),a=i||(s===!0||o===!0?"margin":"border");return ze(this,function(t,i,s){var o;return we(t)?0===n.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===s?Te.css(t,i,a):Te.style(t,i,s,a)},t,r?s:void 0,r)}})}),Te.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){Te.fn[t]=function(e,i){return arguments.length>0?this.on(t,null,e,i):this.trigger(t)}}),Te.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),Te.fn.extend({bind:function(e,t,i){return this.on(e,null,t,i)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,i,n){return this.on(t,e,i,n)},undelegate:function(e,t,i){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",i)}}),Te.proxy=function(e,t){var i,n,s;if("string"==typeof t&&(i=e[t],t=e,e=i),ye(e))return n=le.call(arguments,2),s=function(){return e.apply(t||this,n.concat(le.call(arguments)))},s.guid=e.guid=e.guid||Te.guid++,s},Te.holdReady=function(e){e?Te.readyWait++:Te.ready(!0)},Te.isArray=Array.isArray,Te.parseJSON=JSON.parse,Te.nodeName=o,Te.isFunction=ye,Te.isWindow=we,Te.camelCase=f,Te.type=n,Te.now=Date.now,Te.isNumeric=function(e){var t=Te.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return Te});var Jt=e.jQuery,Kt=e.$;return Te.noConflict=function(t){return e.$===Te&&(e.$=Kt),t&&e.jQuery===Te&&(e.jQuery=Jt),Te},t||(e.jQuery=e.$=Te),Te}),!function(e,t,i,n){function s(t,i){this.settings=null,this.options=e.extend({},s.Defaults,i),this.$element=e(t),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},e.each(["onResize","onThrottledResize"],e.proxy(function(t,i){this._handlers[i]=e.proxy(this[i],this)},this)),e.each(s.Plugins,e.proxy(function(e,t){this._plugins[e.charAt(0).toLowerCase()+e.slice(1)]=new t(this)},this)),e.each(s.Workers,e.proxy(function(t,i){this._pipe.push({filter:i.filter,run:e.proxy(i.run,this)})},this)),this.setup(),this.initialize()}s.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:t,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},s.Width={Default:"default",Inner:"inner",Outer:"outer"},s.Type={Event:"event",State:"state"},s.Plugins={},s.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(e){e.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(e){var t=this.settings.margin||"",i=!this.settings.autoWidth,n=this.settings.rtl,s={width:"auto","margin-left":n?t:"","margin-right":n?"":t};!i&&this.$stage.children().css(s),e.css=s}},{filter:["width","items","settings"],run:function(e){var t=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,i=null,n=this._items.length,s=!this.settings.autoWidth,o=[];for(e.items={merge:!1,width:t};n--;)i=this._mergers[n],i=this.settings.mergeFit&&Math.min(i,this.settings.items)||i,e.items.merge=i>1||e.items.merge,o[n]=s?t*i:this._items[n].width();this._widths=o}},{filter:["items","settings"],run:function(){var t=[],i=this._items,n=this.settings,s=Math.max(2*n.items,4),o=2*Math.ceil(i.length/2),r=n.loop&&i.length?n.rewind?s:Math.max(s,o):0,a="",l="";for(r/=2;r>0;)t.push(this.normalize(t.length/2,!0)),a+=i[t[t.length-1]][0].outerHTML,t.push(this.normalize(i.length-1-(t.length-1)/2,!0)),l=i[t[t.length-1]][0].outerHTML+l,r-=1;this._clones=t,e(a).addClass("cloned").appendTo(this.$stage),e(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var e=this.settings.rtl?1:-1,t=this._clones.length+this._items.length,i=-1,n=0,s=0,o=[];++i<t;)n=o[i-1]||0,s=this._widths[this.relative(i)]+this.settings.margin,o.push(n+s*e);this._coordinates=o}},{filter:["width","items","settings"],run:function(){var e=this.settings.stagePadding,t=this._coordinates,i={width:Math.ceil(Math.abs(t[t.length-1]))+2*e,"padding-left":e||"","padding-right":e||""};this.$stage.css(i)}},{filter:["width","items","settings"],run:function(e){var t=this._coordinates.length,i=!this.settings.autoWidth,n=this.$stage.children();if(i&&e.items.merge)for(;t--;)e.css.width=this._widths[this.relative(t)],n.eq(t).css(e.css);else i&&(e.css.width=e.items.width,n.css(e.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(e){e.current=e.current?this.$stage.children().index(e.current):0,e.current=Math.max(this.minimum(),Math.min(this.maximum(),e.current)),this.reset(e.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var e,t,i,n,s=this.settings.rtl?1:-1,o=2*this.settings.stagePadding,r=this.coordinates(this.current())+o,a=r+this.width()*s,l=[];for(i=0,n=this._coordinates.length;i<n;i++)e=this._coordinates[i-1]||0,t=Math.abs(this._coordinates[i])+o*s,(this.op(e,"<=",r)&&this.op(e,">",a)||this.op(t,"<",r)&&this.op(t,">",a))&&l.push(i);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],s.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=e("<"+this.settings.stageElement+">",{"class":this.settings.stageClass}).wrap(e("<div/>",{"class":this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},s.prototype.initializeItems=function(){var t=this.$element.find(".owl-item");return t.length?(this._items=t.get().map(function(t){return e(t)}),this._mergers=this._items.map(function(){return 1}),void this.refresh()):(this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),void 0)},s.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var e,t,i;e=this.$element.find("img"),t=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:n,i=this.$element.children(t).width(),e.length&&i<=0&&this.preloadAutoWidthImages(e)}this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},s.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},s.prototype.setup=function(){var t=this.viewport(),i=this.options.responsive,n=-1,s=null;i?(e.each(i,function(e){e<=t&&e>n&&(n=Number(e))}),s=e.extend({},this.options,i[n]),"function"==typeof s.stagePadding&&(s.stagePadding=s.stagePadding()),delete s.responsive,s.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+n))):s=e.extend({},this.options),this.trigger("change",{property:{name:"settings",value:s}}),this._breakpoint=n,this.settings=s,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},s.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},s.prototype.prepare=function(t){var i=this.trigger("prepare",{content:t});return i.data||(i.data=e("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(t)),this.trigger("prepared",{content:i.data}),i.data},s.prototype.update=function(){for(var t=0,i=this._pipe.length,n=e.proxy(function(e){return this[e]},this._invalidated),s={};t<i;)(this._invalidated.all||e.grep(this._pipe[t].filter,n).length>0)&&this._pipe[t].run(s),t++;this._invalidated={},!this.is("valid")&&this.enter("valid")},s.prototype.width=function(e){switch(e=e||s.Width.Default){case s.Width.Inner:case s.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},s.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},s.prototype.onThrottledResize=function(){t.clearTimeout(this.resizeTimer),this.resizeTimer=t.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},s.prototype.onResize=function(){return!!this._items.length&&this._width!==this.$element.width()&&!!this.isVisible()&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),
this.refresh(),this.leave("resizing"),void this.trigger("resized")))},s.prototype.registerEventHandlers=function(){e.support.transition&&this.$stage.on(e.support.transition.end+".owl.core",e.proxy(this.onTransitionEnd,this)),!1!==this.settings.responsive&&this.on(t,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",e.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",e.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",e.proxy(this.onDragEnd,this)))},s.prototype.onDragStart=function(t){var n=null;3!==t.which&&(e.support.transform?(n=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),n={x:n[16===n.length?12:4],y:n[16===n.length?13:5]}):(n=this.$stage.position(),n={x:this.settings.rtl?n.left+this.$stage.width()-this.width()+this.settings.margin:n.left,y:n.top}),this.is("animating")&&(e.support.transform?this.animate(n.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===t.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=e(t.target),this._drag.stage.start=n,this._drag.stage.current=n,this._drag.pointer=this.pointer(t),e(i).on("mouseup.owl.core touchend.owl.core",e.proxy(this.onDragEnd,this)),e(i).one("mousemove.owl.core touchmove.owl.core",e.proxy(function(t){var n=this.difference(this._drag.pointer,this.pointer(t));e(i).on("mousemove.owl.core touchmove.owl.core",e.proxy(this.onDragMove,this)),Math.abs(n.x)<Math.abs(n.y)&&this.is("valid")||(t.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},s.prototype.onDragMove=function(e){var t=null,i=null,n=null,s=this.difference(this._drag.pointer,this.pointer(e)),o=this.difference(this._drag.stage.start,s);this.is("dragging")&&(e.preventDefault(),this.settings.loop?(t=this.coordinates(this.minimum()),i=this.coordinates(this.maximum()+1)-t,o.x=((o.x-t)%i+i)%i+t):(t=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),i=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),n=this.settings.pullDrag?-1*s.x/5:0,o.x=Math.max(Math.min(o.x,t+n),i+n)),this._drag.stage.current=o,this.animate(o.x))},s.prototype.onDragEnd=function(t){var n=this.difference(this._drag.pointer,this.pointer(t)),s=this._drag.stage.current,o=n.x>0^this.settings.rtl?"left":"right";e(i).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==n.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(s.x,0!==n.x?o:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=o,(Math.abs(n.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},s.prototype.closest=function(t,i){var s=-1,o=30,r=this.width(),a=this.coordinates();return this.settings.freeDrag||e.each(a,e.proxy(function(e,l){return"left"===i&&t>l-o&&t<l+o?s=e:"right"===i&&t>l-r-o&&t<l-r+o?s=e+1:this.op(t,"<",l)&&this.op(t,">",a[e+1]!==n?a[e+1]:l-r)&&(s="left"===i?e+1:e),-1===s},this)),this.settings.loop||(this.op(t,">",a[this.minimum()])?s=t=this.minimum():this.op(t,"<",a[this.maximum()])&&(s=t=this.maximum())),s},s.prototype.animate=function(t){var i=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),i&&(this.enter("animating"),this.trigger("translate")),e.support.transform3d&&e.support.transition?this.$stage.css({transform:"translate3d("+t+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):i?this.$stage.animate({left:t+"px"},this.speed(),this.settings.fallbackEasing,e.proxy(this.onTransitionEnd,this)):this.$stage.css({left:t+"px"})},s.prototype.is=function(e){return this._states.current[e]&&this._states.current[e]>0},s.prototype.current=function(e){if(e===n)return this._current;if(0===this._items.length)return n;if(e=this.normalize(e),this._current!==e){var t=this.trigger("change",{property:{name:"position",value:e}});t.data!==n&&(e=this.normalize(t.data)),this._current=e,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},s.prototype.invalidate=function(t){return"string"===e.type(t)&&(this._invalidated[t]=!0,this.is("valid")&&this.leave("valid")),e.map(this._invalidated,function(e,t){return t})},s.prototype.reset=function(e){(e=this.normalize(e))!==n&&(this._speed=0,this._current=e,this.suppress(["translate","translated"]),this.animate(this.coordinates(e)),this.release(["translate","translated"]))},s.prototype.normalize=function(e,t){var i=this._items.length,s=t?0:this._clones.length;return!this.isNumeric(e)||i<1?e=n:(e<0||e>=i+s)&&(e=((e-s/2)%i+i)%i+s/2),e},s.prototype.relative=function(e){return e-=this._clones.length/2,this.normalize(e,!0)},s.prototype.maximum=function(e){var t,i,n,s=this.settings,o=this._coordinates.length;if(s.loop)o=this._clones.length/2+this._items.length-1;else if(s.autoWidth||s.merge){if(t=this._items.length)for(i=this._items[--t].width(),n=this.$element.width();t--&&!((i+=this._items[t].width()+this.settings.margin)>n););o=t+1}else o=s.center?this._items.length-1:this._items.length-s.items;return e&&(o-=this._clones.length/2),Math.max(o,0)},s.prototype.minimum=function(e){return e?0:this._clones.length/2},s.prototype.items=function(e){return e===n?this._items.slice():(e=this.normalize(e,!0),this._items[e])},s.prototype.mergers=function(e){return e===n?this._mergers.slice():(e=this.normalize(e,!0),this._mergers[e])},s.prototype.clones=function(t){var i=this._clones.length/2,s=i+this._items.length,o=function(e){return e%2==0?s+e/2:i-(e+1)/2};return t===n?e.map(this._clones,function(e,t){return o(t)}):e.map(this._clones,function(e,i){return e===t?o(i):null})},s.prototype.speed=function(e){return e!==n&&(this._speed=e),this._speed},s.prototype.coordinates=function(t){var i,s=1,o=t-1;return t===n?e.map(this._coordinates,e.proxy(function(e,t){return this.coordinates(t)},this)):(this.settings.center?(this.settings.rtl&&(s=-1,o=t+1),i=this._coordinates[t],i+=(this.width()-i+(this._coordinates[o]||0))/2*s):i=this._coordinates[o]||0,i=Math.ceil(i))},s.prototype.duration=function(e,t,i){return 0===i?0:Math.min(Math.max(Math.abs(t-e),1),6)*Math.abs(i||this.settings.smartSpeed)},s.prototype.to=function(e,t){var i=this.current(),n=null,s=e-this.relative(i),o=(s>0)-(s<0),r=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(s)>r/2&&(s+=-1*o*r),e=i+s,(n=((e-a)%r+r)%r+a)!==e&&n-s<=l&&n-s>0&&(i=n-s,e=n,this.reset(i))):this.settings.rewind?(l+=1,e=(e%l+l)%l):e=Math.max(a,Math.min(l,e)),this.speed(this.duration(i,e,t)),this.current(e),this.isVisible()&&this.update()},s.prototype.next=function(e){e=e||!1,this.to(this.relative(this.current())+1,e)},s.prototype.prev=function(e){e=e||!1,this.to(this.relative(this.current())-1,e)},s.prototype.onTransitionEnd=function(e){return(e===n||(e.stopPropagation(),(e.target||e.srcElement||e.originalTarget)===this.$stage.get(0)))&&(this.leave("animating"),void this.trigger("translated"))},s.prototype.viewport=function(){var n;return this.options.responsiveBaseElement!==t?n=e(this.options.responsiveBaseElement).width():t.innerWidth?n=t.innerWidth:i.documentElement&&i.documentElement.clientWidth?n=i.documentElement.clientWidth:console.warn("Can not detect viewport width."),n},s.prototype.replace=function(t){this.$stage.empty(),this._items=[],t&&(t=t instanceof jQuery?t:e(t)),this.settings.nestedItemSelector&&(t=t.find("."+this.settings.nestedItemSelector)),t.filter(function(){return 1===this.nodeType}).each(e.proxy(function(e,t){t=this.prepare(t),this.$stage.append(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},s.prototype.add=function(t,i){var s=this.relative(this._current);i=i===n?this._items.length:this.normalize(i,!0),t=t instanceof jQuery?t:e(t),this.trigger("add",{content:t,position:i}),t=this.prepare(t),0===this._items.length||i===this._items.length?(0===this._items.length&&this.$stage.append(t),0!==this._items.length&&this._items[i-1].after(t),this._items.push(t),this._mergers.push(1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[i].before(t),this._items.splice(i,0,t),this._mergers.splice(i,0,1*t.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[s]&&this.reset(this._items[s].index()),this.invalidate("items"),this.trigger("added",{content:t,position:i})},s.prototype.remove=function(e){(e=this.normalize(e,!0))!==n&&(this.trigger("remove",{content:this._items[e],position:e}),this._items[e].remove(),this._items.splice(e,1),this._mergers.splice(e,1),this.invalidate("items"),this.trigger("removed",{content:null,position:e}))},s.prototype.preloadAutoWidthImages=function(t){t.each(e.proxy(function(t,i){this.enter("pre-loading"),i=e(i),e(new Image).one("load",e.proxy(function(e){i.attr("src",e.target.src),i.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",i.attr("src")||i.attr("data-src")||i.attr("data-src-retina"))},this))},s.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),e(i).off(".owl.core"),!1!==this.settings.responsive&&(t.clearTimeout(this.resizeTimer),this.off(t,"resize",this._handlers.onThrottledResize));for(var n in this._plugins)this._plugins[n].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},s.prototype.op=function(e,t,i){var n=this.settings.rtl;switch(t){case"<":return n?e>i:e<i;case">":return n?e<i:e>i;case">=":return n?e<=i:e>=i;case"<=":return n?e>=i:e<=i}},s.prototype.on=function(e,t,i,n){e.addEventListener?e.addEventListener(t,i,n):e.attachEvent&&e.attachEvent("on"+t,i)},s.prototype.off=function(e,t,i,n){e.removeEventListener?e.removeEventListener(t,i,n):e.detachEvent&&e.detachEvent("on"+t,i)},s.prototype.trigger=function(t,i,n,o,r){var a={item:{count:this._items.length,index:this.current()}},l=e.camelCase(e.grep(["on",t,n],function(e){return e}).join("-").toLowerCase()),u=e.Event([t,"owl",n||"carousel"].join(".").toLowerCase(),e.extend({relatedTarget:this},a,i));return this._supress[t]||(e.each(this._plugins,function(e,t){t.onTrigger&&t.onTrigger(u)}),this.register({type:s.Type.Event,name:t}),this.$element.trigger(u),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,u)),u},s.prototype.enter=function(t){e.each([t].concat(this._states.tags[t]||[]),e.proxy(function(e,t){this._states.current[t]===n&&(this._states.current[t]=0),this._states.current[t]++},this))},s.prototype.leave=function(t){e.each([t].concat(this._states.tags[t]||[]),e.proxy(function(e,t){this._states.current[t]--},this))},s.prototype.register=function(t){if(t.type===s.Type.Event){if(e.event.special[t.name]||(e.event.special[t.name]={}),!e.event.special[t.name].owl){var i=e.event.special[t.name]._default;e.event.special[t.name]._default=function(e){return!i||!i.apply||e.namespace&&-1!==e.namespace.indexOf("owl")?e.namespace&&e.namespace.indexOf("owl")>-1:i.apply(this,arguments)},e.event.special[t.name].owl=!0}}else t.type===s.Type.State&&(this._states.tags[t.name]?this._states.tags[t.name]=this._states.tags[t.name].concat(t.tags):this._states.tags[t.name]=t.tags,this._states.tags[t.name]=e.grep(this._states.tags[t.name],e.proxy(function(i,n){return e.inArray(i,this._states.tags[t.name])===n},this)))},s.prototype.suppress=function(t){e.each(t,e.proxy(function(e,t){this._supress[t]=!0},this))},s.prototype.release=function(t){e.each(t,e.proxy(function(e,t){delete this._supress[t]},this))},s.prototype.pointer=function(e){var i={x:null,y:null};return e=e.originalEvent||e||t.event,e=e.touches&&e.touches.length?e.touches[0]:e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e,e.pageX?(i.x=e.pageX,i.y=e.pageY):(i.x=e.clientX,i.y=e.clientY),i},s.prototype.isNumeric=function(e){return!isNaN(parseFloat(e))},s.prototype.difference=function(e,t){return{x:e.x-t.x,y:e.y-t.y}},e.fn.owlCarousel=function(t){var i=Array.prototype.slice.call(arguments,1);return this.each(function(){var n=e(this),o=n.data("owl.carousel");o||(o=new s(this,"object"==typeof t&&t),n.data("owl.carousel",o),e.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(t,i){o.register({type:s.Type.Event,name:i}),o.$element.on(i+".owl.carousel.core",e.proxy(function(e){e.namespace&&e.relatedTarget!==this&&(this.suppress([i]),o[i].apply(this,[].slice.call(arguments,1)),this.release([i]))},o))})),"string"==typeof t&&"_"!==t.charAt(0)&&o[t].apply(o,i)})},e.fn.owlCarousel.Constructor=s}(window.Zepto||window.jQuery,window,document),function(e,t,i,n){var s=function(t){this._core=t,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=e.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers)};s.Defaults={autoRefresh:!0,autoRefreshInterval:500},s.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=t.setInterval(e.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},s.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},s.prototype.destroy=function(){var e,i;t.clearInterval(this._interval);for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},e.fn.owlCarousel.Constructor.Plugins.AutoRefresh=s}(window.Zepto||window.jQuery,window,document),function(e,t,i,n){var s=function(t){this._core=t,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":e.proxy(function(t){if(t.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(t.property&&"position"==t.property.name||"initialized"==t.type)){var i=this._core.settings,s=i.center&&Math.ceil(i.items/2)||i.items,o=i.center&&-1*s||0,r=(t.property&&t.property.value!==n?t.property.value:this._core.current())+o,a=this._core.clones().length,l=e.proxy(function(e,t){this.load(t)},this);for(i.lazyLoadEager>0&&(s+=i.lazyLoadEager,i.loop&&(r-=i.lazyLoadEager,s++));o++<s;)this.load(a/2+this._core.relative(r)),a&&e.each(this._core.clones(this._core.relative(r)),l),r++}},this)},this._core.options=e.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers)};s.Defaults={lazyLoad:!1,lazyLoadEager:0},s.prototype.load=function(i){var n=this._core.$stage.children().eq(i),s=n&&n.find(".owl-lazy");!s||e.inArray(n.get(0),this._loaded)>-1||(s.each(e.proxy(function(i,n){var s,o=e(n),r=t.devicePixelRatio>1&&o.attr("data-src-retina")||o.attr("data-src")||o.attr("data-srcset");this._core.trigger("load",{element:o,url:r},"lazy"),o.is("img")?o.one("load.owl.lazy",e.proxy(function(){o.css("opacity",1),this._core.trigger("loaded",{element:o,url:r},"lazy")},this)).attr("src",r):o.is("source")?o.one("load.owl.lazy",e.proxy(function(){this._core.trigger("loaded",{element:o,url:r},"lazy")},this)).attr("srcset",r):(s=new Image,s.onload=e.proxy(function(){o.css({"background-image":'url("'+r+'")',opacity:"1"}),this._core.trigger("loaded",{element:o,url:r},"lazy")},this),s.src=r)},this)),this._loaded.push(n.get(0)))},s.prototype.destroy=function(){var e,t;for(e in this.handlers)this._core.$element.off(e,this.handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.Lazy=s}(window.Zepto||window.jQuery,window,document),function(e,t,i,n){var s=function(i){this._core=i,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoHeight&&"position"===e.property.name&&this.update()},this),"loaded.owl.lazy":e.proxy(function(e){e.namespace&&this._core.settings.autoHeight&&e.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=e.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var n=this;e(t).on("load",function(){n._core.settings.autoHeight&&n.update()}),e(t).resize(function(){n._core.settings.autoHeight&&(null!=n._intervalId&&clearTimeout(n._intervalId),n._intervalId=setTimeout(function(){n.update()},250))})};s.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},s.prototype.update=function(){var t=this._core._current,i=t+this._core.settings.items,n=this._core.settings.lazyLoad,s=this._core.$stage.children().toArray().slice(t,i),o=[],r=0;e.each(s,function(t,i){o.push(e(i).height())}),r=Math.max.apply(null,o),r<=1&&n&&this._previousHeight&&(r=this._previousHeight),this._previousHeight=r,this._core.$stage.parent().height(r).addClass(this._core.settings.autoHeightClass)},s.prototype.destroy=function(){var e,t;for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.AutoHeight=s}(window.Zepto||window.jQuery,window,document),function(e,t,i,n){var s=function(t){this._core=t,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":e.proxy(function(e){e.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.video&&this.isInFullScreen()&&e.preventDefault()},this),"refreshed.owl.carousel":e.proxy(function(e){e.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":e.proxy(function(e){e.namespace&&"position"===e.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":e.proxy(function(t){if(t.namespace){var i=e(t.content).find(".owl-video");i.length&&(i.css("display","none"),this.fetch(i,e(t.content)))}},this)},this._core.options=e.extend({},s.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",e.proxy(function(e){this.play(e)},this))};s.Defaults={video:!1,videoHeight:!1,videoWidth:!1},s.prototype.fetch=function(e,t){var i=function(){return e.attr("data-vimeo-id")?"vimeo":e.attr("data-vzaar-id")?"vzaar":"youtube"}(),n=e.attr("data-vimeo-id")||e.attr("data-youtube-id")||e.attr("data-vzaar-id"),s=e.attr("data-width")||this._core.settings.videoWidth,o=e.attr("data-height")||this._core.settings.videoHeight,r=e.attr("href");if(!r)throw new Error("Missing video URL.");if(n=r.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),n[3].indexOf("youtu")>-1)i="youtube";else if(n[3].indexOf("vimeo")>-1)i="vimeo";else{if(!(n[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");i="vzaar"}n=n[6],this._videos[r]={type:i,id:n,width:s,height:o},t.attr("data-video",r),this.thumbnail(e,this._videos[r])},s.prototype.thumbnail=function(t,i){var n,s,o,r=i.width&&i.height?"width:"+i.width+"px;height:"+i.height+"px;":"",a=t.find("img"),l="src",u="",c=this._core.settings,d=function(i){s='<div class="owl-video-play-icon"></div>',n=c.lazyLoad?e("<div/>",{"class":"owl-video-tn "+u,srcType:i}):e("<div/>",{"class":"owl-video-tn",style:"opacity:1;background-image:url("+i+")"}),t.after(n),t.after(s)};return t.wrap(e("<div/>",{"class":"owl-video-wrapper",style:r})),this._core.settings.lazyLoad&&(l="data-src",u="owl-lazy"),a.length?(d(a.attr(l)),a.remove(),!1):void("youtube"===i.type?(o="//img.youtube.com/vi/"+i.id+"/hqdefault.jpg",d(o)):"vimeo"===i.type?e.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(e){o=e[0].thumbnail_large,d(o)}}):"vzaar"===i.type&&e.ajax({type:"GET",url:"//vzaar.com/api/videos/"+i.id+".json",jsonp:"callback",dataType:"jsonp",success:function(e){o=e.framegrab_url,d(o)}}))},s.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},s.prototype.play=function(t){var i,n=e(t.target),s=n.closest("."+this._core.settings.itemClass),o=this._videos[s.attr("data-video")],r=o.width||"100%",a=o.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),s=this._core.items(this._core.relative(s.index())),this._core.reset(s.index()),i=e('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'),i.attr("height",a),i.attr("width",r),"youtube"===o.type?i.attr("src","//www.youtube.com/embed/"+o.id+"?autoplay=1&rel=0&v="+o.id):"vimeo"===o.type?i.attr("src","//player.vimeo.com/video/"+o.id+"?autoplay=1"):"vzaar"===o.type&&i.attr("src","//view.vzaar.com/"+o.id+"/player?autoplay=true"),e(i).wrap('<div class="owl-video-frame" />').insertAfter(s.find(".owl-video")),this._playing=s.addClass("owl-video-playing"))},s.prototype.isInFullScreen=function(){var t=i.fullscreenElement||i.mozFullScreenElement||i.webkitFullscreenElement;return t&&e(t).parent().hasClass("owl-video-frame")},s.prototype.destroy=function(){var e,t;this._core.$element.off("click.owl.video");for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.Video=s}(window.Zepto||window.jQuery,window,document),function(e,t,i,n){var s=function(t){this.core=t,this.core.options=e.extend({},s.Defaults,this.core.options),this.swapping=!0,this.previous=n,this.next=n,this.handlers={"change.owl.carousel":e.proxy(function(e){e.namespace&&"position"==e.property.name&&(this.previous=this.core.current(),this.next=e.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":e.proxy(function(e){e.namespace&&(this.swapping="translated"==e.type)},this),"translate.owl.carousel":e.proxy(function(e){e.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};s.Defaults={animateOut:!1,animateIn:!1},s.prototype.swap=function(){if(1===this.core.settings.items&&e.support.animation&&e.support.transition){this.core.speed(0);var t,i=e.proxy(this.clear,this),n=this.core.$stage.children().eq(this.previous),s=this.core.$stage.children().eq(this.next),o=this.core.settings.animateIn,r=this.core.settings.animateOut;this.core.current()!==this.previous&&(r&&(t=this.core.coordinates(this.previous)-this.core.coordinates(this.next),n.one(e.support.animation.end,i).css({left:t+"px"}).addClass("animated owl-animated-out").addClass(r)),o&&s.one(e.support.animation.end,i).addClass("animated owl-animated-in").addClass(o))}},s.prototype.clear=function(t){e(t.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},s.prototype.destroy=function(){var e,t;for(e in this.handlers)this.core.$element.off(e,this.handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.Animate=s}(window.Zepto||window.jQuery,window,document),function(e,t,i,n){var s=function(t){this._core=t,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":e.proxy(function(e){e.namespace&&"settings"===e.property.name?this._core.settings.autoplay?this.play():this.stop():e.namespace&&"position"===e.property.name&&this._paused&&(this._time=0)},this),"initialized.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":e.proxy(function(e,t,i){e.namespace&&this.play(t,i)},this),"stop.owl.autoplay":e.proxy(function(e){e.namespace&&this.stop()},this),"mouseover.owl.autoplay":e.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":e.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":e.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":e.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=e.extend({},s.Defaults,this._core.options)};s.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},s.prototype._next=function(n){this._call=t.setTimeout(e.proxy(this._next,this,n),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||i.hidden||this._core.next(n||this._core.settings.autoplaySpeed)},s.prototype.read=function(){return(new Date).getTime()-this._time},s.prototype.play=function(i,n){var s;this._core.is("rotating")||this._core.enter("rotating"),i=i||this._core.settings.autoplayTimeout,s=Math.min(this._time%(this._timeout||i),i),this._paused?(this._time=this.read(),this._paused=!1):t.clearTimeout(this._call),this._time+=this.read()%i-s,this._timeout=i,this._call=t.setTimeout(e.proxy(this._next,this,n),i-s)},s.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,t.clearTimeout(this._call),this._core.leave("rotating"))},s.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,t.clearTimeout(this._call))},s.prototype.destroy=function(){var e,t;this.stop();for(e in this._handlers)this._core.$element.off(e,this._handlers[e]);for(t in Object.getOwnPropertyNames(this))"function"!=typeof this[t]&&(this[t]=null)},e.fn.owlCarousel.Constructor.Plugins.autoplay=s}(window.Zepto||window.jQuery,window,document),function(e,t,i,n){"use strict";var s=function(t){this._core=t,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":e.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+e(t.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.splice(e.position,0,this._templates.pop())},this),"remove.owl.carousel":e.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.splice(e.position,1)},this),"changed.owl.carousel":e.proxy(function(e){e.namespace&&"position"==e.property.name&&this.draw()},this),"initialized.owl.carousel":e.proxy(function(e){e.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":e.proxy(function(e){e.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=e.extend({},s.Defaults,this._core.options),this.$element.on(this._handlers)};s.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},s.prototype.initialize=function(){var t,i=this._core.settings;this._controls.$relative=(i.navContainer?e(i.navContainer):e("<div>").addClass(i.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=e("<"+i.navElement+">").addClass(i.navClass[0]).html(i.navText[0]).prependTo(this._controls.$relative).on("click",e.proxy(function(e){this.prev(i.navSpeed)},this)),this._controls.$next=e("<"+i.navElement+">").addClass(i.navClass[1]).html(i.navText[1]).appendTo(this._controls.$relative).on("click",e.proxy(function(e){this.next(i.navSpeed)},this)),i.dotsData||(this._templates=[e('<button role="button">').addClass(i.dotClass).append(e("<span>")).prop("outerHTML")]),this._controls.$absolute=(i.dotsContainer?e(i.dotsContainer):e("<div>").addClass(i.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",e.proxy(function(t){var n=e(t.target).parent().is(this._controls.$absolute)?e(t.target).index():e(t.target).parent().index();t.preventDefault(),this.to(n,i.dotsSpeed)},this));for(t in this._overrides)this._core[t]=e.proxy(this[t],this)},s.prototype.destroy=function(){var e,t,i,n,s;s=this._core.settings;for(e in this._handlers)this.$element.off(e,this._handlers[e]);for(t in this._controls)"$relative"===t&&s.navContainer?this._controls[t].html(""):this._controls[t].remove();for(n in this.overides)this._core[n]=this._overrides[n];for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},s.prototype.update=function(){var e,t,i,n=this._core.clones().length/2,s=n+this._core.items().length,o=this._core.maximum(!0),r=this._core.settings,a=r.center||r.autoWidth||r.dotsData?1:r.dotsEach||r.items;if("page"!==r.slideBy&&(r.slideBy=Math.min(r.slideBy,r.items)),r.dots||"page"==r.slideBy)for(this._pages=[],e=n,t=0,i=0;e<s;e++){if(t>=a||0===t){if(this._pages.push({start:Math.min(o,e-n),end:e-n+a-1}),Math.min(o,e-n)===o)break;t=0,++i}t+=this._core.mergers(this._core.relative(e))}},s.prototype.draw=function(){var t,i=this._core.settings,n=this._core.items().length<=i.items,s=this._core.relative(this._core.current()),o=i.loop||i.rewind;this._controls.$relative.toggleClass("disabled",!i.nav||n),i.nav&&(this._controls.$previous.toggleClass("disabled",!o&&s<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!o&&s>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!i.dots||n),i.dots&&(t=this._pages.length-this._controls.$absolute.children().length,i.dotsData&&0!==t?this._controls.$absolute.html(this._templates.join("")):t>0?this._controls.$absolute.append(new Array(t+1).join(this._templates[0])):t<0&&this._controls.$absolute.children().slice(t).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(e.inArray(this.current(),this._pages)).addClass("active"))},s.prototype.onTrigger=function(t){var i=this._core.settings;
t.page={index:e.inArray(this.current(),this._pages),count:this._pages.length,size:i&&(i.center||i.autoWidth||i.dotsData?1:i.dotsEach||i.items)}},s.prototype.current=function(){var t=this._core.relative(this._core.current());return e.grep(this._pages,e.proxy(function(e,i){return e.start<=t&&e.end>=t},this)).pop()},s.prototype.getPosition=function(t){var i,n,s=this._core.settings;return"page"==s.slideBy?(i=e.inArray(this.current(),this._pages),n=this._pages.length,t?++i:--i,i=this._pages[(i%n+n)%n].start):(i=this._core.relative(this._core.current()),n=this._core.items().length,t?i+=s.slideBy:i-=s.slideBy),i},s.prototype.next=function(t){e.proxy(this._overrides.to,this._core)(this.getPosition(!0),t)},s.prototype.prev=function(t){e.proxy(this._overrides.to,this._core)(this.getPosition(!1),t)},s.prototype.to=function(t,i,n){var s;!n&&this._pages.length?(s=this._pages.length,e.proxy(this._overrides.to,this._core)(this._pages[(t%s+s)%s].start,i)):e.proxy(this._overrides.to,this._core)(t,i)},e.fn.owlCarousel.Constructor.Plugins.Navigation=s}(window.Zepto||window.jQuery,window,document),function(e,t,i,n){"use strict";var s=function(i){this._core=i,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":e.proxy(function(i){i.namespace&&"URLHash"===this._core.settings.startPosition&&e(t).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":e.proxy(function(t){if(t.namespace){var i=e(t.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!i)return;this._hashes[i]=t.content}},this),"changed.owl.carousel":e.proxy(function(i){if(i.namespace&&"position"===i.property.name){var n=this._core.items(this._core.relative(this._core.current())),s=e.map(this._hashes,function(e,t){return e===n?t:null}).join();if(!s||t.location.hash.slice(1)===s)return;t.location.hash=s}},this)},this._core.options=e.extend({},s.Defaults,this._core.options),this.$element.on(this._handlers),e(t).on("hashchange.owl.navigation",e.proxy(function(e){var i=t.location.hash.substring(1),s=this._core.$stage.children(),o=this._hashes[i]&&s.index(this._hashes[i]);o!==n&&o!==this._core.current()&&this._core.to(this._core.relative(o),!1,!0)},this))};s.Defaults={URLhashListener:!1},s.prototype.destroy=function(){var i,n;e(t).off("hashchange.owl.navigation");for(i in this._handlers)this._core.$element.off(i,this._handlers[i]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},e.fn.owlCarousel.Constructor.Plugins.Hash=s}(window.Zepto||window.jQuery,window,document),function(e,t,i,n){function s(t,i){var s=!1,o=t.charAt(0).toUpperCase()+t.slice(1);return e.each((t+" "+a.join(o+" ")+o).split(" "),function(e,t){if(r[t]!==n)return s=!i||t,!1}),s}function o(e){return s(e,!0)}var r=e("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},u={csstransforms:function(){return!!s("transform")},csstransforms3d:function(){return!!s("perspective")},csstransitions:function(){return!!s("transition")},cssanimations:function(){return!!s("animation")}};u.csstransitions()&&(e.support.transition=new String(o("transition")),e.support.transition.end=l.transition.end[e.support.transition]),u.cssanimations()&&(e.support.animation=new String(o("animation")),e.support.animation.end=l.animation.end[e.support.animation]),u.csstransforms()&&(e.support.transform=new String(o("transform")),e.support.transform3d=u.csstransforms3d())}(window.Zepto||window.jQuery,window,document);var mejs=mejs||{};mejs.version="2.7.0",mejs.meIndex=0,mejs.plugins={silverlight:[{version:[3,0],types:["video/mp4","video/m4v","video/mov","video/wmv","audio/wma","audio/m4a","audio/mp3","audio/wav","audio/mpeg"]}],flash:[{version:[9,0,124],types:["video/mp4","video/m4v","video/mov","video/flv","video/x-flv","audio/flv","audio/x-flv","audio/mp3","audio/m4a","audio/mpeg"]}],youtube:[{version:null,types:["video/youtube"]}],vimeo:[{version:null,types:["video/vimeo"]}]},mejs.Utility={encodeUrl:function(e){return encodeURIComponent(e)},escapeHTML:function(e){return e.toString().split("&").join("&amp;").split("<").join("&lt;").split('"').join("&quot;")},absolutizeUrl:function(e){var t=document.createElement("div");return t.innerHTML='<a href="'+this.escapeHTML(e)+'">x</a>',t.firstChild.href},getScriptPath:function(e){for(var t,i,n=0,s="",o="",r=document.getElementsByTagName("script"),a=r.length,l=e.length;n<a;n++){for(i=r[n].src,t=0;t<l;t++)if(o=e[t],i.indexOf(o)>-1){s=i.substring(0,i.indexOf(o));break}if(""!==s)break}return s},secondsToTimeCode:function(e,t,i,n){"undefined"==typeof i?i=!1:"undefined"==typeof n&&(n=25);var s=Math.floor(e/3600)%24,o=Math.floor(e/60)%60,r=Math.floor(e%60);return e=Math.floor((e%1*n).toFixed(3)),(t||s>0?(s<10?"0"+s:s)+":":"")+(o<10?"0"+o:o)+":"+(r<10?"0"+r:r)+(i?":"+(e<10?"0"+e:e):"")},timeCodeToSeconds:function(e,t,i,n){"undefined"==typeof i?i=!1:"undefined"==typeof n&&(n=25),e=e.split(":"),t=parseInt(e[0],10);var s=parseInt(e[1],10),o=parseInt(e[2],10),r=0,a=0;return i&&(r=parseInt(e[3])/n),a=3600*t+60*s+o+r},removeSwf:function(e){var t=document.getElementById(e);t&&"OBJECT"==t.nodeName&&(mejs.MediaFeatures.isIE?(t.style.display="none",function(){4==t.readyState?mejs.Utility.removeObjectInIE(e):setTimeout(arguments.callee,10)}()):t.parentNode.removeChild(t))},removeObjectInIE:function(e){if(e=document.getElementById(e)){for(var t in e)"function"==typeof e[t]&&(e[t]=null);e.parentNode.removeChild(e)}}},mejs.PluginDetector={hasPluginVersion:function(e,t){var i=this.plugins[e];return t[1]=t[1]||0,t[2]=t[2]||0,i[0]>t[0]||i[0]==t[0]&&i[1]>t[1]||i[0]==t[0]&&i[1]==t[1]&&i[2]>=t[2]},nav:window.navigator,ua:window.navigator.userAgent.toLowerCase(),plugins:[],addPlugin:function(e,t,i,n,s){this.plugins[e]=this.detectPlugin(t,i,n,s)},detectPlugin:function(e,t,i,n){var s,o=[0,0,0];if("undefined"!=typeof this.nav.plugins&&"object"==typeof this.nav.plugins[e]){if((i=this.nav.plugins[e].description)&&("undefined"==typeof this.nav.mimeTypes||!this.nav.mimeTypes[t]||this.nav.mimeTypes[t].enabledPlugin))for(o=i.replace(e,"").replace(/^\s+/,"").replace(/\sr/gi,".").split("."),e=0;e<o.length;e++)o[e]=parseInt(o[e].match(/\d+/),10)}else if("undefined"!=typeof window.ActiveXObject)try{(s=new ActiveXObject(i))&&(o=n(s))}catch(r){}return o}},mejs.PluginDetector.addPlugin("flash","Shockwave Flash","application/x-shockwave-flash","ShockwaveFlash.ShockwaveFlash",function(e){var t=[];return(e=e.GetVariable("$version"))&&(e=e.split(" ")[1].split(","),t=[parseInt(e[0],10),parseInt(e[1],10),parseInt(e[2],10)]),t}),mejs.PluginDetector.addPlugin("silverlight","Silverlight Plug-In","application/x-silverlight-2","AgControl.AgControl",function(e){var t=[0,0,0,0],i=function(e,t,i,n){for(;e.isVersionSupported(t[0]+"."+t[1]+"."+t[2]+"."+t[3]);)t[i]+=n;t[i]-=n};return i(e,t,0,1),i(e,t,1,1),i(e,t,2,1e4),i(e,t,2,1e3),i(e,t,2,100),i(e,t,2,10),i(e,t,2,1),i(e,t,3,1),t}),mejs.MediaFeatures={init:function(){var e,t=this,i=document,n=mejs.PluginDetector.nav,s=mejs.PluginDetector.ua.toLowerCase(),o=["source","track","audio","video"];t.isiPad=null!==s.match(/ipad/i),t.isiPhone=null!==s.match(/iphone/i),t.isiOS=t.isiPhone||t.isiPad,t.isAndroid=null!==s.match(/android/i),t.isBustedAndroid=null!==s.match(/android 2\.[12]/),t.isIE=n.appName.toLowerCase().indexOf("microsoft")!=-1,t.isChrome=null!==s.match(/chrome/gi),t.isFirefox=null!==s.match(/firefox/gi),t.isWebkit=null!==s.match(/webkit/gi),t.isGecko=null!==s.match(/gecko/gi)&&!t.isWebkit,t.isOpera=null!==s.match(/opera/gi),t.hasTouch="ontouchstart"in window;for(n=0;n<o.length;n++)e=document.createElement(o[n]);t.supportsMediaTag="undefined"!=typeof e.canPlayType||t.isBustedAndroid,t.hasSemiNativeFullScreen="undefined"!=typeof e.webkitEnterFullscreen,t.hasWebkitNativeFullScreen="undefined"!=typeof e.webkitRequestFullScreen,t.hasMozNativeFullScreen="undefined"!=typeof e.mozRequestFullScreen,t.hasTrueNativeFullScreen=t.hasWebkitNativeFullScreen||t.hasMozNativeFullScreen,t.nativeFullScreenEnabled=t.hasTrueNativeFullScreen,t.hasMozNativeFullScreen&&(t.nativeFullScreenEnabled=e.mozFullScreenEnabled),this.isChrome&&(t.hasSemiNativeFullScreen=!1),t.hasTrueNativeFullScreen&&(t.fullScreenEventName=t.hasWebkitNativeFullScreen?"webkitfullscreenchange":"mozfullscreenchange",t.isFullScreen=function(){return e.mozRequestFullScreen?i.mozFullScreen:e.webkitRequestFullScreen?i.webkitIsFullScreen:void 0},t.requestFullScreen=function(e){t.hasWebkitNativeFullScreen?e.webkitRequestFullScreen():t.hasMozNativeFullScreen&&e.mozRequestFullScreen()},t.cancelFullScreen=function(){t.hasWebkitNativeFullScreen?document.webkitCancelFullScreen():t.hasMozNativeFullScreen&&document.mozCancelFullScreen()}),t.hasSemiNativeFullScreen&&s.match(/mac os x 10_5/i)&&(t.hasNativeFullScreen=!1,t.hasSemiNativeFullScreen=!1)}},mejs.MediaFeatures.init(),mejs.HtmlMediaElement={pluginType:"native",isFullScreen:!1,setCurrentTime:function(e){this.currentTime=e},setMuted:function(e){this.muted=e},setVolume:function(e){this.volume=e},stop:function(){this.pause()},setSrc:function(e){for(var t=this.getElementsByTagName("source");t.length>0;)this.removeChild(t[0]);if("string"==typeof e)this.src=e;else{var i;for(t=0;t<e.length;t++)i=e[t],this.canPlayType(i.type)&&(this.src=i.src)}},setVideoSize:function(e,t){this.width=e,this.height=t}},mejs.PluginMediaElement=function(e,t,i){this.id=e,this.pluginType=t,this.src=i,this.events={}},mejs.PluginMediaElement.prototype={pluginElement:null,pluginType:"",isFullScreen:!1,playbackRate:-1,defaultPlaybackRate:-1,seekable:[],played:[],paused:!0,ended:!1,seeking:!1,duration:0,error:null,tagName:"",muted:!1,volume:1,currentTime:0,play:function(){null!=this.pluginApi&&("youtube"==this.pluginType?this.pluginApi.playVideo():this.pluginApi.playMedia(),this.paused=!1)},load:function(){null!=this.pluginApi&&("youtube"!=this.pluginType&&this.pluginApi.loadMedia(),this.paused=!1)},pause:function(){null!=this.pluginApi&&("youtube"==this.pluginType?this.pluginApi.pauseVideo():this.pluginApi.pauseMedia(),this.paused=!0)},stop:function(){null!=this.pluginApi&&("youtube"==this.pluginType?this.pluginApi.stopVideo():this.pluginApi.stopMedia(),this.paused=!0)},canPlayType:function(e){var t,i,n,s=mejs.plugins[this.pluginType];for(t=0;t<s.length;t++)if(n=s[t],mejs.PluginDetector.hasPluginVersion(this.pluginType,n.version))for(i=0;i<n.types.length;i++)if(e==n.types[i])return!0;return!1},positionFullscreenButton:function(e,t,i){null!=this.pluginApi&&this.pluginApi.positionFullscreenButton&&this.pluginApi.positionFullscreenButton(e,t,i)},hideFullscreenButton:function(){null!=this.pluginApi&&this.pluginApi.hideFullscreenButton&&this.pluginApi.hideFullscreenButton()},setSrc:function(e){if("string"==typeof e)this.pluginApi.setSrc(mejs.Utility.absolutizeUrl(e)),this.src=mejs.Utility.absolutizeUrl(e);else{var t,i;for(t=0;t<e.length;t++)i=e[t],this.canPlayType(i.type)&&(this.pluginApi.setSrc(mejs.Utility.absolutizeUrl(i.src)),this.src=mejs.Utility.absolutizeUrl(e))}},setCurrentTime:function(e){null!=this.pluginApi&&("youtube"==this.pluginType?this.pluginApi.seekTo(e):this.pluginApi.setCurrentTime(e),this.currentTime=e)},setVolume:function(e){null!=this.pluginApi&&("youtube"==this.pluginType?this.pluginApi.setVolume(100*e):this.pluginApi.setVolume(e),this.volume=e)},setMuted:function(e){null!=this.pluginApi&&("youtube"==this.pluginType?(e?this.pluginApi.mute():this.pluginApi.unMute(),this.muted=e,this.dispatchEvent("volumechange")):this.pluginApi.setMuted(e),this.muted=e)},setVideoSize:function(e,t){this.pluginElement.style&&(this.pluginElement.style.width=e+"px",this.pluginElement.style.height=t+"px"),null!=this.pluginApi&&this.pluginApi.setVideoSize&&this.pluginApi.setVideoSize(e,t)},setFullscreen:function(e){null!=this.pluginApi&&this.pluginApi.setFullscreen&&this.pluginApi.setFullscreen(e)},enterFullScreen:function(){null!=this.pluginApi&&this.pluginApi.setFullscreen&&this.setFullscreen(!0)},exitFullScreen:function(){null!=this.pluginApi&&this.pluginApi.setFullscreen&&this.setFullscreen(!1)},addEventListener:function(e,t){this.events[e]=this.events[e]||[],this.events[e].push(t)},removeEventListener:function(e,t){if(!e)return this.events={},!0;var n=this.events[e];if(!n)return!0;if(!t)return this.events[e]=[],!0;for(i=0;i<n.length;i++)if(n[i]===t)return this.events[e].splice(i,1),!0;return!1},dispatchEvent:function(e){var t,i,n=this.events[e];if(n)for(i=Array.prototype.slice.call(arguments,1),t=0;t<n.length;t++)n[t].apply(null,i)},attributes:{},hasAttribute:function(e){return e in this.attributes},removeAttribute:function(e){delete this.attributes[e]},getAttribute:function(e){return this.hasAttribute(e)?this.attributes[e]:""},setAttribute:function(e,t){this.attributes[e]=t},remove:function(){mejs.Utility.removeSwf(this.pluginElement.id)}},mejs.MediaPluginBridge={pluginMediaElements:{},htmlMediaElements:{},registerPluginElement:function(e,t,i){this.pluginMediaElements[e]=t,this.htmlMediaElements[e]=i},initPlugin:function(e){var t=this.pluginMediaElements[e],i=this.htmlMediaElements[e];if(t){switch(t.pluginType){case"flash":t.pluginElement=t.pluginApi=document.getElementById(e);break;case"silverlight":t.pluginElement=document.getElementById(t.id),t.pluginApi=t.pluginElement.Content.MediaElementJS}null!=t.pluginApi&&t.success&&t.success(t,i)}},fireEvent:function(e,t,i){var n,s;e=this.pluginMediaElements[e],e.ended=!1,e.paused=!0,t={type:t,target:e};for(n in i)e[n]=i[n],t[n]=i[n];s=i.bufferedTime||0,t.target.buffered=t.buffered={start:function(){return 0},end:function(){return s},length:1},e.dispatchEvent(t.type,t)}},mejs.MediaElementDefaults={mode:"auto",plugins:["flash","silverlight","youtube","vimeo"],enablePluginDebug:!1,type:"",pluginPath:mejs.Utility.getScriptPath(["mediaelement.js","mediaelement.min.js","mediaelement-and-player.js","mediaelement-and-player.min.js"]),flashName:"flashmediaelement.swf",enablePluginSmoothing:!1,silverlightName:"silverlightmediaelement.xap",defaultVideoWidth:480,defaultVideoHeight:270,pluginWidth:-1,pluginHeight:-1,pluginVars:[],timerRate:250,startVolume:.8,success:function(){},error:function(){}},mejs.MediaElement=function(e,t){return mejs.HtmlMediaElementShim.create(e,t)},mejs.HtmlMediaElementShim={create:function(e,t){var i=mejs.MediaElementDefaults,n="string"==typeof e?document.getElementById(e):e,s=n.tagName.toLowerCase(),o="audio"===s||"video"===s,r=o?n.getAttribute("src"):n.getAttribute("href");s=n.getAttribute("poster");var a,l=n.getAttribute("autoplay"),u=n.getAttribute("preload"),c=n.getAttribute("controls");for(a in t)i[a]=t[a];return r="undefined"==typeof r||null===r||""==r?null:r,s="undefined"==typeof s||null===s?"":s,u="undefined"==typeof u||null===u||"false"===u?"none":u,l=!("undefined"==typeof l||null===l||"false"===l),c=!("undefined"==typeof c||null===c||"false"===c),a=this.determinePlayback(n,i,mejs.MediaFeatures.supportsMediaTag,o,r),a.url=null!==a.url?mejs.Utility.absolutizeUrl(a.url):"","native"==a.method?(mejs.MediaFeatures.isBustedAndroid&&(n.src=a.url,n.addEventListener("click",function(){n.play()},!1)),this.updateNative(a,i,l,u)):""!==a.method?this.createPlugin(a,i,s,l,u,c):(this.createErrorMessage(a,i,s),this)},determinePlayback:function(e,t,i,n,s){var o,r,a,l,u=[],c={method:"",url:"",htmlMediaElement:e,isVideo:"audio"!=e.tagName.toLowerCase()};if("undefined"!=typeof t.type&&""!==t.type)if("string"==typeof t.type)u.push({type:t.type,url:s});else for(o=0;o<t.type.length;o++)u.push({type:t.type[o],url:s});else if(null!==s)r=this.formatType(s,e.getAttribute("type")),u.push({type:r,url:s});else for(o=0;o<e.childNodes.length;o++)r=e.childNodes[o],1==r.nodeType&&"source"==r.tagName.toLowerCase()&&(s=r.getAttribute("src"),r=this.formatType(s,r.getAttribute("type")),u.push({type:r,url:s}));if(!n&&u.length>0&&null!==u[0].url&&this.getTypeFromFile(u[0].url).indexOf("audio")>-1&&(c.isVideo=!1),mejs.MediaFeatures.isBustedAndroid&&(e.canPlayType=function(e){return null!==e.match(/video\/(mp4|m4v)/gi)?"maybe":""}),i&&("auto"===t.mode||"native"===t.mode)){for(n||(o=document.createElement(c.isVideo?"video":"audio"),e.parentNode.insertBefore(o,e),e.style.display="none",c.htmlMediaElement=e=o),o=0;o<u.length;o++)if(""!==e.canPlayType(u[o].type).replace(/no/,"")||""!==e.canPlayType(u[o].type.replace(/mp3/,"mpeg")).replace(/no/,"")){c.method="native",c.url=u[o].url;break}if("native"===c.method)return null!==c.url&&(e.src=c.url),c}if("auto"===t.mode||"shim"===t.mode)for(o=0;o<u.length;o++)for(r=u[o].type,e=0;e<t.plugins.length;e++)for(s=t.plugins[e],a=mejs.plugins[s],i=0;i<a.length;i++)if(l=a[i],null==l.version||mejs.PluginDetector.hasPluginVersion(s,l.version))for(n=0;n<l.types.length;n++)if(r==l.types[n])return c.method=s,c.url=u[o].url,c;return""===c.method&&u.length>0&&(c.url=u[0].url),c},formatType:function(e,t){return e&&!t?this.getTypeFromFile(e):t&&~t.indexOf(";")?t.substr(0,t.indexOf(";")):t},getTypeFromFile:function(e){return e=e.substring(e.lastIndexOf(".")+1),(/(mp4|m4v|ogg|ogv|webm|flv|wmv|mpeg|mov)/gi.test(e)?"video":"audio")+"/"+e},createErrorMessage:function(e,t,i){var n=e.htmlMediaElement,s=document.createElement("div");s.className="me-cannotplay";try{s.style.width=n.width+"px",s.style.height=n.height+"px"}catch(o){}s.innerHTML=""!==i?'<a href="'+e.url+'"><img src="'+i+'" width="100%" height="100%" /></a>':'<a href="'+e.url+'"><span>Download File</span></a>',n.parentNode.insertBefore(s,n),n.style.display="none",t.error(n)},createPlugin:function(e,t,i,n,s,o){i=e.htmlMediaElement;var r,a=1,l=1,u="me_"+e.method+"_"+mejs.meIndex++,c=new mejs.PluginMediaElement(u,e.method,e.url),d=document.createElement("div");for(c.tagName=i.tagName,r=0;r<i.attributes.length;r++){var h=i.attributes[r];1==h.specified&&c.setAttribute(h.name,h.value)}for(r=i.parentNode;null!==r&&"body"!=r.tagName.toLowerCase();){if("p"==r.parentNode.tagName.toLowerCase()){r.parentNode.parentNode.insertBefore(r,r.parentNode);break}r=r.parentNode}switch(e.isVideo?(a=t.videoWidth>0?t.videoWidth:null!==i.getAttribute("width")?i.getAttribute("width"):t.defaultVideoWidth,l=t.videoHeight>0?t.videoHeight:null!==i.getAttribute("height")?i.getAttribute("height"):t.defaultVideoHeight,a=mejs.Utility.encodeUrl(a),l=mejs.Utility.encodeUrl(l)):t.enablePluginDebug&&(a=320,l=240),c.success=t.success,mejs.MediaPluginBridge.registerPluginElement(u,c,i),d.className="me-plugin",d.id=u+"_container",e.isVideo?i.parentNode.insertBefore(d,i):document.body.insertBefore(d,document.body.childNodes[0]),n=["id="+u,"isvideo="+(e.isVideo?"true":"false"),"autoplay="+(n?"true":"false"),"preload="+s,"width="+a,"startvolume="+t.startVolume,"timerrate="+t.timerRate,"height="+l],null!==e.url&&("flash"==e.method?n.push("file="+mejs.Utility.encodeUrl(e.url)):n.push("file="+e.url)),t.enablePluginDebug&&n.push("debug=true"),t.enablePluginSmoothing&&n.push("smoothing=true"),o&&n.push("controls=true"),t.pluginVars&&(n=n.concat(t.pluginVars)),e.method){case"silverlight":d.innerHTML='<object data="data:application/x-silverlight-2," type="application/x-silverlight-2" id="'+u+'" name="'+u+'" width="'+a+'" height="'+l+'"><param name="initParams" value="'+n.join(",")+'" /><param name="windowless" value="true" /><param name="background" value="black" /><param name="minRuntimeVersion" value="3.0.0.0" /><param name="autoUpgrade" value="true" /><param name="source" value="'+t.pluginPath+t.silverlightName+'" /></object>';break;case"flash":mejs.MediaFeatures.isIE?(e=document.createElement("div"),d.appendChild(e),e.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" id="'+u+'" width="'+a+'" height="'+l+'"><param name="movie" value="'+t.pluginPath+t.flashName+"?x="+new Date+'" /><param name="flashvars" value="'+n.join("&amp;")+'" /><param name="quality" value="high" /><param name="bgcolor" value="#000000" /><param name="wmode" value="transparent" /><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="true" /></object>'):d.innerHTML='<embed id="'+u+'" name="'+u+'" play="true" loop="false" quality="high" bgcolor="#000000" wmode="transparent" allowScriptAccess="always" allowFullScreen="true" type="application/x-shockwave-flash" pluginspage="//www.macromedia.com/go/getflashplayer" src="'+t.pluginPath+t.flashName+'" flashvars="'+n.join("&")+'" width="'+a+'" height="'+l+'"></embed>';break;case"youtube":t=e.url.substr(e.url.lastIndexOf("=")+1),youtubeSettings={container:d,containerId:d.id,pluginMediaElement:c,pluginId:u,videoId:t,height:l,width:a},mejs.PluginDetector.hasPluginVersion("flash",[10,0,0])?mejs.YouTubeApi.createFlash(youtubeSettings):mejs.YouTubeApi.enqueueIframe(youtubeSettings);break;case"vimeo":console.log("vimeoid"),c.vimeoid=e.url.substr(e.url.lastIndexOf("/")+1),d.innerHTML='<object width="'+a+'" height="'+l+'"><param name="allowfullscreen" value="true" /><param name="allowscriptaccess" value="always" /><param name="flashvars" value="api=1" /><param name="movie" value="http://vimeo.com/moogaloop.swf?clip_id='+c.vimeoid+'&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00adef&amp;fullscreen=1&amp;autoplay=0&amp;loop=0" /><embed src="//vimeo.com/moogaloop.swf?api=1&amp;clip_id='+c.vimeoid+'&amp;server=vimeo.com&amp;show_title=0&amp;show_byline=0&amp;show_portrait=0&amp;color=00adef&amp;fullscreen=1&amp;autoplay=0&amp;loop=0" type="application/x-shockwave-flash" allowfullscreen="true" allowscriptaccess="always" width="'+a+'" height="'+l+'"></embed></object>'}return i.style.display="none",c},updateNative:function(e,t){var i,n=e.htmlMediaElement;for(i in mejs.HtmlMediaElement)n[i]=mejs.HtmlMediaElement[i];return t.success(n,n),n}},mejs.YouTubeApi={isIframeStarted:!1,isIframeLoaded:!1,loadIframeApi:function(){if(!this.isIframeStarted){var e=document.createElement("script");e.src="http://www.youtube.com/player_api";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t),this.isIframeStarted=!0}},iframeQueue:[],enqueueIframe:function(e){this.isLoaded?this.createIframe(e):(this.loadIframeApi(),this.iframeQueue.push(e))},createIframe:function(e){var t=e.pluginMediaElement,i=new YT.Player(e.containerId,{height:e.height,width:e.width,videoId:e.videoId,playerVars:{controls:0},events:{onReady:function(){e.pluginMediaElement.pluginApi=i,mejs.MediaPluginBridge.initPlugin(e.pluginId),setInterval(function(){mejs.YouTubeApi.createEvent(i,t,"timeupdate")},250)},onStateChange:function(e){mejs.YouTubeApi.handleStateChange(e.data,i,t)}}})},createEvent:function(e,t,i){if(i={type:i,target:t},e&&e.getDuration){t.currentTime=i.currentTime=e.getCurrentTime(),t.duration=i.duration=e.getDuration(),i.paused=t.paused,i.ended=t.ended,i.muted=e.isMuted(),i.volume=e.getVolume()/100,i.bytesTotal=e.getVideoBytesTotal(),i.bufferedBytes=e.getVideoBytesLoaded();var n=i.bufferedBytes/i.bytesTotal*i.duration;i.target.buffered=i.buffered={start:function(){return 0},end:function(){return n},length:1}}t.dispatchEvent(i.type,i)},iFrameReady:function(){for(this.isIframeLoaded=this.isLoaded=!0;this.iframeQueue.length>0;)this.createIframe(this.iframeQueue.pop())},flashPlayers:{},createFlash:function(e){this.flashPlayers[e.pluginId]=e;var t,i="http://www.youtube.com/apiplayer?enablejsapi=1&amp;playerapiid="+e.pluginId+"&amp;version=3&amp;autoplay=0&amp;controls=0&amp;modestbranding=1&loop=0";mejs.MediaFeatures.isIE?(t=document.createElement("div"),e.container.appendChild(t),t.outerHTML='<object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" id="'+e.pluginId+'" width="'+e.width+'" height="'+e.height+'"><param name="movie" value="'+i+'" /><param name="wmode" value="transparent" /><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="true" /></object>'):e.container.innerHTML='<object type="application/x-shockwave-flash" id="'+e.pluginId+'" data="'+i+'" width="'+e.width+'" height="'+e.height+'" style="visibility: visible; "><param name="allowScriptAccess" value="always"><param name="wmode" value="transparent"></object>'},flashReady:function(e){var t=this.flashPlayers[e],i=document.getElementById(e),n=t.pluginMediaElement;n.pluginApi=n.pluginElement=i,mejs.MediaPluginBridge.initPlugin(e),i.cueVideoById(t.videoId),e=t.containerId+"_callback",window[e]=function(e){mejs.YouTubeApi.handleStateChange(e,i,n)},i.addEventListener("onStateChange",e),setInterval(function(){mejs.YouTubeApi.createEvent(i,n,"timeupdate")},250)},handleStateChange:function(e,t,i){switch(e){case-1:i.paused=!0,i.ended=!0,mejs.YouTubeApi.createEvent(t,i,"loadedmetadata");break;case 0:i.paused=!1,i.ended=!0,mejs.YouTubeApi.createEvent(t,i,"ended");break;case 1:i.paused=!1,i.ended=!1,mejs.YouTubeApi.createEvent(t,i,"play"),mejs.YouTubeApi.createEvent(t,i,"playing");break;case 2:i.paused=!0,i.ended=!1,mejs.YouTubeApi.createEvent(t,i,"pause");break;case 3:mejs.YouTubeApi.createEvent(t,i,"progress")}}},window.mejs=mejs,window.MediaElement=mejs.MediaElement,"undefined"!=typeof jQuery?mejs.$=jQuery:"undefined"!=typeof ender&&(mejs.$=ender),function(e){mejs.MepDefaults={poster:"",defaultVideoWidth:480,defaultVideoHeight:270,videoWidth:-1,videoHeight:-1,defaultAudioWidth:400,defaultAudioHeight:30,audioWidth:-1,audioHeight:-1,startVolume:.8,loop:!1,enableAutosize:!0,alwaysShowHours:!1,showTimecodeFrameCount:!1,framesPerSecond:25,autosizeProgress:!0,alwaysShowControls:!1,iPadUseNativeControls:!1,iPhoneUseNativeControls:!1,AndroidUseNativeControls:!1,features:["playpause","current","progress","duration","tracks","volume","fullscreen"],isVideo:!0,enableKeyboard:!0,pauseOtherPlayers:!0,keyActions:[{keys:[32,179],action:function(e,t){t.paused||t.ended?t.play():t.pause()}},{keys:[38],action:function(e,t){t.setVolume(Math.min(t.volume+.1,1))}},{keys:[40],action:function(e,t){t.setVolume(Math.max(t.volume-.1,0))}},{keys:[37,227],action:function(e,t){!isNaN(t.duration)&&t.duration>0&&(e.isVideo&&(e.showControls(),e.startControlsTimer()),t.setCurrentTime(Math.min(t.currentTime-.05*t.duration,t.duration)))}},{keys:[39,228],action:function(e,t){!isNaN(t.duration)&&t.duration>0&&(e.isVideo&&(e.showControls(),e.startControlsTimer()),t.setCurrentTime(Math.max(t.currentTime+.05*t.duration,0)))}},{keys:[70],action:function(e){"undefined"!=typeof e.enterFullScreen&&(e.isFullScreen?e.exitFullScreen():e.enterFullScreen())}}]},mejs.mepIndex=0,mejs.players=[],mejs.MediaElementPlayer=function(t,i){return this instanceof mejs.MediaElementPlayer?(this.$media=this.$node=e(t),this.node=this.media=this.$media[0],"undefined"!=typeof this.node.player?this.node.player:(this.node.player=this,"undefined"==typeof i&&(i=this.$node.data("mejsoptions")),this.options=e.extend({},mejs.MepDefaults,i),mejs.players.push(this),this.init(),this)):new mejs.MediaElementPlayer(t,i)},mejs.MediaElementPlayer.prototype={hasFocus:!1,controlsAreVisible:!0,init:function(){var t=this,i=mejs.MediaFeatures,n=e.extend(!0,{},t.options,{success:function(e,i){t.meReady(e,i)},error:function(e){t.handleError(e)}}),s=t.media.tagName.toLowerCase();t.isDynamic="audio"!==s&&"video"!==s,t.isVideo=t.isDynamic?t.options.isVideo:"audio"!==s&&t.options.isVideo,i.isiPad&&t.options.iPadUseNativeControls||i.isiPhone&&t.options.iPhoneUseNativeControls?(t.$media.attr("controls","controls"),i.isiPad&&null!==t.media.getAttribute("autoplay")&&(t.media.load(),t.media.play())):i.isAndroid&&t.AndroidUseNativeControls||(t.$media.removeAttr("controls"),t.id="mep_"+mejs.mepIndex++,t.container=e('<div id="'+t.id+'" class="mejs-container"><div class="mejs-inner"><div class="mejs-mediaelement"></div><div class="mejs-layers"></div><div class="mejs-controls"></div><div class="mejs-clear"></div></div></div>').addClass(t.$media[0].className).insertBefore(t.$media),t.container.addClass((i.isAndroid?"mejs-android ":"")+(i.isiOS?"mejs-ios ":"")+(i.isiPad?"mejs-ipad ":"")+(i.isiPhone?"mejs-iphone ":"")+(t.isVideo?"mejs-video ":"mejs-audio ")),i.isiOS?(i=t.$media.clone(),t.container.find(".mejs-mediaelement").append(i),t.$media.remove(),t.$node=t.$media=i,t.node=t.media=i[0]):t.container.find(".mejs-mediaelement").append(t.$media),t.controls=t.container.find(".mejs-controls"),t.layers=t.container.find(".mejs-layers"),i=s.substring(0,1).toUpperCase()+s.substring(1),t.width=t.options[s+"Width"]>0||t.options[s+"Width"].toString().indexOf("%")>-1?t.options[s+"Width"]:""!==t.media.style.width&&null!==t.media.style.width?t.media.style.width:null!==t.media.getAttribute("width")?t.$media.attr("width"):t.options["default"+i+"Width"],t.height=t.options[s+"Height"]>0||t.options[s+"Height"].toString().indexOf("%")>-1?t.options[s+"Height"]:""!==t.media.style.height&&null!==t.media.style.height?t.media.style.height:null!==t.$media[0].getAttribute("height")?t.$media.attr("height"):t.options["default"+i+"Height"],t.setPlayerSize(t.width,t.height),n.pluginWidth=t.height,n.pluginHeight=t.width),mejs.MediaElement(t.$media[0],n)},showControls:function(e){var t=this;e="undefined"==typeof e||e,t.controlsAreVisible||(e?(t.controls.css("visibility","visible").stop(!0,!0).fadeIn(200,function(){t.controlsAreVisible=!0}),t.container.find(".mejs-control").css("visibility","visible").stop(!0,!0).fadeIn(200,function(){t.controlsAreVisible=!0})):(t.controls.css("visibility","visible").css("display","block"),t.container.find(".mejs-control").css("visibility","visible").css("display","block"),t.controlsAreVisible=!0),t.setControlsSize())},hideControls:function(t){var i=this;t="undefined"==typeof t||t,i.controlsAreVisible&&(t?(i.controls.stop(!0,!0).fadeOut(200,function(){e(this).css("visibility","hidden").css("display","block"),i.controlsAreVisible=!1}),i.container.find(".mejs-control").stop(!0,!0).fadeOut(200,function(){e(this).css("visibility","hidden").css("display","block")})):(i.controls.css("visibility","hidden").css("display","block"),i.container.find(".mejs-control").css("visibility","hidden").css("display","block"),i.controlsAreVisible=!1))},controlsTimer:null,startControlsTimer:function(e){var t=this;e="undefined"!=typeof e?e:1500,t.killControlsTimer("start"),t.controlsTimer=setTimeout(function(){t.hideControls(),t.killControlsTimer("hide")},e)},killControlsTimer:function(){null!==this.controlsTimer&&(clearTimeout(this.controlsTimer),delete this.controlsTimer,this.controlsTimer=null)},controlsEnabled:!0,disableControls:function(){this.killControlsTimer(),this.hideControls(!1),this.controlsEnabled=!1},enableControls:function(){this.showControls(!1),this.controlsEnabled=!0},meReady:function(t,i){var n=this,s=mejs.MediaFeatures,o=i.getAttribute("autoplay");o=!("undefined"==typeof o||null===o||"false"===o);var r;if(!n.created){if(n.created=!0,n.media=t,n.domNode=i,!(s.isAndroid&&n.options.AndroidUseNativeControls||s.isiPad&&n.options.iPadUseNativeControls||s.isiPhone&&n.options.iPhoneUseNativeControls)){n.buildposter(n,n.controls,n.layers,n.media),n.buildkeyboard(n,n.controls,n.layers,n.media),n.buildoverlays(n,n.controls,n.layers,n.media),n.findTracks();for(r in n.options.features)if(s=n.options.features[r],n["build"+s])try{n["build"+s](n,n.controls,n.layers,n.media)}catch(a){}n.container.trigger("controlsready"),n.setPlayerSize(n.width,n.height),n.setControlsSize(),n.isVideo&&(mejs.MediaFeatures.hasTouch?n.$media.bind("touchstart",function(){n.controlsAreVisible?n.hideControls(!1):n.controlsEnabled&&n.showControls(!1)}):(("native"==n.media.pluginType?n.$media:e(n.media.pluginElement)).click(function(){t.paused?t.play():t.pause()}),n.container.bind("mouseenter mouseover",function(){n.controlsEnabled&&(n.options.alwaysShowControls||(n.killControlsTimer("enter"),n.showControls(),n.startControlsTimer(2500)))}).bind("mousemove",function(){n.controlsEnabled&&(n.controlsAreVisible||n.showControls(),
n.options.alwaysShowControls||n.startControlsTimer(2500))}).bind("mouseleave",function(){n.controlsEnabled&&!n.media.paused&&!n.options.alwaysShowControls&&n.startControlsTimer(1e3)})),o&&!n.options.alwaysShowControls&&n.hideControls(),n.options.enableAutosize&&n.media.addEventListener("loadedmetadata",function(e){n.options.videoHeight<=0&&null===n.domNode.getAttribute("height")&&!isNaN(e.target.videoHeight)&&(n.setPlayerSize(e.target.videoWidth,e.target.videoHeight),n.setControlsSize(),n.media.setVideoSize(e.target.videoWidth,e.target.videoHeight))},!1)),t.addEventListener("play",function(){for(var e=0,t=mejs.players.length;e<t;e++){var i=mejs.players[e];i.id!=n.id&&n.options.pauseOtherPlayers&&!i.paused&&!i.ended&&i.pause(),i.hasFocus=!1}n.hasFocus=!0},!1),n.media.addEventListener("ended",function(){try{n.media.setCurrentTime(0)}catch(e){}n.media.pause(),n.setProgressRail&&n.setProgressRail(),n.setCurrentRail&&n.setCurrentRail(),n.options.loop?n.media.play():!n.options.alwaysShowControls&&n.controlsEnabled&&n.showControls()},!1),n.media.addEventListener("loadedmetadata",function(){n.updateDuration&&n.updateDuration(),n.updateCurrent&&n.updateCurrent(),n.isFullScreen||(n.setPlayerSize(n.width,n.height),n.setControlsSize())},!1),setTimeout(function(){n.setPlayerSize(n.width,n.height),n.setControlsSize()},50),e(window).resize(function(){n.isFullScreen||mejs.MediaFeatures.hasTrueNativeFullScreen&&document.webkitIsFullScreen||n.setPlayerSize(n.width,n.height),n.setControlsSize()}),"youtube"==n.media.pluginType&&n.container.find(".mejs-overlay-play").hide()}o&&"native"==t.pluginType&&(t.load(),t.play()),n.options.success&&("string"==typeof n.options.success?window[n.options.success](n.media,n.domNode,n):n.options.success(n.media,n.domNode,n))}},handleError:function(e){this.controls.hide(),this.options.error&&this.options.error(e)},setPlayerSize:function(t,i){if("undefined"!=typeof t&&(this.width=t),"undefined"!=typeof i&&(this.height=i),this.height.toString().indexOf("%")>0){var n=this.media.videoWidth&&this.media.videoWidth>0?this.media.videoWidth:this.options.defaultVideoWidth,s=this.media.videoHeight&&this.media.videoHeight>0?this.media.videoHeight:this.options.defaultVideoHeight,o=this.container.parent().width();n=parseInt(o*s/n,10),"body"===this.container.parent()[0].tagName.toLowerCase()&&(o=e(window).width(),n=e(window).height()),this.container.width(o).height(n),this.$media.width("100%").height("100%"),this.container.find("object, embed, iframe").width("100%").height("100%"),this.media.setVideoSize&&this.media.setVideoSize(o,n),this.layers.children(".mejs-layer").width("100%").height("100%")}else this.container.width(this.width).height(this.height),this.layers.children(".mejs-layer").width(this.width).height(this.height)},setControlsSize:function(){var t=0,i=0,n=this.controls.find(".mejs-time-rail"),s=this.controls.find(".mejs-time-total");this.controls.find(".mejs-time-current"),this.controls.find(".mejs-time-loaded"),others=n.siblings(),this.options&&!this.options.autosizeProgress&&(i=parseInt(n.css("width"))),0!==i&&i||(others.each(function(){"absolute"!=e(this).css("position")&&(t+=e(this).outerWidth(!0))}),i=this.controls.width()-t-(n.outerWidth(!0)-n.outerWidth(!1))),n.width(i),s.width(i-(s.outerWidth(!0)-s.width())),this.setProgressRail&&this.setProgressRail(),this.setCurrentRail&&this.setCurrentRail()},buildposter:function(t,i,n,s){var o=e('<div class="mejs-poster mejs-layer"></div>').appendTo(n);i=t.$media.attr("poster"),""!==t.options.poster&&(i=t.options.poster),""!==i&&null!=i?this.setPoster(i):o.hide(),s.addEventListener("play",function(){o.hide()},!1)},setPoster:function(t){var i=this.container.find(".mejs-poster"),n=i.find("img");0==n.length&&(n=e('<img width="100%" height="100%" />').appendTo(i)),n.attr("src",t)},buildoverlays:function(t,i,n,s){if(t.isVideo){var o=e('<div class="mejs-overlay mejs-layer"><div class="mejs-overlay-loading"><span></span></div></div>').hide().appendTo(n),r=e('<div class="mejs-overlay mejs-layer"><div class="mejs-overlay-error"></div></div>').hide().appendTo(n),a=e('<div class="mejs-overlay mejs-layer mejs-overlay-play"><div class="mejs-overlay-button"></div></div>').appendTo(n).click(function(){s.paused?s.play():s.pause()});s.addEventListener("play",function(){a.hide(),o.hide(),r.hide()},!1),s.addEventListener("playing",function(){a.hide(),o.hide(),r.hide()},!1),s.addEventListener("pause",function(){mejs.MediaFeatures.isiPhone||a.show()},!1),s.addEventListener("waiting",function(){o.show()},!1),s.addEventListener("loadeddata",function(){o.show()},!1),s.addEventListener("canplay",function(){o.hide()},!1),s.addEventListener("error",function(){o.hide(),r.show(),r.find("mejs-overlay-error").html("Error loading this resource")},!1)}},buildkeyboard:function(t,i,n,s){e(document).keydown(function(e){if(t.hasFocus&&t.options.enableKeyboard)for(var i=0,n=t.options.keyActions.length;i<n;i++)for(var o=t.options.keyActions[i],r=0,a=o.keys.length;r<a;r++)if(e.keyCode==o.keys[r])return e.preventDefault(),o.action(t,s),!1;return!0}),e(document).click(function(i){0==e(i.target).closest(".mejs-container").length&&(t.hasFocus=!1)})},findTracks:function(){var t=this,i=t.$media.find("track");t.tracks=[],i.each(function(i,n){n=e(n),t.tracks.push({srclang:n.attr("srclang").toLowerCase(),src:n.attr("src"),kind:n.attr("kind"),label:n.attr("label")||"",entries:[],isLoaded:!1})})},changeSkin:function(e){this.container[0].className="mejs-container "+e,this.setPlayerSize(this.width,this.height),this.setControlsSize()},play:function(){this.media.play()},pause:function(){this.media.pause()},load:function(){this.media.load()},setMuted:function(e){this.media.setMuted(e)},setCurrentTime:function(e){this.media.setCurrentTime(e)},getCurrentTime:function(){return this.media.currentTime},setVolume:function(e){this.media.setVolume(e)},getVolume:function(){return this.media.volume},setSrc:function(e){this.media.setSrc(e)},remove:function(){"flash"==this.media.pluginType?this.media.remove():"native"==this.media.pluginTyp&&this.media.prop("controls",!0),this.isDynamic||this.$node.insertBefore(this.container),this.container.remove()}},"undefined"!=typeof jQuery&&(jQuery.fn.mediaelementplayer=function(e){return this.each(function(){new mejs.MediaElementPlayer(this,e)})}),e(document).ready(function(){e(".mejs-player").mediaelementplayer()}),window.MediaElementPlayer=mejs.MediaElementPlayer}(mejs.$),function(e){e.extend(mejs.MepDefaults,{playpauseText:"Play/Pause"}),e.extend(MediaElementPlayer.prototype,{buildplaypause:function(t,i,n,s){var o=e('<div class="mejs-button mejs-playpause-button mejs-play" ><button type="button" aria-controls="'+this.id+'" title="'+this.options.playpauseText+'"></button></div>').appendTo(i).click(function(e){return e.preventDefault(),s.paused?s.play():s.pause(),!1});s.addEventListener("play",function(){o.removeClass("mejs-play").addClass("mejs-pause")},!1),s.addEventListener("playing",function(){o.removeClass("mejs-play").addClass("mejs-pause")},!1),s.addEventListener("pause",function(){o.removeClass("mejs-pause").addClass("mejs-play")},!1),s.addEventListener("paused",function(){o.removeClass("mejs-pause").addClass("mejs-play")},!1)}})}(mejs.$),function(e){e.extend(mejs.MepDefaults,{stopText:"Stop"}),e.extend(MediaElementPlayer.prototype,{buildstop:function(t,i,n,s){e('<div class="mejs-button mejs-stop-button mejs-stop"><button type="button" aria-controls="'+this.id+'" title="'+this.options.stopText+"></button></div>").appendTo(i).click(function(){s.paused||s.pause(),s.currentTime>0&&(s.setCurrentTime(0),i.find(".mejs-time-current").width("0px"),i.find(".mejs-time-handle").css("left","0px"),i.find(".mejs-time-float-current").html(mejs.Utility.secondsToTimeCode(0)),i.find(".mejs-currenttime").html(mejs.Utility.secondsToTimeCode(0)),n.find(".mejs-poster").show())})}})}(mejs.$),function(e){e.extend(MediaElementPlayer.prototype,{buildprogress:function(t,i,n,s){e('<div class="mejs-time-rail"><span class="mejs-time-total"><span class="mejs-time-loaded"></span><span class="mejs-time-current"></span><span class="mejs-time-handle"></span><span class="mejs-time-float"><span class="mejs-time-float-current">00:00</span><span class="mejs-time-float-corner"></span></span></span></div>').appendTo(i);var o=i.find(".mejs-time-total");n=i.find(".mejs-time-loaded");var r=i.find(".mejs-time-current"),a=i.find(".mejs-time-handle"),l=i.find(".mejs-time-float"),u=i.find(".mejs-time-float-current"),c=function(e){e=e.pageX;var t=o.offset(),i=o.outerWidth(),n=0;n=0;var r=e-t.left;e>t.left&&e<=i+t.left&&s.duration&&(n=(e-t.left)/i,n=n<=.02?0:n*s.duration,d&&s.setCurrentTime(n),mejs.MediaFeatures.hasTouch||(l.css("left",r),u.html(mejs.Utility.secondsToTimeCode(n)),l.show()))},d=!1,h=!1;o.bind("mousedown",function(e){if(1===e.which)return d=!0,c(e),!1}),i.find(".mejs-time-total").bind("mouseenter",function(){h=!0,mejs.MediaFeatures.hasTouch||l.show()}).bind("mouseleave",function(){h=!1,l.hide()}),e(document).bind("mouseup",function(){d=!1,l.hide()}).bind("mousemove",function(e){(d||h)&&c(e)}),s.addEventListener("progress",function(e){t.setProgressRail(e),t.setCurrentRail(e)},!1),s.addEventListener("timeupdate",function(e){t.setProgressRail(e),t.setCurrentRail(e)},!1),this.loaded=n,this.total=o,this.current=r,this.handle=a},setProgressRail:function(e){var t=void 0!=e?e.target:this.media,i=null;t&&t.buffered&&t.buffered.length>0&&t.buffered.end&&t.duration?i=t.buffered.end(0)/t.duration:t&&void 0!=t.bytesTotal&&t.bytesTotal>0&&void 0!=t.bufferedBytes?i=t.bufferedBytes/t.bytesTotal:e&&e.lengthComputable&&0!=e.total&&(i=e.loaded/e.total),null!==i&&(i=Math.min(1,Math.max(0,i)),this.loaded&&this.total&&this.loaded.width(this.total.width()*i))},setCurrentRail:function(){if(void 0!=this.media.currentTime&&this.media.duration&&this.total&&this.handle){var e=this.total.width()*this.media.currentTime/this.media.duration,t=e-this.handle.outerWidth(!0)/2;this.current.width(e),this.handle.css("left",t)}}})}(mejs.$),function(e){e.extend(mejs.MepDefaults,{duration:-1,timeAndDurationSeparator:" <span> | </span> "}),e.extend(MediaElementPlayer.prototype,{buildcurrent:function(t,i,n,s){e('<div class="mejs-time"><span class="mejs-currenttime">'+(t.options.alwaysShowHours?"00:":"")+(t.options.showTimecodeFrameCount?"00:00:00":"00:00")+"</span></div>").appendTo(i),this.currenttime=this.controls.find(".mejs-currenttime"),s.addEventListener("timeupdate",function(){t.updateCurrent()},!1)},buildduration:function(t,i,n,s){i.children().last().find(".mejs-currenttime").length>0?e(this.options.timeAndDurationSeparator+'<span class="mejs-duration">'+(this.options.duration>0?mejs.Utility.secondsToTimeCode(this.options.duration,this.options.alwaysShowHours||this.media.duration>3600,this.options.showTimecodeFrameCount,this.options.framesPerSecond||25):(t.options.alwaysShowHours?"00:":"")+(t.options.showTimecodeFrameCount?"00:00:00":"00:00"))+"</span>").appendTo(i.find(".mejs-time")):(i.find(".mejs-currenttime").parent().addClass("mejs-currenttime-container"),e('<div class="mejs-time mejs-duration-container"><span class="mejs-duration">'+(this.options.duration>0?mejs.Utility.secondsToTimeCode(this.options.duration,this.options.alwaysShowHours||this.media.duration>3600,this.options.showTimecodeFrameCount,this.options.framesPerSecond||25):(t.options.alwaysShowHours?"00:":"")+(t.options.showTimecodeFrameCount?"00:00:00":"00:00"))+"</span></div>").appendTo(i)),this.durationD=this.controls.find(".mejs-duration"),s.addEventListener("timeupdate",function(){t.updateDuration()},!1)},updateCurrent:function(){this.currenttime&&this.currenttime.html(mejs.Utility.secondsToTimeCode(this.media.currentTime,this.options.alwaysShowHours||this.media.duration>3600,this.options.showTimecodeFrameCount,this.options.framesPerSecond||25))},updateDuration:function(){this.media.duration&&this.durationD&&this.durationD.html(mejs.Utility.secondsToTimeCode(this.media.duration,this.options.alwaysShowHours,this.options.showTimecodeFrameCount,this.options.framesPerSecond||25))}})}(mejs.$),function(e){e.extend(mejs.MepDefaults,{muteText:"Mute Toggle",hideVolumeOnTouchDevices:!0,audioVolume:"horizontal",videoVolume:"vertical"}),e.extend(MediaElementPlayer.prototype,{buildvolume:function(t,i,n,s){if(!mejs.MediaFeatures.hasTouch||!this.options.hideVolumeOnTouchDevices){var o=this.isVideo?this.options.videoVolume:this.options.audioVolume,r="horizontal"==o?e('<div class="mejs-button mejs-volume-button mejs-mute"><button type="button" aria-controls="'+this.id+'" title="'+this.options.muteText+'"></button></div><div class="mejs-horizontal-volume-slider"><div class="mejs-horizontal-volume-total"></div><div class="mejs-horizontal-volume-current"></div><div class="mejs-horizontal-volume-handle"></div></div>').appendTo(i):e('<div class="mejs-button mejs-volume-button mejs-mute"><button type="button" aria-controls="'+this.id+'" title="'+this.options.muteText+'"></button><div class="mejs-volume-slider"><div class="mejs-volume-total"></div><div class="mejs-volume-current"></div><div class="mejs-volume-handle"></div></div></div>').appendTo(i),a=this.container.find(".mejs-volume-slider, .mejs-horizontal-volume-slider"),l=this.container.find(".mejs-volume-total, .mejs-horizontal-volume-total"),u=this.container.find(".mejs-volume-current, .mejs-horizontal-volume-current"),c=this.container.find(".mejs-volume-handle, .mejs-horizontal-volume-handle"),d=function(e){if(a.is(":visible"))if(e=Math.max(0,e),e=Math.min(e,1),0==e?r.removeClass("mejs-mute").addClass("mejs-unmute"):r.removeClass("mejs-unmute").addClass("mejs-mute"),"vertical"==o){var t=l.height(),i=l.position();e=t-t*e,c.css("top",i.top+e-c.height()/2),u.height(t-e),u.css("top",i.top+e)}else t=l.width(),i=l.position(),e=t*e,c.css("left",i.left+e-c.width()/2),u.width(e);else a.show(),d(e),a.hide()},h=function(e){var t=null,i=l.offset();if("vertical"==o){if(t=l.height(),parseInt(l.css("top").replace(/px/,""),10),t=(t-(e.pageY-i.top))/t,0==i.top||0==i.left)return}else t=l.width(),t=(e.pageX-i.left)/t;t=Math.max(0,t),t=Math.min(t,1),d(t),0==t?s.setMuted(!0):s.setMuted(!1),s.setVolume(t)},p=!1,f=!1;r.hover(function(){a.show(),f=!0},function(){f=!1,!p&&"vertical"==o&&a.hide()}),a.bind("mouseover",function(){f=!0}).bind("mousedown",function(e){return h(e),p=!0,!1}),e(document).bind("mouseup",function(){p=!1,!f&&"vertical"==o&&a.hide()}).bind("mousemove",function(e){p&&h(e)}),r.find("button").click(function(){s.setMuted(!s.muted)}),s.addEventListener("volumechange",function(){p||(s.muted?(d(0),r.removeClass("mejs-mute").addClass("mejs-unmute")):(d(s.volume),r.removeClass("mejs-unmute").addClass("mejs-mute")))},!1),this.container.is(":visible")&&(d(t.options.startVolume),"native"===s.pluginType&&s.setVolume(t.options.startVolume))}}})}(mejs.$),function(e){e.extend(mejs.MepDefaults,{usePluginFullScreen:!0,newWindowCallback:function(){return""},fullscreenText:"Fullscreen"}),e.extend(MediaElementPlayer.prototype,{isFullScreen:!1,isNativeFullScreen:!1,docStyleOverflow:null,isInIframe:!1,buildfullscreen:function(t,i,n,s){if(t.isVideo){t.isInIframe=window.location!=window.parent.location,mejs.MediaFeatures.hasTrueNativeFullScreen&&t.container.bind(mejs.MediaFeatures.fullScreenEventName,function(){mejs.MediaFeatures.isFullScreen()?(t.isNativeFullScreen=!0,t.setControlsSize()):(t.isNativeFullScreen=!1,t.exitFullScreen())});var o=this,r=e('<div class="mejs-button mejs-fullscreen-button"><button type="button" aria-controls="'+o.id+'" title="'+o.options.fullscreenText+'"></button></div>').appendTo(i);if("native"===o.media.pluginType||!o.options.usePluginFullScreen&&!mejs.MediaFeatures.isFirefox)r.click(function(){mejs.MediaFeatures.hasTrueNativeFullScreen&&mejs.MediaFeatures.isFullScreen()||t.isFullScreen?t.exitFullScreen():t.enterFullScreen()});else{var a=null;if(""!==document.documentElement.style.pointerEvents||mejs.MediaFeatures.isOpera)r.mouseover(function(){null!==a&&(clearTimeout(a),delete a);var e=r.offset(),i=t.container.offset();s.positionFullscreenButton(e.left-i.left,e.top-i.top,!0)}).mouseout(function(){null!==a&&(clearTimeout(a),delete a),a=setTimeout(function(){s.hideFullscreenButton()},1500)});else{var l=!1,u=function(){l&&(c.hide(),d.hide(),h.hide(),r.css("pointer-events",""),o.controls.css("pointer-events",""),l=!1)},c=e('<div class="mejs-fullscreen-hover" />').appendTo(o.container).mouseover(u),d=e('<div class="mejs-fullscreen-hover"  />').appendTo(o.container).mouseover(u),h=e('<div class="mejs-fullscreen-hover"  />').appendTo(o.container).mouseover(u),p=function(){var e={position:"absolute",top:0,left:0};c.css(e),d.css(e),h.css(e),c.width(o.container.width()).height(o.container.height()-o.controls.height()),e=r.offset().left-o.container.offset().left,fullScreenBtnWidth=r.outerWidth(!0),d.width(e).height(o.controls.height()).css({top:o.container.height()-o.controls.height()}),h.width(o.container.width()-e-fullScreenBtnWidth).height(o.controls.height()).css({top:o.container.height()-o.controls.height(),left:e+fullScreenBtnWidth})};e(document).resize(function(){p()}),r.mouseover(function(){if(!o.isFullScreen){var e=r.offset(),i=t.container.offset();s.positionFullscreenButton(e.left-i.left,e.top-i.top,!1),r.css("pointer-events","none"),o.controls.css("pointer-events","none"),c.show(),h.show(),d.show(),p(),l=!0}}),s.addEventListener("fullscreenchange",function(){u()})}}t.fullscreenBtn=r,e(document).bind("keydown",function(e){(mejs.MediaFeatures.hasTrueNativeFullScreen&&mejs.MediaFeatures.isFullScreen()||o.isFullScreen)&&27==e.keyCode&&t.exitFullScreen()})}},enterFullScreen:function(){var t=this;if("native"===t.media.pluginType||!mejs.MediaFeatures.isFirefox&&!t.options.usePluginFullScreen){if(docStyleOverflow=document.documentElement.style.overflow,document.documentElement.style.overflow="hidden",normalHeight=t.container.height(),normalWidth=t.container.width(),"native"===t.media.pluginType)if(mejs.MediaFeatures.hasTrueNativeFullScreen)mejs.MediaFeatures.requestFullScreen(t.container[0]),t.isInIframe&&setTimeout(function n(){t.isNativeFullScreen&&(e(window).width()!==screen.width?t.exitFullScreen():setTimeout(n,500))},500);else if(mejs.MediaFeatures.hasSemiNativeFullScreen)return void t.media.webkitEnterFullscreen();if(t.isInIframe){var i=t.options.newWindowCallback(this);if(""!==i){if(!mejs.MediaFeatures.hasTrueNativeFullScreen)return t.pause(),void window.open(i,t.id,"top=0,left=0,width="+screen.availWidth+",height="+screen.availHeight+",resizable=yes,scrollbars=no,status=no,toolbar=no");setTimeout(function(){t.isNativeFullScreen||(t.pause(),window.open(i,t.id,"top=0,left=0,width="+screen.availWidth+",height="+screen.availHeight+",resizable=yes,scrollbars=no,status=no,toolbar=no"))},250)}}t.container.addClass("mejs-container-fullscreen").width("100%").height("100%"),setTimeout(function(){t.container.css({width:"100%",height:"100%"}),t.setControlsSize()},500),"native"===t.pluginType?t.$media.width("100%").height("100%"):(t.container.find("object, embed, iframe").width("100%").height("100%"),t.media.setVideoSize(e(window).width(),e(window).height())),t.layers.children("div").width("100%").height("100%"),t.fullscreenBtn&&t.fullscreenBtn.removeClass("mejs-fullscreen").addClass("mejs-unfullscreen"),t.setControlsSize(),t.isFullScreen=!0}},exitFullScreen:function(){"native"!==this.media.pluginType&&mejs.MediaFeatures.isFirefox?this.media.setFullscreen(!1):(mejs.MediaFeatures.hasTrueNativeFullScreen&&(mejs.MediaFeatures.isFullScreen()||this.isFullScreen)&&mejs.MediaFeatures.cancelFullScreen(),document.documentElement.style.overflow=docStyleOverflow,this.container.removeClass("mejs-container-fullscreen").width(normalWidth).height(normalHeight),"native"===this.pluginType?this.$media.width(normalWidth).height(normalHeight):(this.container.find("object embed").width(normalWidth).height(normalHeight),this.media.setVideoSize(normalWidth,normalHeight)),this.layers.children("div").width(normalWidth).height(normalHeight),this.fullscreenBtn.removeClass("mejs-unfullscreen").addClass("mejs-fullscreen"),this.setControlsSize(),this.isFullScreen=!1)}})}(mejs.$),function(e){e.extend(mejs.MepDefaults,{startLanguage:"",tracksText:"Captions/Subtitles"}),e.extend(MediaElementPlayer.prototype,{hasChapters:!1,buildtracks:function(t,i,n,s){if(t.isVideo&&0!=t.tracks.length){var o;for(t.chapters=e('<div class="mejs-chapters mejs-layer"></div>').prependTo(n).hide(),t.captions=e('<div class="mejs-captions-layer mejs-layer"><div class="mejs-captions-position"><span class="mejs-captions-text"></span></div></div>').prependTo(n).hide(),t.captionsText=t.captions.find(".mejs-captions-text"),t.captionsButton=e('<div class="mejs-button mejs-captions-button"><button type="button" aria-controls="'+this.id+'" title="'+this.options.tracksText+'"></button><div class="mejs-captions-selector"><ul><li><input type="radio" name="'+t.id+'_captions" id="'+t.id+'_captions_none" value="none" checked="checked" /><label for="'+t.id+'_captions_none">None</label></li></ul></div></div>').appendTo(i).hover(function(){e(this).find(".mejs-captions-selector").css("visibility","visible")},function(){e(this).find(".mejs-captions-selector").css("visibility","hidden")}).delegate("input[type=radio]","click",function(){if(lang=this.value,"none"==lang)t.selectedTrack=null;else for(o=0;o<t.tracks.length;o++)if(t.tracks[o].srclang==lang){t.selectedTrack=t.tracks[o],t.captions.attr("lang",t.selectedTrack.srclang),t.displayCaptions();break}}),t.options.alwaysShowControls?t.container.find(".mejs-captions-position").addClass("mejs-captions-position-hover"):t.container.bind("mouseenter",function(){t.container.find(".mejs-captions-position").addClass("mejs-captions-position-hover")}).bind("mouseleave",function(){s.paused||t.container.find(".mejs-captions-position").removeClass("mejs-captions-position-hover")}),t.trackToLoad=-1,t.selectedTrack=null,t.isLoadingTrack=!1,o=0;o<t.tracks.length;o++)"subtitles"==t.tracks[o].kind&&t.addTrackButton(t.tracks[o].srclang,t.tracks[o].label);t.loadNextTrack(),s.addEventListener("timeupdate",function(){t.displayCaptions()},!1),s.addEventListener("loadedmetadata",function(){t.displayChapters()},!1),t.container.hover(function(){t.hasChapters&&(t.chapters.css("visibility","visible"),t.chapters.fadeIn(200))},function(){t.hasChapters&&!s.paused&&t.chapters.fadeOut(200,function(){e(this).css("visibility","hidden"),e(this).css("display","block")})}),null!==t.node.getAttribute("autoplay")&&t.chapters.css("visibility","hidden")}},loadNextTrack:function(){this.trackToLoad++,this.trackToLoad<this.tracks.length?(this.isLoadingTrack=!0,this.loadTrack(this.trackToLoad)):this.isLoadingTrack=!1},loadTrack:function(t){var i=this,n=i.tracks[t],s=function(){n.isLoaded=!0,i.enableTrackButton(n.srclang,n.label),i.loadNextTrack()};n.isTranslation?mejs.TrackFormatParser.translateTrackText(i.tracks[0].entries,i.tracks[0].srclang,n.srclang,i.options.googleApiKey,function(e){n.entries=e,s()}):e.ajax({url:n.src,success:function(e){n.entries=mejs.TrackFormatParser.parse(e),s(),"chapters"==n.kind&&i.media.duration>0&&i.drawChapters(n)},error:function(){i.loadNextTrack()}})},enableTrackButton:function(t,i){""===i&&(i=mejs.language.codes[t]||t),this.captionsButton.find("input[value="+t+"]").prop("disabled",!1).siblings("label").html(i),this.options.startLanguage==t&&e("#"+this.id+"_captions_"+t).click(),this.adjustLanguageBox()},addTrackButton:function(t,i){""===i&&(i=mejs.language.codes[t]||t),this.captionsButton.find("ul").append(e('<li><input type="radio" name="'+this.id+'_captions" id="'+this.id+"_captions_"+t+'" value="'+t+'" disabled="disabled" /><label for="'+this.id+"_captions_"+t+'">'+i+" (loading)</label></li>")),this.adjustLanguageBox(),this.container.find(".mejs-captions-translations option[value="+t+"]").remove()},adjustLanguageBox:function(){this.captionsButton.find(".mejs-captions-selector").height(this.captionsButton.find(".mejs-captions-selector ul").outerHeight(!0)+this.captionsButton.find(".mejs-captions-translations").outerHeight(!0))},displayCaptions:function(){if("undefined"!=typeof this.tracks){var e,t=this.selectedTrack;if(null!=t&&t.isLoaded)for(e=0;e<t.entries.times.length;e++)if(this.media.currentTime>=t.entries.times[e].start&&this.media.currentTime<=t.entries.times[e].stop)return this.captionsText.html(t.entries.text[e]),void this.captions.show();this.captions.hide()}},displayChapters:function(){var e;for(e=0;e<this.tracks.length;e++)if("chapters"==this.tracks[e].kind&&this.tracks[e].isLoaded){this.drawChapters(this.tracks[e]),this.hasChapters=!0;break}},drawChapters:function(t){var i,n,s=this,o=n=0;for(s.chapters.empty(),i=0;i<t.entries.times.length;i++)n=t.entries.times[i].stop-t.entries.times[i].start,n=Math.floor(n/s.media.duration*100),(n+o>100||i==t.entries.times.length-1&&n+o<100)&&(n=100-o),s.chapters.append(e('<div class="mejs-chapter" rel="'+t.entries.times[i].start+'" style="left: '+o.toString()+"%;width: "+n.toString()+'%;"><div class="mejs-chapter-block'+(i==t.entries.times.length-1?" mejs-chapter-block-last":"")+'"><span class="ch-title">'+t.entries.text[i]+'</span><span class="ch-time">'+mejs.Utility.secondsToTimeCode(t.entries.times[i].start)+"&ndash;"+mejs.Utility.secondsToTimeCode(t.entries.times[i].stop)+"</span></div></div>")),o+=n;s.chapters.find("div.mejs-chapter").click(function(){s.media.setCurrentTime(parseFloat(e(this).attr("rel"))),s.media.paused&&s.media.play()}),s.chapters.show()}}),mejs.language={codes:{af:"Afrikaans",sq:"Albanian",ar:"Arabic",be:"Belarusian",bg:"Bulgarian",ca:"Catalan",zh:"Chinese","zh-cn":"Chinese Simplified","zh-tw":"Chinese Traditional",hr:"Croatian",cs:"Czech",da:"Danish",nl:"Dutch",en:"English",et:"Estonian",tl:"Filipino",fi:"Finnish",fr:"French",gl:"Galician",de:"German",el:"Greek",ht:"Haitian Creole",iw:"Hebrew",hi:"Hindi",hu:"Hungarian",is:"Icelandic",id:"Indonesian",ga:"Irish",it:"Italian",ja:"Japanese",ko:"Korean",lv:"Latvian",lt:"Lithuanian",mk:"Macedonian",ms:"Malay",mt:"Maltese",no:"Norwegian",fa:"Persian",pl:"Polish",pt:"Portuguese",ro:"Romanian",ru:"Russian",sr:"Serbian",sk:"Slovak",sl:"Slovenian",es:"Spanish",sw:"Swahili",sv:"Swedish",tl:"Tagalog",th:"Thai",tr:"Turkish",uk:"Ukrainian",vi:"Vietnamese",cy:"Welsh",yi:"Yiddish"}},mejs.TrackFormatParser={pattern_identifier:/^([a-zA-z]+-)?[0-9]+$/,pattern_timecode:/^([0-9]{2}:[0-9]{2}:[0-9]{2}([,.][0-9]{1,3})?) --\> ([0-9]{2}:[0-9]{2}:[0-9]{2}([,.][0-9]{3})?)(.*)$/,split2:function(e,t){return e.split(t)},parse:function(e){var t=0;e=this.split2(e,/\r?\n/);for(var i,n,s={text:[],times:[]};t<e.length;t++)if(this.pattern_identifier.exec(e[t])&&(t++,(i=this.pattern_timecode.exec(e[t]))&&t<e.length)){for(t++,n=e[t],t++;""!==e[t]&&t<e.length;)n=n+"\n"+e[t],t++;s.text.push(n),s.times.push({start:mejs.Utility.timeCodeToSeconds(i[1]),stop:mejs.Utility.timeCodeToSeconds(i[3]),settings:i[5]})}return s}},3!="x\n\ny".split(/\n/gi).length&&(mejs.TrackFormatParser.split2=function(e,t){var i,n=[],s="";for(i=0;i<e.length;i++)s+=e.substring(i,i+1),t.test(s)&&(n.push(s.replace(t,"")),s="");return n.push(s),n})}(mejs.$),function(e){e.extend(mejs.MepDefaults,contextMenuItems=[{render:function(e){return"undefined"==typeof e.enterFullScreen?null:e.isFullScreen?"Turn off Fullscreen":"Go Fullscreen"},click:function(e){e.isFullScreen?e.exitFullScreen():e.enterFullScreen()}},{render:function(e){return e.media.muted?"Unmute":"Mute"},click:function(e){e.media.muted?e.setMuted(!1):e.setMuted(!0)}},{isSeparator:!0},{render:function(){return"Download Video"},click:function(e){window.location.href=e.media.currentSrc}}]),e.extend(MediaElementPlayer.prototype,{buildcontextmenu:function(t){t.contextMenu=e('<div class="mejs-contextmenu"></div>').appendTo(e("body")).hide(),t.container.bind("contextmenu",function(e){if(t.isContextMenuEnabled)return e.preventDefault(),t.renderContextMenu(e.clientX-1,e.clientY-1),!1}),t.container.bind("click",function(){t.contextMenu.hide()}),t.contextMenu.bind("mouseleave",function(){t.startContextMenuTimer()})},isContextMenuEnabled:!0,enableContextMenu:function(){this.isContextMenuEnabled=!0},disableContextMenu:function(){this.isContextMenuEnabled=!1},contextMenuTimeout:null,startContextMenuTimer:function(){var e=this;e.killContextMenuTimer(),e.contextMenuTimer=setTimeout(function(){e.hideContextMenu(),e.killContextMenuTimer()},750)},killContextMenuTimer:function(){var e=this.contextMenuTimer;null!=e&&(clearTimeout(e),delete e)},hideContextMenu:function(){this.contextMenu.hide()},renderContextMenu:function(t,i){for(var n=this,s="",o=n.options.contextMenuItems,r=0,a=o.length;r<a;r++)if(o[r].isSeparator)s+='<div class="mejs-contextmenu-separator"></div>';else{var l=o[r].render(n);null!=l&&(s+='<div class="mejs-contextmenu-item" data-itemindex="'+r+'" id="element-'+1e6*Math.random()+'">'+l+"</div>")}n.contextMenu.empty().append(e(s)).css({top:i,left:t}).show(),n.contextMenu.find(".mejs-contextmenu-item").each(function(){var t=e(this),i=parseInt(t.data("itemindex"),10),s=n.options.contextMenuItems[i];"undefined"!=typeof s.show&&s.show(t,n),t.click(function(){"undefined"!=typeof s.click&&s.click(n),n.contextMenu.hide()})}),setTimeout(function(){n.killControlsTimer("rev3")},100)}})}(mejs.$),$(".owl-carousel").owlCarousel({loop:!0,nav:!1,autoplay:!0,autoplayTimeout:8e3,autoplaySpeed:5500,dots:!1,responsive:{0:{items:1},600:{items:1},1e3:{items:1}}}),$(document).ready(function(){$("#audio-player").mediaelementplayer({alwaysShowControls:!0,features:["playpause","volume","progress"],audioVolume:"horizontal",audioWidth:400,audioHeight:120})}),$(document).ready(function(){$("#treck3").mediaelementplayer({alwaysShowControls:!0,features:["playpause","volume","progress"],audioVolume:"horizontal",audioWidth:400,audioHeight:120})}),$(document).ready(function(){$("#treck2").mediaelementplayer({alwaysShowControls:!0,features:["playpause","volume","progress"],audioVolume:"horizontal",audioWidth:400,audioHeight:120})}),$(document).ready(function(){$("#treck1").mediaelementplayer({alwaysShowControls:!0,features:["playpause","volume","progress"],audioVolume:"horizontal",audioWidth:400,audioHeight:120})}),$(document).ready(function(){$(".menu").on("click","a",function(e){e.preventDefault();var t=$(this).attr("href"),i=$(t).offset().top;$("body,html").animate({scrollTop:i},1500)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
