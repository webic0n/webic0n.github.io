!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(t,e){"use strict";function n(t,e,n){e=e||ot;var i,r=e.createElement("script");if(r.text=t,n)for(i in wt)n[i]&&(r[i]=n[i]);e.head.appendChild(r).parentNode.removeChild(r)}function i(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?pt[dt.call(t)]||"object":typeof t}function r(t){var e=!!t&&"length"in t&&t.length,n=i(t);return!yt(t)&&!xt(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function s(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}function o(t,e,n){return yt(e)?bt.grep(t,function(t,i){return!!e.call(t,i,t)!==n}):e.nodeType?bt.grep(t,function(t){return t===e!==n}):"string"!=typeof e?bt.grep(t,function(t){return ht.call(e,t)>-1!==n}):bt.filter(e,t,n)}function a(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}function l(t){var e={};return bt.each(t.match(qt)||[],function(t,n){e[n]=!0}),e}function u(t){return t}function c(t){throw t}function h(t,e,n,i){var r;try{t&&yt(r=t.promise)?r.call(t).done(e).fail(n):t&&yt(r=t.then)?r.call(t,e,n):e.apply(void 0,[t].slice(i))}catch(t){n.apply(void 0,[t])}}function p(){ot.removeEventListener("DOMContentLoaded",p),t.removeEventListener("load",p),bt.ready()}function d(t,e){return e.toUpperCase()}function f(t){return t.replace(Ot,"ms-").replace(Mt,d)}function g(){this.expando=bt.expando+g.uid++}function m(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:Bt.test(t)?JSON.parse(t):t)}function v(t,e,n){var i;if(void 0===n&&1===t.nodeType)if(i="data-"+e.replace(Ft,"-$&").toLowerCase(),n=t.getAttribute(i),"string"==typeof n){try{n=m(n)}catch(r){}Wt.set(t,e,n)}else n=void 0;return n}function y(t,e,n,i){var r,s,o=20,a=i?function(){return i.cur()}:function(){return bt.css(t,e,"")},l=a(),u=n&&n[3]||(bt.cssNumber[e]?"":"px"),c=(bt.cssNumber[e]||"px"!==u&&+l)&&Xt.exec(bt.css(t,e));if(c&&c[3]!==u){for(l/=2,u=u||c[3],c=+l||1;o--;)bt.style(t,e,c+u),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),c/=s;c=2*c,bt.style(t,e,c+u),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=u,i.start=c,i.end=r)),r}function x(t){var e,n=t.ownerDocument,i=t.nodeName,r=Yt[i];return r?r:(e=n.body.appendChild(n.createElement(i)),r=bt.css(e,"display"),e.parentNode.removeChild(e),"none"===r&&(r="block"),Yt[i]=r,r)}function w(t,e){for(var n,i,r=[],s=0,o=t.length;s<o;s++)i=t[s],i.style&&(n=i.style.display,e?("none"===n&&(r[s]=It.get(i,"display")||null,r[s]||(i.style.display="")),""===i.style.display&&Qt(i)&&(r[s]=x(i))):"none"!==n&&(r[s]="none",It.set(i,"display",n)));for(s=0;s<o;s++)null!=r[s]&&(t[s].style.display=r[s]);return t}function _(t,e){var n;return n="undefined"!=typeof t.getElementsByTagName?t.getElementsByTagName(e||"*"):"undefined"!=typeof t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&s(t,e)?bt.merge([t],n):n}function b(t,e){for(var n=0,i=t.length;n<i;n++)It.set(t[n],"globalEval",!e||It.get(e[n],"globalEval"))}function C(t,e,n,r,s){for(var o,a,l,u,c,h,p=e.createDocumentFragment(),d=[],f=0,g=t.length;f<g;f++)if(o=t[f],o||0===o)if("object"===i(o))bt.merge(d,o.nodeType?[o]:o);else if(ee.test(o)){for(a=a||p.appendChild(e.createElement("div")),l=(Jt.exec(o)||["",""])[1].toLowerCase(),u=te[l]||te._default,a.innerHTML=u[1]+bt.htmlPrefilter(o)+u[2],h=u[0];h--;)a=a.lastChild;bt.merge(d,a.childNodes),a=p.firstChild,a.textContent=""}else d.push(e.createTextNode(o));for(p.textContent="",f=0;o=d[f++];)if(r&&bt.inArray(o,r)>-1)s&&s.push(o);else if(c=bt.contains(o.ownerDocument,o),a=_(p.appendChild(o),"script"),c&&b(a),n)for(h=0;o=a[h++];)Kt.test(o.type||"")&&n.push(o);return p}function T(){return!0}function E(){return!1}function D(){try{return ot.activeElement}catch(t){}}function S(t,e,n,i,r,s){var o,a;if("object"==typeof e){"string"!=typeof n&&(i=i||n,n=void 0);for(a in e)S(t,a,n,i,e[a],s);return t}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),r===!1)r=E;else if(!r)return t;return 1===s&&(o=r,r=function(t){return bt().off(t),o.apply(this,arguments)},r.guid=o.guid||(o.guid=bt.guid++)),t.each(function(){bt.event.add(this,e,r,i,n)})}function k(t,e){return s(t,"table")&&s(11!==e.nodeType?e:e.firstChild,"tr")?bt(t).children("tbody")[0]||t:t}function j(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function $(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function A(t,e){var n,i,r,s,o,a,l,u;if(1===e.nodeType){if(It.hasData(t)&&(s=It.access(t),o=It.set(e,s),u=s.events)){delete o.handle,o.events={};for(r in u)for(n=0,i=u[r].length;n<i;n++)bt.event.add(e,r,u[r][n])}Wt.hasData(t)&&(a=Wt.access(t),l=bt.extend({},a),Wt.set(e,l))}}function N(t,e){var n=e.nodeName.toLowerCase();"input"===n&&Zt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function L(t,e,i,r){e=ut.apply([],e);var s,o,a,l,u,c,h=0,p=t.length,d=p-1,f=e[0],g=yt(f);if(g||p>1&&"string"==typeof f&&!vt.checkClone&&le.test(f))return t.each(function(n){var s=t.eq(n);g&&(e[0]=f.call(this,n,s.html())),L(s,e,i,r)});if(p&&(s=C(e,t[0].ownerDocument,!1,t,r),o=s.firstChild,1===s.childNodes.length&&(s=o),o||r)){for(a=bt.map(_(s,"script"),j),l=a.length;h<p;h++)u=s,h!==d&&(u=bt.clone(u,!0,!0),l&&bt.merge(a,_(u,"script"))),i.call(t[h],u,h);if(l)for(c=a[a.length-1].ownerDocument,bt.map(a,$),h=0;h<l;h++)u=a[h],Kt.test(u.type||"")&&!It.access(u,"globalEval")&&bt.contains(c,u)&&(u.src&&"module"!==(u.type||"").toLowerCase()?bt._evalUrl&&bt._evalUrl(u.src):n(u.textContent.replace(ue,""),c,u))}return t}function q(t,e,n){for(var i,r=e?bt.filter(e,t):t,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||bt.cleanData(_(i)),i.parentNode&&(n&&bt.contains(i.ownerDocument,i)&&b(_(i,"script")),i.parentNode.removeChild(i));return t}function H(t,e,n){var i,r,s,o,a=t.style;return n=n||he(t),n&&(o=n.getPropertyValue(e)||n[e],""!==o||bt.contains(t.ownerDocument,t)||(o=bt.style(t,e)),!vt.pixelBoxStyles()&&ce.test(o)&&pe.test(e)&&(i=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=n.width,a.width=i,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function z(t,e){return{get:function(){return t()?void delete this.get:(this.get=e).apply(this,arguments)}}}function P(t){if(t in ye)return t;for(var e=t[0].toUpperCase()+t.slice(1),n=ve.length;n--;)if(t=ve[n]+e,t in ye)return t}function O(t){var e=bt.cssProps[t];return e||(e=bt.cssProps[t]=P(t)||t),e}function M(t,e,n){var i=Xt.exec(e);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):e}function R(t,e,n,i,r,s){var o="width"===e?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=bt.css(t,n+Vt[o],!0,r)),i?("content"===n&&(l-=bt.css(t,"padding"+Vt[o],!0,r)),"margin"!==n&&(l-=bt.css(t,"border"+Vt[o]+"Width",!0,r))):(l+=bt.css(t,"padding"+Vt[o],!0,r),"padding"!==n?l+=bt.css(t,"border"+Vt[o]+"Width",!0,r):a+=bt.css(t,"border"+Vt[o]+"Width",!0,r));return!i&&s>=0&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))),l}function I(t,e,n){var i=he(t),r=H(t,e,i),s="border-box"===bt.css(t,"boxSizing",!1,i),o=s;if(ce.test(r)){if(!n)return r;r="auto"}return o=o&&(vt.boxSizingReliable()||r===t.style[e]),("auto"===r||!parseFloat(r)&&"inline"===bt.css(t,"display",!1,i))&&(r=t["offset"+e[0].toUpperCase()+e.slice(1)],o=!0),r=parseFloat(r)||0,r+R(t,e,n||(s?"border":"content"),o,i,r)+"px"}function W(t,e,n,i,r){return new W.prototype.init(t,e,n,i,r)}function B(){we&&(ot.hidden===!1&&t.requestAnimationFrame?t.requestAnimationFrame(B):t.setTimeout(B,bt.fx.interval),bt.fx.tick())}function F(){return t.setTimeout(function(){xe=void 0}),xe=Date.now()}function U(t,e){var n,i=0,r={height:t};for(e=e?1:0;i<4;i+=2-e)n=Vt[i],r["margin"+n]=r["padding"+n]=t;return e&&(r.opacity=r.width=t),r}function X(t,e,n){for(var i,r=(G.tweeners[e]||[]).concat(G.tweeners["*"]),s=0,o=r.length;s<o;s++)if(i=r[s].call(n,e,t))return i}function V(t,e,n){var i,r,s,o,a,l,u,c,h="width"in e||"height"in e,p=this,d={},f=t.style,g=t.nodeType&&Qt(t),m=It.get(t,"fxshow");n.queue||(o=bt._queueHooks(t,"fx"),null==o.unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,p.always(function(){p.always(function(){o.unqueued--,bt.queue(t,"fx").length||o.empty.fire()})}));for(i in e)if(r=e[i],_e.test(r)){if(delete e[i],s=s||"toggle"===r,r===(g?"hide":"show")){if("show"!==r||!m||void 0===m[i])continue;g=!0}d[i]=m&&m[i]||bt.style(t,i)}if(l=!bt.isEmptyObject(e),l||!bt.isEmptyObject(d)){h&&1===t.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],u=m&&m.display,null==u&&(u=It.get(t,"display")),c=bt.css(t,"display"),"none"===c&&(u?c=u:(w([t],!0),u=t.style.display||u,c=bt.css(t,"display"),w([t]))),("inline"===c||"inline-block"===c&&null!=u)&&"none"===bt.css(t,"float")&&(l||(p.done(function(){f.display=u}),null==u&&(c=f.display,u="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1;for(i in d)l||(m?"hidden"in m&&(g=m.hidden):m=It.access(t,"fxshow",{display:u}),s&&(m.hidden=!g),g&&w([t],!0),p.done(function(){g||w([t]),It.remove(t,"fxshow");for(i in d)bt.style(t,i,d[i])})),l=X(g?m[i]:0,i,p),i in m||(m[i]=l.start,g&&(l.end=l.start,l.start=0))}}function Q(t,e){var n,i,r,s,o;for(n in t)if(i=f(n),r=e[i],s=t[n],Array.isArray(s)&&(r=s[1],s=t[n]=s[0]),n!==i&&(t[i]=s,delete t[n]),o=bt.cssHooks[i],o&&"expand"in o){s=o.expand(s),delete t[i];for(n in s)n in t||(t[n]=s[n],e[n]=r)}else e[i]=r}function G(t,e,n){var i,r,s=0,o=G.prefilters.length,a=bt.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=xe||F(),n=Math.max(0,u.startTime+u.duration-e),i=n/u.duration||0,s=1-i,o=0,l=u.tweens.length;o<l;o++)u.tweens[o].run(s);return a.notifyWith(t,[u,s,n]),s<1&&l?n:(l||a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u]),!1)},u=a.promise({elem:t,props:bt.extend({},e),opts:bt.extend(!0,{specialEasing:{},easing:bt.easing._default},n),originalProperties:e,originalOptions:n,startTime:xe||F(),duration:n.duration,tweens:[],createTween:function(e,n){var i=bt.Tween(t,u.opts,e,n,u.opts.specialEasing[e]||u.opts.easing);return u.tweens.push(i),i},stop:function(e){var n=0,i=e?u.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)u.tweens[n].run(1);return e?(a.notifyWith(t,[u,1,0]),a.resolveWith(t,[u,e])):a.rejectWith(t,[u,e]),this}}),c=u.props;for(Q(c,u.opts.specialEasing);s<o;s++)if(i=G.prefilters[s].call(u,t,c,u.opts))return yt(i.stop)&&(bt._queueHooks(u.elem,u.opts.queue).stop=i.stop.bind(i)),i;return bt.map(c,X,u),yt(u.opts.start)&&u.opts.start.call(t,u),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always),bt.fx.timer(bt.extend(l,{elem:t,anim:u,queue:u.opts.queue})),u}function Y(t){var e=t.match(qt)||[];return e.join(" ")}function Z(t){return t.getAttribute&&t.getAttribute("class")||""}function J(t){return Array.isArray(t)?t:"string"==typeof t?t.match(qt)||[]:[]}function K(t,e,n,r){var s;if(Array.isArray(e))bt.each(e,function(e,i){n||Le.test(t)?r(t,i):K(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)});else if(n||"object"!==i(e))r(t,e);else for(s in e)K(t+"["+s+"]",e[s],n,r)}function tt(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var i,r=0,s=e.toLowerCase().match(qt)||[];if(yt(n))for(;i=s[r++];)"+"===i[0]?(i=i.slice(1)||"*",(t[i]=t[i]||[]).unshift(n)):(t[i]=t[i]||[]).push(n)}}function et(t,e,n,i){function r(a){var l;return s[a]=!0,bt.each(t[a]||[],function(t,a){var u=a(e,n,i);return"string"!=typeof u||o||s[u]?o?!(l=u):void 0:(e.dataTypes.unshift(u),r(u),!1)}),l}var s={},o=t===Ue;return r(e.dataTypes[0])||!s["*"]&&r("*")}function nt(t,e){var n,i,r=bt.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((r[n]?t:i||(i={}))[n]=e[n]);return i&&bt.extend(!0,t,i),t}function it(t,e,n){for(var i,r,s,o,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=t.mimeType||e.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||t.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),n[s]}function rt(t,e,n,i){var r,s,o,a,l,u={},c=t.dataTypes.slice();if(c[1])for(o in t.converters)u[o.toLowerCase()]=t.converters[o];for(s=c.shift();s;)if(t.responseFields[s]&&(n[t.responseFields[s]]=e),!l&&i&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(o=u[l+" "+s]||u["* "+s],!o)for(r in u)if(a=r.split(" "),a[1]===s&&(o=u[l+" "+a[0]]||u["* "+a[0]])){o===!0?o=u[r]:u[r]!==!0&&(s=a[0],c.unshift(a[1]));break}if(o!==!0)if(o&&t["throws"])e=o(e);else try{e=o(e)}catch(h){return{state:"parsererror",error:o?h:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}var st=[],ot=t.document,at=Object.getPrototypeOf,lt=st.slice,ut=st.concat,ct=st.push,ht=st.indexOf,pt={},dt=pt.toString,ft=pt.hasOwnProperty,gt=ft.toString,mt=gt.call(Object),vt={},yt=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},xt=function(t){return null!=t&&t===t.window},wt={type:!0,src:!0,noModule:!0},_t="3.3.1",bt=function(t,e){return new bt.fn.init(t,e)},Ct=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;bt.fn=bt.prototype={jquery:_t,constructor:bt,length:0,toArray:function(){return lt.call(this)},get:function(t){return null==t?lt.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=bt.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return bt.each(this,t)},map:function(t){return this.pushStack(bt.map(this,function(e,n){return t.call(e,n,e)}))},slice:function(){return this.pushStack(lt.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ct,sort:st.sort,splice:st.splice},bt.extend=bt.fn.extend=function(){var t,e,n,i,r,s,o=arguments[0]||{},a=1,l=arguments.length,u=!1;for("boolean"==typeof o&&(u=o,o=arguments[a]||{},a++),"object"==typeof o||yt(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)n=o[e],i=t[e],o!==i&&(u&&i&&(bt.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,s=n&&Array.isArray(n)?n:[]):s=n&&bt.isPlainObject(n)?n:{},o[e]=bt.extend(u,s,i)):void 0!==i&&(o[e]=i));return o},bt.extend({expando:"jQuery"+(_t+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==dt.call(t))&&(!(e=at(t))||(n=ft.call(e,"constructor")&&e.constructor,"function"==typeof n&&gt.call(n)===mt))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t){n(t)},each:function(t,e){var n,i=0;if(r(t))for(n=t.length;i<n&&e.call(t[i],i,t[i])!==!1;i++);else for(i in t)if(e.call(t[i],i,t[i])===!1)break;return t},trim:function(t){return null==t?"":(t+"").replace(Ct,"")},makeArray:function(t,e){var n=e||[];return null!=t&&(r(Object(t))?bt.merge(n,"string"==typeof t?[t]:t):ct.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:ht.call(e,t,n)},merge:function(t,e){for(var n=+e.length,i=0,r=t.length;i<n;i++)t[r++]=e[i];return t.length=r,t},grep:function(t,e,n){for(var i,r=[],s=0,o=t.length,a=!n;s<o;s++)i=!e(t[s],s),i!==a&&r.push(t[s]);return r},map:function(t,e,n){var i,s,o=0,a=[];if(r(t))for(i=t.length;o<i;o++)s=e(t[o],o,n),null!=s&&a.push(s);else for(o in t)s=e(t[o],o,n),null!=s&&a.push(s);return ut.apply([],a)},guid:1,support:vt}),"function"==typeof Symbol&&(bt.fn[Symbol.iterator]=st[Symbol.iterator]),bt.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){pt["[object "+e+"]"]=e.toLowerCase()});var Tt=function(t){function e(t,e,n,i){var r,s,o,a,l,u,c,p=e&&e.ownerDocument,f=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==f&&9!==f&&11!==f)return n;if(!i&&((e?e.ownerDocument||e:I)!==L&&N(e),e=e||L,H)){if(11!==f&&(l=vt.exec(t)))if(r=l[1]){if(9===f){if(!(o=e.getElementById(r)))return n;if(o.id===r)return n.push(o),n}else if(p&&(o=p.getElementById(r))&&M(e,o)&&o.id===r)return n.push(o),n}else{if(l[2])return J.apply(n,e.getElementsByTagName(t)),n;if((r=l[3])&&b.getElementsByClassName&&e.getElementsByClassName)return J.apply(n,e.getElementsByClassName(r)),n}if(b.qsa&&!X[t+" "]&&(!z||!z.test(t))){if(1!==f)p=e,c=t;else if("object"!==e.nodeName.toLowerCase()){for((a=e.getAttribute("id"))?a=a.replace(_t,bt):e.setAttribute("id",a=R),u=D(t),s=u.length;s--;)u[s]="#"+a+" "+d(u[s]);c=u.join(","),p=yt.test(t)&&h(e.parentNode)||e}if(c)try{return J.apply(n,p.querySelectorAll(c)),n}catch(g){}finally{a===R&&e.removeAttribute("id")}}}return k(t.replace(at,"$1"),e,n,i)}function n(){function t(n,i){return e.push(n+" ")>C.cacheLength&&delete t[e.shift()],t[n+" "]=i}var e=[];return t}function i(t){return t[R]=!0,t}function r(t){var e=L.createElement("fieldset");try{return!!t(e)}catch(n){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function s(t,e){for(var n=t.split("|"),i=n.length;i--;)C.attrHandle[n[i]]=e}function o(t,e){var n=e&&t,i=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function a(t){return function(e){var n=e.nodeName.toLowerCase();return"input"===n&&e.type===t}}function l(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function u(t){return function(e){return"form"in e?e.parentNode&&e.disabled===!1?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&Tt(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function c(t){return i(function(e){return e=+e,i(function(n,i){for(var r,s=t([],n.length,e),o=s.length;o--;)n[r=s[o]]&&(n[r]=!(i[r]=n[r]))})})}function h(t){return t&&"undefined"!=typeof t.getElementsByTagName&&t}function p(){}function d(t){for(var e=0,n=t.length,i="";e<n;e++)i+=t[e].value;return i}function f(t,e,n){var i=e.dir,r=e.next,s=r||i,o=n&&"parentNode"===s,a=B++;return e.first?function(e,n,r){for(;e=e[i];)if(1===e.nodeType||o)return t(e,n,r);return!1}:function(e,n,l){var u,c,h,p=[W,a];if(l){for(;e=e[i];)if((1===e.nodeType||o)&&t(e,n,l))return!0}else for(;e=e[i];)if(1===e.nodeType||o)if(h=e[R]||(e[R]={}),c=h[e.uniqueID]||(h[e.uniqueID]={}),r&&r===e.nodeName.toLowerCase())e=e[i]||e;else{if((u=c[s])&&u[0]===W&&u[1]===a)return p[2]=u[2];if(c[s]=p,p[2]=t(e,n,l))return!0}return!1}}function g(t){return t.length>1?function(e,n,i){for(var r=t.length;r--;)if(!t[r](e,n,i))return!1;return!0}:t[0]}function m(t,n,i){for(var r=0,s=n.length;r<s;r++)e(t,n[r],i);return i}function v(t,e,n,i,r){for(var s,o=[],a=0,l=t.length,u=null!=e;a<l;a++)(s=t[a])&&(n&&!n(s,i,r)||(o.push(s),u&&e.push(a)));return o}function y(t,e,n,r,s,o){return r&&!r[R]&&(r=y(r)),s&&!s[R]&&(s=y(s,o)),i(function(i,o,a,l){var u,c,h,p=[],d=[],f=o.length,g=i||m(e||"*",a.nodeType?[a]:a,[]),y=!t||!i&&e?g:v(g,p,t,a,l),x=n?s||(i?t:f||r)?[]:o:y;if(n&&n(y,x,a,l),r)for(u=v(x,d),r(u,[],a,l),c=u.length;c--;)(h=u[c])&&(x[d[c]]=!(y[d[c]]=h));if(i){if(s||t){if(s){for(u=[],c=x.length;c--;)(h=x[c])&&u.push(y[c]=h);s(null,x=[],u,l)}for(c=x.length;c--;)(h=x[c])&&(u=s?tt(i,h):p[c])>-1&&(i[u]=!(o[u]=h))}}else x=v(x===o?x.splice(f,x.length):x),s?s(null,o,x,l):J.apply(o,x)})}function x(t){for(var e,n,i,r=t.length,s=C.relative[t[0].type],o=s||C.relative[" "],a=s?1:0,l=f(function(t){return t===e},o,!0),u=f(function(t){return tt(e,t)>-1},o,!0),c=[function(t,n,i){var r=!s&&(i||n!==j)||((e=n).nodeType?l(t,n,i):u(t,n,i));return e=null,r}];a<r;a++)if(n=C.relative[t[a].type])c=[f(g(c),n)];else{if(n=C.filter[t[a].type].apply(null,t[a].matches),n[R]){for(i=++a;i<r&&!C.relative[t[i].type];i++);return y(a>1&&g(c),a>1&&d(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(at,"$1"),n,a<i&&x(t.slice(a,i)),i<r&&x(t=t.slice(i)),i<r&&d(t))}c.push(n)}return g(c)}function w(t,n){var r=n.length>0,s=t.length>0,o=function(i,o,a,l,u){var c,h,p,d=0,f="0",g=i&&[],m=[],y=j,x=i||s&&C.find.TAG("*",u),w=W+=null==y?1:Math.random()||.1,_=x.length;for(u&&(j=o===L||o||u);f!==_&&null!=(c=x[f]);f++){if(s&&c){for(h=0,o||c.ownerDocument===L||(N(c),a=!H);p=t[h++];)if(p(c,o||L,a)){l.push(c);break}u&&(W=w)}r&&((c=!p&&c)&&d--,i&&g.push(c))}if(d+=f,r&&f!==d){for(h=0;p=n[h++];)p(g,m,o,a);if(i){if(d>0)for(;f--;)g[f]||m[f]||(m[f]=Y.call(l));m=v(m)}J.apply(l,m),u&&!i&&m.length>0&&d+n.length>1&&e.uniqueSort(l)}return u&&(W=w,j=y),g};return r?i(o):o}var _,b,C,T,E,D,S,k,j,$,A,N,L,q,H,z,P,O,M,R="sizzle"+1*new Date,I=t.document,W=0,B=0,F=n(),U=n(),X=n(),V=function(t,e){return t===e&&(A=!0),0},Q={}.hasOwnProperty,G=[],Y=G.pop,Z=G.push,J=G.push,K=G.slice,tt=function(t,e){for(var n=0,i=t.length;n<i;n++)if(t[n]===e)return n;return-1},et="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",nt="[\\x20\\t\\r\\n\\f]",it="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",rt="\\["+nt+"*("+it+")(?:"+nt+"*([*^$|!~]?=)"+nt+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+it+"))|)"+nt+"*\\]",st=":("+it+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+rt+")*)|.*)\\)|)",ot=new RegExp(nt+"+","g"),at=new RegExp("^"+nt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+nt+"+$","g"),lt=new RegExp("^"+nt+"*,"+nt+"*"),ut=new RegExp("^"+nt+"*([>+~]|"+nt+")"+nt+"*"),ct=new RegExp("="+nt+"*([^\\]'\"]*?)"+nt+"*\\]","g"),ht=new RegExp(st),pt=new RegExp("^"+it+"$"),dt={ID:new RegExp("^#("+it+")"),CLASS:new RegExp("^\\.("+it+")"),TAG:new RegExp("^("+it+"|[*])"),ATTR:new RegExp("^"+rt),PSEUDO:new RegExp("^"+st),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+nt+"*(even|odd|(([+-]|)(\\d*)n|)"+nt+"*(?:([+-]|)"+nt+"*(\\d+)|))"+nt+"*\\)|)","i"),bool:new RegExp("^(?:"+et+")$","i"),needsContext:new RegExp("^"+nt+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+nt+"*((?:-\\d)?\\d*)"+nt+"*\\)|)(?=[^-]|$)","i")},ft=/^(?:input|select|textarea|button)$/i,gt=/^h\d$/i,mt=/^[^{]+\{\s*\[native \w/,vt=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,yt=/[+~]/,xt=new RegExp("\\\\([\\da-f]{1,6}"+nt+"?|("+nt+")|.)","ig"),wt=function(t,e,n){var i="0x"+e-65536;return i!==i||n?e:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},_t=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,bt=function(t,e){return e?"\0"===t?"�":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},Ct=function(){N()},Tt=f(function(t){return t.disabled===!0&&("form"in t||"label"in t)},{dir:"parentNode",next:"legend"});try{J.apply(G=K.call(I.childNodes),I.childNodes),G[I.childNodes.length].nodeType}catch(Et){J={apply:G.length?function(t,e){Z.apply(t,K.call(e))}:function(t,e){for(var n=t.length,i=0;t[n++]=e[i++];);t.length=n-1}}}b=e.support={},E=e.isXML=function(t){var e=t&&(t.ownerDocument||t).documentElement;return!!e&&"HTML"!==e.nodeName},N=e.setDocument=function(t){var e,n,i=t?t.ownerDocument||t:I;return i!==L&&9===i.nodeType&&i.documentElement?(L=i,q=L.documentElement,H=!E(L),I!==L&&(n=L.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Ct,!1):n.attachEvent&&n.attachEvent("onunload",Ct)),b.attributes=r(function(t){return t.className="i",!t.getAttribute("className")}),b.getElementsByTagName=r(function(t){return t.appendChild(L.createComment("")),!t.getElementsByTagName("*").length}),b.getElementsByClassName=mt.test(L.getElementsByClassName),b.getById=r(function(t){return q.appendChild(t).id=R,!L.getElementsByName||!L.getElementsByName(R).length}),b.getById?(C.filter.ID=function(t){var e=t.replace(xt,wt);return function(t){return t.getAttribute("id")===e}},C.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&H){var n=e.getElementById(t);return n?[n]:[]}}):(C.filter.ID=function(t){var e=t.replace(xt,wt);return function(t){var n="undefined"!=typeof t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},C.find.ID=function(t,e){if("undefined"!=typeof e.getElementById&&H){var n,i,r,s=e.getElementById(t);if(s){if(n=s.getAttributeNode("id"),n&&n.value===t)return[s];for(r=e.getElementsByName(t),i=0;s=r[i++];)if(n=s.getAttributeNode("id"),n&&n.value===t)return[s]}return[]}}),C.find.TAG=b.getElementsByTagName?function(t,e){return"undefined"!=typeof e.getElementsByTagName?e.getElementsByTagName(t):b.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,i=[],r=0,s=e.getElementsByTagName(t);if("*"===t){for(;n=s[r++];)1===n.nodeType&&i.push(n);return i}return s},C.find.CLASS=b.getElementsByClassName&&function(t,e){if("undefined"!=typeof e.getElementsByClassName&&H)return e.getElementsByClassName(t)},P=[],z=[],(b.qsa=mt.test(L.querySelectorAll))&&(r(function(t){q.appendChild(t).innerHTML="<a id='"+R+"'></a><select id='"+R+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&z.push("[*^$]="+nt+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||z.push("\\["+nt+"*(?:value|"+et+")"),t.querySelectorAll("[id~="+R+"-]").length||z.push("~="),t.querySelectorAll(":checked").length||z.push(":checked"),t.querySelectorAll("a#"+R+"+*").length||z.push(".#.+[+~]")}),r(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=L.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&z.push("name"+nt+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&z.push(":enabled",":disabled"),q.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&z.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),z.push(",.*:")})),(b.matchesSelector=mt.test(O=q.matches||q.webkitMatchesSelector||q.mozMatchesSelector||q.oMatchesSelector||q.msMatchesSelector))&&r(function(t){b.disconnectedMatch=O.call(t,"*"),O.call(t,"[s!='']:x"),P.push("!=",st)}),z=z.length&&new RegExp(z.join("|")),P=P.length&&new RegExp(P.join("|")),e=mt.test(q.compareDocumentPosition),M=e||mt.test(q.contains)?function(t,e){var n=9===t.nodeType?t.documentElement:t,i=e&&e.parentNode;return t===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):t.compareDocumentPosition&&16&t.compareDocumentPosition(i)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},V=e?function(t,e){if(t===e)return A=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n?n:(n=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1,1&n||!b.sortDetached&&e.compareDocumentPosition(t)===n?t===L||t.ownerDocument===I&&M(I,t)?-1:e===L||e.ownerDocument===I&&M(I,e)?1:$?tt($,t)-tt($,e):0:4&n?-1:1)}:function(t,e){if(t===e)return A=!0,0;var n,i=0,r=t.parentNode,s=e.parentNode,a=[t],l=[e];if(!r||!s)return t===L?-1:e===L?1:r?-1:s?1:$?tt($,t)-tt($,e):0;if(r===s)return o(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)l.unshift(n);for(;a[i]===l[i];)i++;return i?o(a[i],l[i]):a[i]===I?-1:l[i]===I?1:0},L):L},e.matches=function(t,n){return e(t,null,null,n)},e.matchesSelector=function(t,n){if((t.ownerDocument||t)!==L&&N(t),n=n.replace(ct,"='$1']"),b.matchesSelector&&H&&!X[n+" "]&&(!P||!P.test(n))&&(!z||!z.test(n)))try{var i=O.call(t,n);if(i||b.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(r){}return e(n,L,null,[t]).length>0},e.contains=function(t,e){return(t.ownerDocument||t)!==L&&N(t),M(t,e)},e.attr=function(t,e){(t.ownerDocument||t)!==L&&N(t);var n=C.attrHandle[e.toLowerCase()],i=n&&Q.call(C.attrHandle,e.toLowerCase())?n(t,e,!H):void 0;return void 0!==i?i:b.attributes||!H?t.getAttribute(e):(i=t.getAttributeNode(e))&&i.specified?i.value:null},e.escape=function(t){return(t+"").replace(_t,bt)},e.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},e.uniqueSort=function(t){var e,n=[],i=0,r=0;if(A=!b.detectDuplicates,$=!b.sortStable&&t.slice(0),t.sort(V),A){for(;e=t[r++];)e===t[r]&&(i=n.push(r));for(;i--;)t.splice(n[i],1)}return $=null,t},T=e.getText=function(t){var e,n="",i=0,r=t.nodeType;if(r){if(1===r||9===r||11===r){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=T(t)}else if(3===r||4===r)return t.nodeValue}else for(;e=t[i++];)n+=T(e);return n},C=e.selectors={cacheLength:50,createPseudo:i,match:dt,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(xt,wt),t[3]=(t[3]||t[4]||t[5]||"").replace(xt,wt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||e.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&e.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return dt.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&ht.test(n)&&(e=D(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(xt,wt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=F[t+" "];return e||(e=new RegExp("(^|"+nt+")"+t+"("+nt+"|$)"))&&F(t,function(t){return e.test("string"==typeof t.className&&t.className||"undefined"!=typeof t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(r){var s=e.attr(r,t);return null==s?"!="===n:!n||(s+="","="===n?s===i:"!="===n?s!==i:"^="===n?i&&0===s.indexOf(i):"*="===n?i&&s.indexOf(i)>-1:"$="===n?i&&s.slice(-i.length)===i:"~="===n?(" "+s.replace(ot," ")+" ").indexOf(i)>-1:"|="===n&&(s===i||s.slice(0,i.length+1)===i+"-"))}},CHILD:function(t,e,n,i,r){var s="nth"!==t.slice(0,3),o="last"!==t.slice(-4),a="of-type"===e;return 1===i&&0===r?function(t){return!!t.parentNode}:function(e,n,l){var u,c,h,p,d,f,g=s!==o?"nextSibling":"previousSibling",m=e.parentNode,v=a&&e.nodeName.toLowerCase(),y=!l&&!a,x=!1;if(m){if(s){for(;g;){for(p=e;p=p[g];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=g="only"===t&&!f&&"nextSibling"}return!0}if(f=[o?m.firstChild:m.lastChild],o&&y){for(p=m,h=p[R]||(p[R]={}),c=h[p.uniqueID]||(h[p.uniqueID]={}),u=c[t]||[],d=u[0]===W&&u[1],x=d&&u[2],p=d&&m.childNodes[d];p=++d&&p&&p[g]||(x=d=0)||f.pop();)if(1===p.nodeType&&++x&&p===e){c[t]=[W,d,x];break}}else if(y&&(p=e,h=p[R]||(p[R]={}),c=h[p.uniqueID]||(h[p.uniqueID]={}),u=c[t]||[],d=u[0]===W&&u[1],x=d),x===!1)for(;(p=++d&&p&&p[g]||(x=d=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++x||(y&&(h=p[R]||(p[R]={}),c=h[p.uniqueID]||(h[p.uniqueID]={}),c[t]=[W,x]),p!==e)););return x-=r,x===i||x%i===0&&x/i>=0}}},PSEUDO:function(t,n){var r,s=C.pseudos[t]||C.setFilters[t.toLowerCase()]||e.error("unsupported pseudo: "+t);return s[R]?s(n):s.length>1?(r=[t,t,"",n],C.setFilters.hasOwnProperty(t.toLowerCase())?i(function(t,e){for(var i,r=s(t,n),o=r.length;o--;)i=tt(t,r[o]),t[i]=!(e[i]=r[o])}):function(t){return s(t,0,r)}):s}},pseudos:{not:i(function(t){var e=[],n=[],r=S(t.replace(at,"$1"));return r[R]?i(function(t,e,n,i){for(var s,o=r(t,null,i,[]),a=t.length;a--;)(s=o[a])&&(t[a]=!(e[a]=s))}):function(t,i,s){return e[0]=t,r(e,null,s,n),e[0]=null,!n.pop()}}),has:i(function(t){return function(n){return e(t,n).length>0}}),contains:i(function(t){return t=t.replace(xt,wt),function(e){return(e.textContent||e.innerText||T(e)).indexOf(t)>-1}}),lang:i(function(t){return pt.test(t||"")||e.error("unsupported lang: "+t),t=t.replace(xt,wt).toLowerCase(),function(e){var n;do if(n=H?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return n=n.toLowerCase(),n===t||0===n.indexOf(t+"-");while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===q},focus:function(t){
return t===L.activeElement&&(!L.hasFocus||L.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:u(!1),disabled:u(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,t.selected===!0},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!C.pseudos.empty(t)},header:function(t){return gt.test(t.nodeName)},input:function(t){return ft.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:c(function(){return[0]}),last:c(function(t,e){return[e-1]}),eq:c(function(t,e,n){return[n<0?n+e:n]}),even:c(function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t}),odd:c(function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t}),lt:c(function(t,e,n){for(var i=n<0?n+e:n;--i>=0;)t.push(i);return t}),gt:c(function(t,e,n){for(var i=n<0?n+e:n;++i<e;)t.push(i);return t})}},C.pseudos.nth=C.pseudos.eq;for(_ in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})C.pseudos[_]=a(_);for(_ in{submit:!0,reset:!0})C.pseudos[_]=l(_);return p.prototype=C.filters=C.pseudos,C.setFilters=new p,D=e.tokenize=function(t,n){var i,r,s,o,a,l,u,c=U[t+" "];if(c)return n?0:c.slice(0);for(a=t,l=[],u=C.preFilter;a;){i&&!(r=lt.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),i=!1,(r=ut.exec(a))&&(i=r.shift(),s.push({value:i,type:r[0].replace(at," ")}),a=a.slice(i.length));for(o in C.filter)!(r=dt[o].exec(a))||u[o]&&!(r=u[o](r))||(i=r.shift(),s.push({value:i,type:o,matches:r}),a=a.slice(i.length));if(!i)break}return n?a.length:a?e.error(t):U(t,l).slice(0)},S=e.compile=function(t,e){var n,i=[],r=[],s=X[t+" "];if(!s){for(e||(e=D(t)),n=e.length;n--;)s=x(e[n]),s[R]?i.push(s):r.push(s);s=X(t,w(r,i)),s.selector=t}return s},k=e.select=function(t,e,n,i){var r,s,o,a,l,u="function"==typeof t&&t,c=!i&&D(t=u.selector||t);if(n=n||[],1===c.length){if(s=c[0]=c[0].slice(0),s.length>2&&"ID"===(o=s[0]).type&&9===e.nodeType&&H&&C.relative[s[1].type]){if(e=(C.find.ID(o.matches[0].replace(xt,wt),e)||[])[0],!e)return n;u&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(r=dt.needsContext.test(t)?0:s.length;r--&&(o=s[r],!C.relative[a=o.type]);)if((l=C.find[a])&&(i=l(o.matches[0].replace(xt,wt),yt.test(s[0].type)&&h(e.parentNode)||e))){if(s.splice(r,1),t=i.length&&d(s),!t)return J.apply(n,i),n;break}}return(u||S(t,c))(i,e,!H,n,!e||yt.test(t)&&h(e.parentNode)||e),n},b.sortStable=R.split("").sort(V).join("")===R,b.detectDuplicates=!!A,N(),b.sortDetached=r(function(t){return 1&t.compareDocumentPosition(L.createElement("fieldset"))}),r(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||s("type|href|height|width",function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),b.attributes&&r(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||s("value",function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),r(function(t){return null==t.getAttribute("disabled")})||s(et,function(t,e,n){var i;if(!n)return t[e]===!0?e.toLowerCase():(i=t.getAttributeNode(e))&&i.specified?i.value:null}),e}(t);bt.find=Tt,bt.expr=Tt.selectors,bt.expr[":"]=bt.expr.pseudos,bt.uniqueSort=bt.unique=Tt.uniqueSort,bt.text=Tt.getText,bt.isXMLDoc=Tt.isXML,bt.contains=Tt.contains,bt.escapeSelector=Tt.escape;var Et=function(t,e,n){for(var i=[],r=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(r&&bt(t).is(n))break;i.push(t)}return i},Dt=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},St=bt.expr.match.needsContext,kt=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;bt.filter=function(t,e,n){var i=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===i.nodeType?bt.find.matchesSelector(i,t)?[i]:[]:bt.find.matches(t,bt.grep(e,function(t){return 1===t.nodeType}))},bt.fn.extend({find:function(t){var e,n,i=this.length,r=this;if("string"!=typeof t)return this.pushStack(bt(t).filter(function(){for(e=0;e<i;e++)if(bt.contains(r[e],this))return!0}));for(n=this.pushStack([]),e=0;e<i;e++)bt.find(t,r[e],n);return i>1?bt.uniqueSort(n):n},filter:function(t){return this.pushStack(o(this,t||[],!1))},not:function(t){return this.pushStack(o(this,t||[],!0))},is:function(t){return!!o(this,"string"==typeof t&&St.test(t)?bt(t):t||[],!1).length}});var jt,$t=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,At=bt.fn.init=function(t,e,n){var i,r;if(!t)return this;if(n=n||jt,"string"==typeof t){if(i="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:$t.exec(t),!i||!i[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(i[1]){if(e=e instanceof bt?e[0]:e,bt.merge(this,bt.parseHTML(i[1],e&&e.nodeType?e.ownerDocument||e:ot,!0)),kt.test(i[1])&&bt.isPlainObject(e))for(i in e)yt(this[i])?this[i](e[i]):this.attr(i,e[i]);return this}return r=ot.getElementById(i[2]),r&&(this[0]=r,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):yt(t)?void 0!==n.ready?n.ready(t):t(bt):bt.makeArray(t,this)};At.prototype=bt.fn,jt=bt(ot);var Nt=/^(?:parents|prev(?:Until|All))/,Lt={children:!0,contents:!0,next:!0,prev:!0};bt.fn.extend({has:function(t){var e=bt(t,this),n=e.length;return this.filter(function(){for(var t=0;t<n;t++)if(bt.contains(this,e[t]))return!0})},closest:function(t,e){var n,i=0,r=this.length,s=[],o="string"!=typeof t&&bt(t);if(!St.test(t))for(;i<r;i++)for(n=this[i];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&bt.find.matchesSelector(n,t))){s.push(n);break}return this.pushStack(s.length>1?bt.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?ht.call(bt(t),this[0]):ht.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(bt.uniqueSort(bt.merge(this.get(),bt(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),bt.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return Et(t,"parentNode")},parentsUntil:function(t,e,n){return Et(t,"parentNode",n)},next:function(t){return a(t,"nextSibling")},prev:function(t){return a(t,"previousSibling")},nextAll:function(t){return Et(t,"nextSibling")},prevAll:function(t){return Et(t,"previousSibling")},nextUntil:function(t,e,n){return Et(t,"nextSibling",n)},prevUntil:function(t,e,n){return Et(t,"previousSibling",n)},siblings:function(t){return Dt((t.parentNode||{}).firstChild,t)},children:function(t){return Dt(t.firstChild)},contents:function(t){return s(t,"iframe")?t.contentDocument:(s(t,"template")&&(t=t.content||t),bt.merge([],t.childNodes))}},function(t,e){bt.fn[t]=function(n,i){var r=bt.map(this,e,n);return"Until"!==t.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=bt.filter(i,r)),this.length>1&&(Lt[t]||bt.uniqueSort(r),Nt.test(t)&&r.reverse()),this.pushStack(r)}});var qt=/[^\x20\t\r\n\f]+/g;bt.Callbacks=function(t){t="string"==typeof t?l(t):bt.extend({},t);var e,n,r,s,o=[],a=[],u=-1,c=function(){for(s=s||t.once,r=e=!0;a.length;u=-1)for(n=a.shift();++u<o.length;)o[u].apply(n[0],n[1])===!1&&t.stopOnFalse&&(u=o.length,n=!1);t.memory||(n=!1),e=!1,s&&(o=n?[]:"")},h={add:function(){return o&&(n&&!e&&(u=o.length-1,a.push(n)),function r(e){bt.each(e,function(e,n){yt(n)?t.unique&&h.has(n)||o.push(n):n&&n.length&&"string"!==i(n)&&r(n)})}(arguments),n&&!e&&c()),this},remove:function(){return bt.each(arguments,function(t,e){for(var n;(n=bt.inArray(e,o,n))>-1;)o.splice(n,1),n<=u&&u--}),this},has:function(t){return t?bt.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return s=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return s=a=[],n||e||(o=n=""),this},locked:function(){return!!s},fireWith:function(t,n){return s||(n=n||[],n=[t,n.slice?n.slice():n],a.push(n),e||c()),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!r}};return h},bt.extend({Deferred:function(e){var n=[["notify","progress",bt.Callbacks("memory"),bt.Callbacks("memory"),2],["resolve","done",bt.Callbacks("once memory"),bt.Callbacks("once memory"),0,"resolved"],["reject","fail",bt.Callbacks("once memory"),bt.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},"catch":function(t){return r.then(null,t)},pipe:function(){var t=arguments;return bt.Deferred(function(e){bt.each(n,function(n,i){var r=yt(t[i[4]])&&t[i[4]];s[i[1]](function(){var t=r&&r.apply(this,arguments);t&&yt(t.promise)?t.promise().progress(e.notify).done(e.resolve).fail(e.reject):e[i[0]+"With"](this,r?[t]:arguments)})}),t=null}).promise()},then:function(e,i,r){function s(e,n,i,r){return function(){var a=this,l=arguments,h=function(){var t,h;if(!(e<o)){if(t=i.apply(a,l),t===n.promise())throw new TypeError("Thenable self-resolution");h=t&&("object"==typeof t||"function"==typeof t)&&t.then,yt(h)?r?h.call(t,s(o,n,u,r),s(o,n,c,r)):(o++,h.call(t,s(o,n,u,r),s(o,n,c,r),s(o,n,u,n.notifyWith))):(i!==u&&(a=void 0,l=[t]),(r||n.resolveWith)(a,l))}},p=r?h:function(){try{h()}catch(t){bt.Deferred.exceptionHook&&bt.Deferred.exceptionHook(t,p.stackTrace),e+1>=o&&(i!==c&&(a=void 0,l=[t]),n.rejectWith(a,l))}};e?p():(bt.Deferred.getStackHook&&(p.stackTrace=bt.Deferred.getStackHook()),t.setTimeout(p))}}var o=0;return bt.Deferred(function(t){n[0][3].add(s(0,t,yt(r)?r:u,t.notifyWith)),n[1][3].add(s(0,t,yt(e)?e:u)),n[2][3].add(s(0,t,yt(i)?i:c))}).promise()},promise:function(t){return null!=t?bt.extend(t,r):r}},s={};return bt.each(n,function(t,e){var o=e[2],a=e[5];r[e[1]]=o.add,a&&o.add(function(){i=a},n[3-t][2].disable,n[3-t][3].disable,n[0][2].lock,n[0][3].lock),o.add(e[3].fire),s[e[0]]=function(){return s[e[0]+"With"](this===s?void 0:this,arguments),this},s[e[0]+"With"]=o.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(t){var e=arguments.length,n=e,i=Array(n),r=lt.call(arguments),s=bt.Deferred(),o=function(t){return function(n){i[t]=this,r[t]=arguments.length>1?lt.call(arguments):n,--e||s.resolveWith(i,r)}};if(e<=1&&(h(t,s.done(o(n)).resolve,s.reject,!e),"pending"===s.state()||yt(r[n]&&r[n].then)))return s.then();for(;n--;)h(r[n],o(n),s.reject);return s.promise()}});var Ht=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;bt.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&Ht.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},bt.readyException=function(e){t.setTimeout(function(){throw e})};var zt=bt.Deferred();bt.fn.ready=function(t){return zt.then(t)["catch"](function(t){bt.readyException(t)}),this},bt.extend({isReady:!1,readyWait:1,ready:function(t){(t===!0?--bt.readyWait:bt.isReady)||(bt.isReady=!0,t!==!0&&--bt.readyWait>0||zt.resolveWith(ot,[bt]))}}),bt.ready.then=zt.then,"complete"===ot.readyState||"loading"!==ot.readyState&&!ot.documentElement.doScroll?t.setTimeout(bt.ready):(ot.addEventListener("DOMContentLoaded",p),t.addEventListener("load",p));var Pt=function(t,e,n,r,s,o,a){var l=0,u=t.length,c=null==n;if("object"===i(n)){s=!0;for(l in n)Pt(t,e,l,n[l],!0,o,a)}else if(void 0!==r&&(s=!0,yt(r)||(a=!0),c&&(a?(e.call(t,r),e=null):(c=e,e=function(t,e,n){return c.call(bt(t),n)})),e))for(;l<u;l++)e(t[l],n,a?r:r.call(t[l],l,e(t[l],n)));return s?t:c?e.call(t):u?e(t[0],n):o},Ot=/^-ms-/,Mt=/-([a-z])/g,Rt=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};g.uid=1,g.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Rt(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var i,r=this.cache(t);if("string"==typeof e)r[f(e)]=n;else for(i in e)r[f(i)]=e[i];return r},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][f(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,i=t[this.expando];if(void 0!==i){if(void 0!==e){Array.isArray(e)?e=e.map(f):(e=f(e),e=e in i?[e]:e.match(qt)||[]),n=e.length;for(;n--;)delete i[e[n]]}(void 0===e||bt.isEmptyObject(i))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!bt.isEmptyObject(e)}};var It=new g,Wt=new g,Bt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Ft=/[A-Z]/g;bt.extend({hasData:function(t){return Wt.hasData(t)||It.hasData(t)},data:function(t,e,n){return Wt.access(t,e,n)},removeData:function(t,e){Wt.remove(t,e)},_data:function(t,e,n){return It.access(t,e,n)},_removeData:function(t,e){It.remove(t,e)}}),bt.fn.extend({data:function(t,e){var n,i,r,s=this[0],o=s&&s.attributes;if(void 0===t){if(this.length&&(r=Wt.get(s),1===s.nodeType&&!It.get(s,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&(i=o[n].name,0===i.indexOf("data-")&&(i=f(i.slice(5)),v(s,i,r[i])));It.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof t?this.each(function(){Wt.set(this,t)}):Pt(this,function(e){var n;if(s&&void 0===e){if(n=Wt.get(s,t),void 0!==n)return n;if(n=v(s,t),void 0!==n)return n}else this.each(function(){Wt.set(this,t,e)})},null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each(function(){Wt.remove(this,t)})}}),bt.extend({queue:function(t,e,n){var i;if(t)return e=(e||"fx")+"queue",i=It.get(t,e),n&&(!i||Array.isArray(n)?i=It.access(t,e,bt.makeArray(n)):i.push(n)),i||[]},dequeue:function(t,e){e=e||"fx";var n=bt.queue(t,e),i=n.length,r=n.shift(),s=bt._queueHooks(t,e),o=function(){bt.dequeue(t,e)};"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===e&&n.unshift("inprogress"),delete s.stop,r.call(t,o,s)),!i&&s&&s.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return It.get(t,n)||It.access(t,n,{empty:bt.Callbacks("once memory").add(function(){It.remove(t,[e+"queue",n])})})}}),bt.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?bt.queue(this[0],t):void 0===e?this:this.each(function(){var n=bt.queue(this,t,e);bt._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&bt.dequeue(this,t)})},dequeue:function(t){return this.each(function(){bt.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,i=1,r=bt.Deferred(),s=this,o=this.length,a=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";o--;)n=It.get(s[o],t+"queueHooks"),n&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(e)}});var Ut=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,Xt=new RegExp("^(?:([+-])=|)("+Ut+")([a-z%]*)$","i"),Vt=["Top","Right","Bottom","Left"],Qt=function(t,e){return t=e||t,"none"===t.style.display||""===t.style.display&&bt.contains(t.ownerDocument,t)&&"none"===bt.css(t,"display")},Gt=function(t,e,n,i){var r,s,o={};for(s in e)o[s]=t.style[s],t.style[s]=e[s];r=n.apply(t,i||[]);for(s in e)t.style[s]=o[s];return r},Yt={};bt.fn.extend({show:function(){return w(this,!0)},hide:function(){return w(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){Qt(this)?bt(this).show():bt(this).hide()})}});var Zt=/^(?:checkbox|radio)$/i,Jt=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,Kt=/^$|^module$|\/(?:java|ecma)script/i,te={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};te.optgroup=te.option,te.tbody=te.tfoot=te.colgroup=te.caption=te.thead,te.th=te.td;var ee=/<|&#?\w+;/;!function(){var t=ot.createDocumentFragment(),e=t.appendChild(ot.createElement("div")),n=ot.createElement("input");n.setAttribute("type","radio"),n.setAttribute("checked","checked"),n.setAttribute("name","t"),e.appendChild(n),vt.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",vt.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var ne=ot.documentElement,ie=/^key/,re=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,se=/^([^.]*)(?:\.(.+)|)/;bt.event={global:{},add:function(t,e,n,i,r){var s,o,a,l,u,c,h,p,d,f,g,m=It.get(t);if(m)for(n.handler&&(s=n,n=s.handler,r=s.selector),r&&bt.find.matchesSelector(ne,r),n.guid||(n.guid=bt.guid++),(l=m.events)||(l=m.events={}),(o=m.handle)||(o=m.handle=function(e){return"undefined"!=typeof bt&&bt.event.triggered!==e.type?bt.event.dispatch.apply(t,arguments):void 0}),e=(e||"").match(qt)||[""],u=e.length;u--;)a=se.exec(e[u])||[],d=g=a[1],f=(a[2]||"").split(".").sort(),d&&(h=bt.event.special[d]||{},d=(r?h.delegateType:h.bindType)||d,h=bt.event.special[d]||{},c=bt.extend({type:d,origType:g,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&bt.expr.match.needsContext.test(r),namespace:f.join(".")},s),(p=l[d])||(p=l[d]=[],p.delegateCount=0,h.setup&&h.setup.call(t,i,f,o)!==!1||t.addEventListener&&t.addEventListener(d,o)),h.add&&(h.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,c):p.push(c),bt.event.global[d]=!0)},remove:function(t,e,n,i,r){var s,o,a,l,u,c,h,p,d,f,g,m=It.hasData(t)&&It.get(t);if(m&&(l=m.events)){for(e=(e||"").match(qt)||[""],u=e.length;u--;)if(a=se.exec(e[u])||[],d=g=a[1],f=(a[2]||"").split(".").sort(),d){for(h=bt.event.special[d]||{},d=(i?h.delegateType:h.bindType)||d,p=l[d]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=p.length;s--;)c=p[s],!r&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(s,1),c.selector&&p.delegateCount--,h.remove&&h.remove.call(t,c));o&&!p.length&&(h.teardown&&h.teardown.call(t,f,m.handle)!==!1||bt.removeEvent(t,d,m.handle),delete l[d])}else for(d in l)bt.event.remove(t,d+e[u],n,i,!0);bt.isEmptyObject(l)&&It.remove(t,"handle events")}},dispatch:function(t){var e,n,i,r,s,o,a=bt.event.fix(t),l=new Array(arguments.length),u=(It.get(this,"events")||{})[a.type]||[],c=bt.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!c.preDispatch||c.preDispatch.call(this,a)!==!1){for(o=bt.event.handlers.call(this,a,u),e=0;(r=o[e++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,i=((bt.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l),void 0!==i&&(a.result=i)===!1&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(t,e){var n,i,r,s,o,a=[],l=e.delegateCount,u=t.target;if(l&&u.nodeType&&!("click"===t.type&&t.button>=1))for(;u!==this;u=u.parentNode||this)if(1===u.nodeType&&("click"!==t.type||u.disabled!==!0)){for(s=[],o={},n=0;n<l;n++)i=e[n],r=i.selector+" ",void 0===o[r]&&(o[r]=i.needsContext?bt(r,this).index(u)>-1:bt.find(r,this,null,[u]).length),o[r]&&s.push(i);s.length&&a.push({elem:u,handlers:s})}return u=this,l<e.length&&a.push({elem:u,handlers:e.slice(l)}),a},addProp:function(t,e){Object.defineProperty(bt.Event.prototype,t,{enumerable:!0,configurable:!0,get:yt(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[bt.expando]?t:new bt.Event(t)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==D()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===D()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&s(this,"input"))return this.click(),!1},_default:function(t){return s(t.target,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},bt.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},bt.Event=function(t,e){return this instanceof bt.Event?(t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&t.returnValue===!1?T:E,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&bt.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),void(this[bt.expando]=!0)):new bt.Event(t,e)},bt.Event.prototype={constructor:bt.Event,isDefaultPrevented:E,isPropagationStopped:E,isImmediatePropagationStopped:E,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=T,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=T,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=T,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},bt.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,"char":!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&ie.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&re.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},bt.event.addProp),bt.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,e){bt.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,i=this,r=t.relatedTarget,s=t.handleObj;return r&&(r===i||bt.contains(i,r))||(t.type=s.origType,n=s.handler.apply(this,arguments),t.type=e),n}}}),bt.fn.extend({on:function(t,e,n,i){return S(this,t,e,n,i)},one:function(t,e,n,i){return S(this,t,e,n,i,1)},off:function(t,e,n){var i,r;if(t&&t.preventDefault&&t.handleObj)return i=t.handleObj,bt(t.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof t){for(r in t)this.off(r,e,t[r]);return this}return e!==!1&&"function"!=typeof e||(n=e,e=void 0),n===!1&&(n=E),this.each(function(){bt.event.remove(this,t,n,e)})}});var oe=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,ae=/<script|<style|<link/i,le=/checked\s*(?:[^=]|=\s*.checked.)/i,ue=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;bt.extend({htmlPrefilter:function(t){return t.replace(oe,"<$1></$2>")},clone:function(t,e,n){var i,r,s,o,a=t.cloneNode(!0),l=bt.contains(t.ownerDocument,t);if(!(vt.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||bt.isXMLDoc(t)))for(o=_(a),s=_(t),i=0,r=s.length;i<r;i++)N(s[i],o[i]);if(e)if(n)for(s=s||_(t),o=o||_(a),i=0,r=s.length;i<r;i++)A(s[i],o[i]);else A(t,a);return o=_(a,"script"),o.length>0&&b(o,!l&&_(t,"script")),a},cleanData:function(t){for(var e,n,i,r=bt.event.special,s=0;void 0!==(n=t[s]);s++)if(Rt(n)){if(e=n[It.expando]){if(e.events)for(i in e.events)r[i]?bt.event.remove(n,i):bt.removeEvent(n,i,e.handle);n[It.expando]=void 0}n[Wt.expando]&&(n[Wt.expando]=void 0)}}}),bt.fn.extend({detach:function(t){return q(this,t,!0)},remove:function(t){return q(this,t)},text:function(t){return Pt(this,function(t){return void 0===t?bt.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return L(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=k(this,t);e.appendChild(t)}})},prepend:function(){return L(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=k(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return L(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return L(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(bt.cleanData(_(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return bt.clone(this,t,e)})},html:function(t){return Pt(this,function(t){var e=this[0]||{},n=0,i=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!ae.test(t)&&!te[(Jt.exec(t)||["",""])[1].toLowerCase()]){t=bt.htmlPrefilter(t);try{for(;n<i;n++)e=this[n]||{},1===e.nodeType&&(bt.cleanData(_(e,!1)),e.innerHTML=t);e=0}catch(r){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var t=[];return L(this,arguments,function(e){var n=this.parentNode;bt.inArray(this,t)<0&&(bt.cleanData(_(this)),n&&n.replaceChild(e,this))},t)}}),bt.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,e){bt.fn[t]=function(t){for(var n,i=[],r=bt(t),s=r.length-1,o=0;o<=s;o++)n=o===s?this:this.clone(!0),bt(r[o])[e](n),ct.apply(i,n.get());return this.pushStack(i)}});var ce=new RegExp("^("+Ut+")(?!px)[a-z%]+$","i"),he=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},pe=new RegExp(Vt.join("|"),"i");!function(){function e(){if(u){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ne.appendChild(l).appendChild(u);var e=t.getComputedStyle(u);i="1%"!==e.top,a=12===n(e.marginLeft),u.style.right="60%",o=36===n(e.right),r=36===n(e.width),u.style.position="absolute",s=36===u.offsetWidth||"absolute",ne.removeChild(l),u=null}}function n(t){return Math.round(parseFloat(t))}var i,r,s,o,a,l=ot.createElement("div"),u=ot.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",vt.clearCloneStyle="content-box"===u.style.backgroundClip,bt.extend(vt,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),o},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),a},scrollboxSize:function(){return e(),s}}))}();var de=/^(none|table(?!-c[ea]).+)/,fe=/^--/,ge={position:"absolute",visibility:"hidden",display:"block"},me={letterSpacing:"0",fontWeight:"400"},ve=["Webkit","Moz","ms"],ye=ot.createElement("div").style;bt.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=H(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,i){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var r,s,o,a=f(e),l=fe.test(e),u=t.style;return l||(e=O(a)),o=bt.cssHooks[e]||bt.cssHooks[a],void 0===n?o&&"get"in o&&void 0!==(r=o.get(t,!1,i))?r:u[e]:(s=typeof n,"string"===s&&(r=Xt.exec(n))&&r[1]&&(n=y(t,e,r),s="number"),null!=n&&n===n&&("number"===s&&(n+=r&&r[3]||(bt.cssNumber[a]?"":"px")),vt.clearCloneStyle||""!==n||0!==e.indexOf("background")||(u[e]="inherit"),o&&"set"in o&&void 0===(n=o.set(t,n,i))||(l?u.setProperty(e,n):u[e]=n)),void 0)}},css:function(t,e,n,i){var r,s,o,a=f(e),l=fe.test(e);return l||(e=O(a)),o=bt.cssHooks[e]||bt.cssHooks[a],o&&"get"in o&&(r=o.get(t,!0,n)),void 0===r&&(r=H(t,e,i)),"normal"===r&&e in me&&(r=me[e]),""===n||n?(s=parseFloat(r),n===!0||isFinite(s)?s||0:r):r}}),bt.each(["height","width"],function(t,e){bt.cssHooks[e]={get:function(t,n,i){if(n)return!de.test(bt.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?I(t,e,i):Gt(t,ge,function(){return I(t,e,i)})},set:function(t,n,i){var r,s=he(t),o="border-box"===bt.css(t,"boxSizing",!1,s),a=i&&R(t,e,i,o,s);return o&&vt.scrollboxSize()===s.position&&(a-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(s[e])-R(t,e,"border",!1,s)-.5)),a&&(r=Xt.exec(n))&&"px"!==(r[3]||"px")&&(t.style[e]=n,n=bt.css(t,e)),M(t,n,a)}}}),bt.cssHooks.marginLeft=z(vt.reliableMarginLeft,function(t,e){if(e)return(parseFloat(H(t,"marginLeft"))||t.getBoundingClientRect().left-Gt(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),bt.each({margin:"",padding:"",border:"Width"},function(t,e){bt.cssHooks[t+e]={expand:function(n){for(var i=0,r={},s="string"==typeof n?n.split(" "):[n];i<4;i++)r[t+Vt[i]+e]=s[i]||s[i-2]||s[0];return r}},"margin"!==t&&(bt.cssHooks[t+e].set=M)}),bt.fn.extend({css:function(t,e){return Pt(this,function(t,e,n){var i,r,s={},o=0;if(Array.isArray(e)){for(i=he(t),r=e.length;o<r;o++)s[e[o]]=bt.css(t,e[o],!1,i);return s}return void 0!==n?bt.style(t,e,n):bt.css(t,e)},t,e,arguments.length>1)}}),bt.Tween=W,W.prototype={constructor:W,init:function(t,e,n,i,r,s){this.elem=t,this.prop=n,this.easing=r||bt.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=i,this.unit=s||(bt.cssNumber[n]?"":"px")},cur:function(){var t=W.propHooks[this.prop];return t&&t.get?t.get(this):W.propHooks._default.get(this)},run:function(t){var e,n=W.propHooks[this.prop];return this.options.duration?this.pos=e=bt.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):W.propHooks._default.set(this),this}},W.prototype.init.prototype=W.prototype,W.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=bt.css(t.elem,t.prop,""),e&&"auto"!==e?e:0)},set:function(t){bt.fx.step[t.prop]?bt.fx.step[t.prop](t):1!==t.elem.nodeType||null==t.elem.style[bt.cssProps[t.prop]]&&!bt.cssHooks[t.prop]?t.elem[t.prop]=t.now:bt.style(t.elem,t.prop,t.now+t.unit)}}},W.propHooks.scrollTop=W.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},bt.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},bt.fx=W.prototype.init,bt.fx.step={};var xe,we,_e=/^(?:toggle|show|hide)$/,be=/queueHooks$/;bt.Animation=bt.extend(G,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return y(n.elem,t,Xt.exec(e),n),n}]},tweener:function(t,e){yt(t)?(e=t,t=["*"]):t=t.match(qt);for(var n,i=0,r=t.length;i<r;i++)n=t[i],G.tweeners[n]=G.tweeners[n]||[],G.tweeners[n].unshift(e)},prefilters:[V],prefilter:function(t,e){e?G.prefilters.unshift(t):G.prefilters.push(t)}}),bt.speed=function(t,e,n){var i=t&&"object"==typeof t?bt.extend({},t):{complete:n||!n&&e||yt(t)&&t,duration:t,easing:n&&e||e&&!yt(e)&&e};return bt.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in bt.fx.speeds?i.duration=bt.fx.speeds[i.duration]:i.duration=bt.fx.speeds._default),null!=i.queue&&i.queue!==!0||(i.queue="fx"),i.old=i.complete,i.complete=function(){yt(i.old)&&i.old.call(this),i.queue&&bt.dequeue(this,i.queue)},i},bt.fn.extend({fadeTo:function(t,e,n,i){return this.filter(Qt).css("opacity",0).show().end().animate({opacity:e},t,n,i)},animate:function(t,e,n,i){var r=bt.isEmptyObject(t),s=bt.speed(e,n,i),o=function(){var e=G(this,bt.extend({},t),s);(r||It.get(this,"finish"))&&e.stop(!0)};return o.finish=o,r||s.queue===!1?this.each(o):this.queue(s.queue,o)},stop:function(t,e,n){var i=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&t!==!1&&this.queue(t||"fx",[]),this.each(function(){var e=!0,r=null!=t&&t+"queueHooks",s=bt.timers,o=It.get(this);if(r)o[r]&&o[r].stop&&i(o[r]);else for(r in o)o[r]&&o[r].stop&&be.test(r)&&i(o[r]);for(r=s.length;r--;)s[r].elem!==this||null!=t&&s[r].queue!==t||(s[r].anim.stop(n),
e=!1,s.splice(r,1));!e&&n||bt.dequeue(this,t)})},finish:function(t){return t!==!1&&(t=t||"fx"),this.each(function(){var e,n=It.get(this),i=n[t+"queue"],r=n[t+"queueHooks"],s=bt.timers,o=i?i.length:0;for(n.finish=!0,bt.queue(this,t,[]),r&&r.stop&&r.stop.call(this,!0),e=s.length;e--;)s[e].elem===this&&s[e].queue===t&&(s[e].anim.stop(!0),s.splice(e,1));for(e=0;e<o;e++)i[e]&&i[e].finish&&i[e].finish.call(this);delete n.finish})}}),bt.each(["toggle","show","hide"],function(t,e){var n=bt.fn[e];bt.fn[e]=function(t,i,r){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(U(e,!0),t,i,r)}}),bt.each({slideDown:U("show"),slideUp:U("hide"),slideToggle:U("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,e){bt.fn[t]=function(t,n,i){return this.animate(e,t,n,i)}}),bt.timers=[],bt.fx.tick=function(){var t,e=0,n=bt.timers;for(xe=Date.now();e<n.length;e++)t=n[e],t()||n[e]!==t||n.splice(e--,1);n.length||bt.fx.stop(),xe=void 0},bt.fx.timer=function(t){bt.timers.push(t),bt.fx.start()},bt.fx.interval=13,bt.fx.start=function(){we||(we=!0,B())},bt.fx.stop=function(){we=null},bt.fx.speeds={slow:600,fast:200,_default:400},bt.fn.delay=function(e,n){return e=bt.fx?bt.fx.speeds[e]||e:e,n=n||"fx",this.queue(n,function(n,i){var r=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(r)}})},function(){var t=ot.createElement("input"),e=ot.createElement("select"),n=e.appendChild(ot.createElement("option"));t.type="checkbox",vt.checkOn=""!==t.value,vt.optSelected=n.selected,t=ot.createElement("input"),t.value="t",t.type="radio",vt.radioValue="t"===t.value}();var Ce,Te=bt.expr.attrHandle;bt.fn.extend({attr:function(t,e){return Pt(this,bt.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each(function(){bt.removeAttr(this,t)})}}),bt.extend({attr:function(t,e,n){var i,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return"undefined"==typeof t.getAttribute?bt.prop(t,e,n):(1===s&&bt.isXMLDoc(t)||(r=bt.attrHooks[e.toLowerCase()]||(bt.expr.match.bool.test(e)?Ce:void 0)),void 0!==n?null===n?void bt.removeAttr(t,e):r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:(t.setAttribute(e,n+""),n):r&&"get"in r&&null!==(i=r.get(t,e))?i:(i=bt.find.attr(t,e),null==i?void 0:i))},attrHooks:{type:{set:function(t,e){if(!vt.radioValue&&"radio"===e&&s(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,i=0,r=e&&e.match(qt);if(r&&1===t.nodeType)for(;n=r[i++];)t.removeAttribute(n)}}),Ce={set:function(t,e,n){return e===!1?bt.removeAttr(t,n):t.setAttribute(n,n),n}},bt.each(bt.expr.match.bool.source.match(/\w+/g),function(t,e){var n=Te[e]||bt.find.attr;Te[e]=function(t,e,i){var r,s,o=e.toLowerCase();return i||(s=Te[o],Te[o]=r,r=null!=n(t,e,i)?o:null,Te[o]=s),r}});var Ee=/^(?:input|select|textarea|button)$/i,De=/^(?:a|area)$/i;bt.fn.extend({prop:function(t,e){return Pt(this,bt.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each(function(){delete this[bt.propFix[t]||t]})}}),bt.extend({prop:function(t,e,n){var i,r,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&bt.isXMLDoc(t)||(e=bt.propFix[e]||e,r=bt.propHooks[e]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(t,n,e))?i:t[e]=n:r&&"get"in r&&null!==(i=r.get(t,e))?i:t[e]},propHooks:{tabIndex:{get:function(t){var e=bt.find.attr(t,"tabindex");return e?parseInt(e,10):Ee.test(t.nodeName)||De.test(t.nodeName)&&t.href?0:-1}}},propFix:{"for":"htmlFor","class":"className"}}),vt.optSelected||(bt.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),bt.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){bt.propFix[this.toLowerCase()]=this}),bt.fn.extend({addClass:function(t){var e,n,i,r,s,o,a,l=0;if(yt(t))return this.each(function(e){bt(this).addClass(t.call(this,e,Z(this)))});if(e=J(t),e.length)for(;n=this[l++];)if(r=Z(n),i=1===n.nodeType&&" "+Y(r)+" "){for(o=0;s=e[o++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");a=Y(i),r!==a&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,r,s,o,a,l=0;if(yt(t))return this.each(function(e){bt(this).removeClass(t.call(this,e,Z(this)))});if(!arguments.length)return this.attr("class","");if(e=J(t),e.length)for(;n=this[l++];)if(r=Z(n),i=1===n.nodeType&&" "+Y(r)+" "){for(o=0;s=e[o++];)for(;i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");a=Y(i),r!==a&&n.setAttribute("class",a)}return this},toggleClass:function(t,e){var n=typeof t,i="string"===n||Array.isArray(t);return"boolean"==typeof e&&i?e?this.addClass(t):this.removeClass(t):yt(t)?this.each(function(n){bt(this).toggleClass(t.call(this,n,Z(this),e),e)}):this.each(function(){var e,r,s,o;if(i)for(r=0,s=bt(this),o=J(t);e=o[r++];)s.hasClass(e)?s.removeClass(e):s.addClass(e);else void 0!==t&&"boolean"!==n||(e=Z(this),e&&It.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||t===!1?"":It.get(this,"__className__")||""))})},hasClass:function(t){var e,n,i=0;for(e=" "+t+" ";n=this[i++];)if(1===n.nodeType&&(" "+Y(Z(n))+" ").indexOf(e)>-1)return!0;return!1}});var Se=/\r/g;bt.fn.extend({val:function(t){var e,n,i,r=this[0];{if(arguments.length)return i=yt(t),this.each(function(n){var r;1===this.nodeType&&(r=i?t.call(this,n,bt(this).val()):t,null==r?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=bt.map(r,function(t){return null==t?"":t+""})),e=bt.valHooks[this.type]||bt.valHooks[this.nodeName.toLowerCase()],e&&"set"in e&&void 0!==e.set(this,r,"value")||(this.value=r))});if(r)return e=bt.valHooks[r.type]||bt.valHooks[r.nodeName.toLowerCase()],e&&"get"in e&&void 0!==(n=e.get(r,"value"))?n:(n=r.value,"string"==typeof n?n.replace(Se,""):null==n?"":n)}}}),bt.extend({valHooks:{option:{get:function(t){var e=bt.find.attr(t,"value");return null!=e?e:Y(bt.text(t))}},select:{get:function(t){var e,n,i,r=t.options,o=t.selectedIndex,a="select-one"===t.type,l=a?null:[],u=a?o+1:r.length;for(i=o<0?u:a?o:0;i<u;i++)if(n=r[i],(n.selected||i===o)&&!n.disabled&&(!n.parentNode.disabled||!s(n.parentNode,"optgroup"))){if(e=bt(n).val(),a)return e;l.push(e)}return l},set:function(t,e){for(var n,i,r=t.options,s=bt.makeArray(e),o=r.length;o--;)i=r[o],(i.selected=bt.inArray(bt.valHooks.option.get(i),s)>-1)&&(n=!0);return n||(t.selectedIndex=-1),s}}}}),bt.each(["radio","checkbox"],function(){bt.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=bt.inArray(bt(t).val(),e)>-1}},vt.checkOn||(bt.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),vt.focusin="onfocusin"in t;var ke=/^(?:focusinfocus|focusoutblur)$/,je=function(t){t.stopPropagation()};bt.extend(bt.event,{trigger:function(e,n,i,r){var s,o,a,l,u,c,h,p,d=[i||ot],f=ft.call(e,"type")?e.type:e,g=ft.call(e,"namespace")?e.namespace.split("."):[];if(o=p=a=i=i||ot,3!==i.nodeType&&8!==i.nodeType&&!ke.test(f+bt.event.triggered)&&(f.indexOf(".")>-1&&(g=f.split("."),f=g.shift(),g.sort()),u=f.indexOf(":")<0&&"on"+f,e=e[bt.expando]?e:new bt.Event(f,"object"==typeof e&&e),e.isTrigger=r?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),n=null==n?[e]:bt.makeArray(n,[e]),h=bt.event.special[f]||{},r||!h.trigger||h.trigger.apply(i,n)!==!1)){if(!r&&!h.noBubble&&!xt(i)){for(l=h.delegateType||f,ke.test(l+f)||(o=o.parentNode);o;o=o.parentNode)d.push(o),a=o;a===(i.ownerDocument||ot)&&d.push(a.defaultView||a.parentWindow||t)}for(s=0;(o=d[s++])&&!e.isPropagationStopped();)p=o,e.type=s>1?l:h.bindType||f,c=(It.get(o,"events")||{})[e.type]&&It.get(o,"handle"),c&&c.apply(o,n),c=u&&o[u],c&&c.apply&&Rt(o)&&(e.result=c.apply(o,n),e.result===!1&&e.preventDefault());return e.type=f,r||e.isDefaultPrevented()||h._default&&h._default.apply(d.pop(),n)!==!1||!Rt(i)||u&&yt(i[f])&&!xt(i)&&(a=i[u],a&&(i[u]=null),bt.event.triggered=f,e.isPropagationStopped()&&p.addEventListener(f,je),i[f](),e.isPropagationStopped()&&p.removeEventListener(f,je),bt.event.triggered=void 0,a&&(i[u]=a)),e.result}},simulate:function(t,e,n){var i=bt.extend(new bt.Event,n,{type:t,isSimulated:!0});bt.event.trigger(i,null,e)}}),bt.fn.extend({trigger:function(t,e){return this.each(function(){bt.event.trigger(t,e,this)})},triggerHandler:function(t,e){var n=this[0];if(n)return bt.event.trigger(t,e,n,!0)}}),vt.focusin||bt.each({focus:"focusin",blur:"focusout"},function(t,e){var n=function(t){bt.event.simulate(e,t.target,bt.event.fix(t))};bt.event.special[e]={setup:function(){var i=this.ownerDocument||this,r=It.access(i,e);r||i.addEventListener(t,n,!0),It.access(i,e,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=It.access(i,e)-1;r?It.access(i,e,r):(i.removeEventListener(t,n,!0),It.remove(i,e))}}});var $e=t.location,Ae=Date.now(),Ne=/\?/;bt.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(i){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||bt.error("Invalid XML: "+e),n};var Le=/\[\]$/,qe=/\r?\n/g,He=/^(?:submit|button|image|reset|file)$/i,ze=/^(?:input|select|textarea|keygen)/i;bt.param=function(t,e){var n,i=[],r=function(t,e){var n=yt(e)?e():e;i[i.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(t)||t.jquery&&!bt.isPlainObject(t))bt.each(t,function(){r(this.name,this.value)});else for(n in t)K(n,t[n],e,r);return i.join("&")},bt.fn.extend({serialize:function(){return bt.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=bt.prop(this,"elements");return t?bt.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!bt(this).is(":disabled")&&ze.test(this.nodeName)&&!He.test(t)&&(this.checked||!Zt.test(t))}).map(function(t,e){var n=bt(this).val();return null==n?null:Array.isArray(n)?bt.map(n,function(t){return{name:e.name,value:t.replace(qe,"\r\n")}}):{name:e.name,value:n.replace(qe,"\r\n")}}).get()}});var Pe=/%20/g,Oe=/#.*$/,Me=/([?&])_=[^&]*/,Re=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ie=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,We=/^(?:GET|HEAD)$/,Be=/^\/\//,Fe={},Ue={},Xe="*/".concat("*"),Ve=ot.createElement("a");Ve.href=$e.href,bt.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:$e.href,type:"GET",isLocal:Ie.test($e.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Xe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":bt.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?nt(nt(t,bt.ajaxSettings),e):nt(bt.ajaxSettings,t)},ajaxPrefilter:tt(Fe),ajaxTransport:tt(Ue),ajax:function(e,n){function i(e,n,i,a){var u,p,d,w,_,b=n;c||(c=!0,l&&t.clearTimeout(l),r=void 0,o=a||"",C.readyState=e>0?4:0,u=e>=200&&e<300||304===e,i&&(w=it(f,C,i)),w=rt(f,w,C,u),u?(f.ifModified&&(_=C.getResponseHeader("Last-Modified"),_&&(bt.lastModified[s]=_),_=C.getResponseHeader("etag"),_&&(bt.etag[s]=_)),204===e||"HEAD"===f.type?b="nocontent":304===e?b="notmodified":(b=w.state,p=w.data,d=w.error,u=!d)):(d=b,!e&&b||(b="error",e<0&&(e=0))),C.status=e,C.statusText=(n||b)+"",u?v.resolveWith(g,[p,b,C]):v.rejectWith(g,[C,b,d]),C.statusCode(x),x=void 0,h&&m.trigger(u?"ajaxSuccess":"ajaxError",[C,f,u?p:d]),y.fireWith(g,[C,b]),h&&(m.trigger("ajaxComplete",[C,f]),--bt.active||bt.event.trigger("ajaxStop")))}"object"==typeof e&&(n=e,e=void 0),n=n||{};var r,s,o,a,l,u,c,h,p,d,f=bt.ajaxSetup({},n),g=f.context||f,m=f.context&&(g.nodeType||g.jquery)?bt(g):bt.event,v=bt.Deferred(),y=bt.Callbacks("once memory"),x=f.statusCode||{},w={},_={},b="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(c){if(!a)for(a={};e=Re.exec(o);)a[e[1].toLowerCase()]=e[2];e=a[t.toLowerCase()]}return null==e?null:e},getAllResponseHeaders:function(){return c?o:null},setRequestHeader:function(t,e){return null==c&&(t=_[t.toLowerCase()]=_[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==c&&(f.mimeType=t),this},statusCode:function(t){var e;if(t)if(c)C.always(t[C.status]);else for(e in t)x[e]=[x[e],t[e]];return this},abort:function(t){var e=t||b;return r&&r.abort(e),i(0,e),this}};if(v.promise(C),f.url=((e||f.url||$e.href)+"").replace(Be,$e.protocol+"//"),f.type=n.method||n.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(qt)||[""],null==f.crossDomain){u=ot.createElement("a");try{u.href=f.url,u.href=u.href,f.crossDomain=Ve.protocol+"//"+Ve.host!=u.protocol+"//"+u.host}catch(T){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=bt.param(f.data,f.traditional)),et(Fe,f,n,C),c)return C;h=bt.event&&f.global,h&&0===bt.active++&&bt.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!We.test(f.type),s=f.url.replace(Oe,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Pe,"+")):(d=f.url.slice(s.length),f.data&&(f.processData||"string"==typeof f.data)&&(s+=(Ne.test(s)?"&":"?")+f.data,delete f.data),f.cache===!1&&(s=s.replace(Me,"$1"),d=(Ne.test(s)?"&":"?")+"_="+Ae++ +d),f.url=s+d),f.ifModified&&(bt.lastModified[s]&&C.setRequestHeader("If-Modified-Since",bt.lastModified[s]),bt.etag[s]&&C.setRequestHeader("If-None-Match",bt.etag[s])),(f.data&&f.hasContent&&f.contentType!==!1||n.contentType)&&C.setRequestHeader("Content-Type",f.contentType),C.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Xe+"; q=0.01":""):f.accepts["*"]);for(p in f.headers)C.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(f.beforeSend.call(g,C,f)===!1||c))return C.abort();if(b="abort",y.add(f.complete),C.done(f.success),C.fail(f.error),r=et(Ue,f,n,C)){if(C.readyState=1,h&&m.trigger("ajaxSend",[C,f]),c)return C;f.async&&f.timeout>0&&(l=t.setTimeout(function(){C.abort("timeout")},f.timeout));try{c=!1,r.send(w,i)}catch(T){if(c)throw T;i(-1,T)}}else i(-1,"No Transport");return C},getJSON:function(t,e,n){return bt.get(t,e,n,"json")},getScript:function(t,e){return bt.get(t,void 0,e,"script")}}),bt.each(["get","post"],function(t,e){bt[e]=function(t,n,i,r){return yt(n)&&(r=r||i,i=n,n=void 0),bt.ajax(bt.extend({url:t,type:e,dataType:r,data:n,success:i},bt.isPlainObject(t)&&t))}}),bt._evalUrl=function(t){return bt.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,"throws":!0})},bt.fn.extend({wrapAll:function(t){var e;return this[0]&&(yt(t)&&(t=t.call(this[0])),e=bt(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(t){return yt(t)?this.each(function(e){bt(this).wrapInner(t.call(this,e))}):this.each(function(){var e=bt(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)})},wrap:function(t){var e=yt(t);return this.each(function(n){bt(this).wrapAll(e?t.call(this,n):t)})},unwrap:function(t){return this.parent(t).not("body").each(function(){bt(this).replaceWith(this.childNodes)}),this}}),bt.expr.pseudos.hidden=function(t){return!bt.expr.pseudos.visible(t)},bt.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},bt.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var Qe={0:200,1223:204},Ge=bt.ajaxSettings.xhr();vt.cors=!!Ge&&"withCredentials"in Ge,vt.ajax=Ge=!!Ge,bt.ajaxTransport(function(e){var n,i;if(vt.cors||Ge&&!e.crossDomain)return{send:function(r,s){var o,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)a[o]=e.xhrFields[o];e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest");for(o in r)a.setRequestHeader(o,r[o]);n=function(t){return function(){n&&(n=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===t?a.abort():"error"===t?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Qe[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=n(),i=a.onerror=a.ontimeout=n("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&t.setTimeout(function(){n&&i()})},n=n("abort");try{a.send(e.hasContent&&e.data||null)}catch(l){if(n)throw l}},abort:function(){n&&n()}}}),bt.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),bt.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return bt.globalEval(t),t}}}),bt.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),bt.ajaxTransport("script",function(t){if(t.crossDomain){var e,n;return{send:function(i,r){e=bt("<script>").prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&r("error"===t.type?404:200,t.type)}),ot.head.appendChild(e[0])},abort:function(){n&&n()}}}});var Ye=[],Ze=/(=)\?(?=&|$)|\?\?/;bt.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=Ye.pop()||bt.expando+"_"+Ae++;return this[t]=!0,t}}),bt.ajaxPrefilter("json jsonp",function(e,n,i){var r,s,o,a=e.jsonp!==!1&&(Ze.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Ze.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=yt(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Ze,"$1"+r):e.jsonp!==!1&&(e.url+=(Ne.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||bt.error(r+" was not called"),o[0]},e.dataTypes[0]="json",s=t[r],t[r]=function(){o=arguments},i.always(function(){void 0===s?bt(t).removeProp(r):t[r]=s,e[r]&&(e.jsonpCallback=n.jsonpCallback,Ye.push(r)),o&&yt(s)&&s(o[0]),o=s=void 0}),"script"}),vt.createHTMLDocument=function(){var t=ot.implementation.createHTMLDocument("").body;return t.innerHTML="<form></form><form></form>",2===t.childNodes.length}(),bt.parseHTML=function(t,e,n){if("string"!=typeof t)return[];"boolean"==typeof e&&(n=e,e=!1);var i,r,s;return e||(vt.createHTMLDocument?(e=ot.implementation.createHTMLDocument(""),i=e.createElement("base"),i.href=ot.location.href,e.head.appendChild(i)):e=ot),r=kt.exec(t),s=!n&&[],r?[e.createElement(r[1])]:(r=C([t],e,s),s&&s.length&&bt(s).remove(),bt.merge([],r.childNodes))},bt.fn.load=function(t,e,n){var i,r,s,o=this,a=t.indexOf(" ");return a>-1&&(i=Y(t.slice(a)),t=t.slice(0,a)),yt(e)?(n=e,e=void 0):e&&"object"==typeof e&&(r="POST"),o.length>0&&bt.ajax({url:t,type:r||"GET",dataType:"html",data:e}).done(function(t){s=arguments,o.html(i?bt("<div>").append(bt.parseHTML(t)).find(i):t)}).always(n&&function(t,e){o.each(function(){n.apply(this,s||[t.responseText,e,t])})}),this},bt.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){bt.fn[e]=function(t){return this.on(e,t)}}),bt.expr.pseudos.animated=function(t){return bt.grep(bt.timers,function(e){return t===e.elem}).length},bt.offset={setOffset:function(t,e,n){var i,r,s,o,a,l,u,c=bt.css(t,"position"),h=bt(t),p={};"static"===c&&(t.style.position="relative"),a=h.offset(),s=bt.css(t,"top"),l=bt.css(t,"left"),u=("absolute"===c||"fixed"===c)&&(s+l).indexOf("auto")>-1,u?(i=h.position(),o=i.top,r=i.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),yt(e)&&(e=e.call(t,n,bt.extend({},a))),null!=e.top&&(p.top=e.top-a.top+o),null!=e.left&&(p.left=e.left-a.left+r),"using"in e?e.using.call(t,p):h.css(p)}},bt.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){bt.offset.setOffset(this,t,e)});var e,n,i=this[0];if(i)return i.getClientRects().length?(e=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}},position:function(){if(this[0]){var t,e,n,i=this[0],r={top:0,left:0};if("fixed"===bt.css(i,"position"))e=i.getBoundingClientRect();else{for(e=this.offset(),n=i.ownerDocument,t=i.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===bt.css(t,"position");)t=t.parentNode;t&&t!==i&&1===t.nodeType&&(r=bt(t).offset(),r.top+=bt.css(t,"borderTopWidth",!0),r.left+=bt.css(t,"borderLeftWidth",!0))}return{top:e.top-r.top-bt.css(i,"marginTop",!0),left:e.left-r.left-bt.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===bt.css(t,"position");)t=t.offsetParent;return t||ne})}}),bt.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,e){var n="pageYOffset"===e;bt.fn[t]=function(i){return Pt(this,function(t,i,r){var s;return xt(t)?s=t:9===t.nodeType&&(s=t.defaultView),void 0===r?s?s[e]:t[i]:void(s?s.scrollTo(n?s.pageXOffset:r,n?r:s.pageYOffset):t[i]=r)},t,i,arguments.length)}}),bt.each(["top","left"],function(t,e){bt.cssHooks[e]=z(vt.pixelPosition,function(t,n){if(n)return n=H(t,e),ce.test(n)?bt(t).position()[e]+"px":n})}),bt.each({Height:"height",Width:"width"},function(t,e){bt.each({padding:"inner"+t,content:e,"":"outer"+t},function(n,i){bt.fn[i]=function(r,s){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(r===!0||s===!0?"margin":"border");return Pt(this,function(e,n,r){var s;return xt(e)?0===i.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(s=e.documentElement,Math.max(e.body["scroll"+t],s["scroll"+t],e.body["offset"+t],s["offset"+t],s["client"+t])):void 0===r?bt.css(e,n,a):bt.style(e,n,r,a)},e,o?r:void 0,o)}})}),bt.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,e){bt.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}),bt.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),bt.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,i){return this.on(e,t,n,i)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)}}),bt.proxy=function(t,e){var n,i,r;if("string"==typeof e&&(n=t[e],e=t,t=n),yt(t))return i=lt.call(arguments,2),r=function(){return t.apply(e||this,i.concat(lt.call(arguments)))},r.guid=t.guid=t.guid||bt.guid++,r},bt.holdReady=function(t){t?bt.readyWait++:bt.ready(!0)},bt.isArray=Array.isArray,bt.parseJSON=JSON.parse,bt.nodeName=s,bt.isFunction=yt,bt.isWindow=xt,bt.camelCase=f,bt.type=i,bt.now=Date.now,bt.isNumeric=function(t){var e=bt.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return bt});var Je=t.jQuery,Ke=t.$;return bt.noConflict=function(e){return t.$===bt&&(t.$=Ke),e&&t.jQuery===bt&&(t.jQuery=Je),bt},e||(t.jQuery=t.$=bt),bt}),!function(t,e,n,i){function r(e,n){this.settings=null,this.options=t.extend({},r.Defaults,n),this.$element=t(e),this._handlers={},this._plugins={},this._supress={},this._current=null,this._speed=null,this._coordinates=[],this._breakpoint=null,this._width=null,this._items=[],this._clones=[],this._mergers=[],this._widths=[],this._invalidated={},this._pipe=[],this._drag={time:null,target:null,pointer:null,stage:{start:null,current:null},direction:null},this._states={current:{},tags:{initializing:["busy"],animating:["busy"],dragging:["interacting"]}},t.each(["onResize","onThrottledResize"],t.proxy(function(e,n){this._handlers[n]=t.proxy(this[n],this)},this)),t.each(r.Plugins,t.proxy(function(t,e){this._plugins[t.charAt(0).toLowerCase()+t.slice(1)]=new e(this)},this)),t.each(r.Workers,t.proxy(function(e,n){this._pipe.push({filter:n.filter,run:t.proxy(n.run,this)})},this)),this.setup(),this.initialize()}r.Defaults={items:3,loop:!1,center:!1,rewind:!1,checkVisibility:!0,mouseDrag:!0,touchDrag:!0,pullDrag:!0,freeDrag:!1,margin:0,stagePadding:0,merge:!1,mergeFit:!0,autoWidth:!1,startPosition:0,rtl:!1,smartSpeed:250,fluidSpeed:!1,dragEndSpeed:!1,responsive:{},responsiveRefreshRate:200,responsiveBaseElement:e,fallbackEasing:"swing",slideTransition:"",info:!1,nestedItemSelector:!1,itemElement:"div",stageElement:"div",refreshClass:"owl-refresh",loadedClass:"owl-loaded",loadingClass:"owl-loading",rtlClass:"owl-rtl",responsiveClass:"owl-responsive",dragClass:"owl-drag",itemClass:"owl-item",stageClass:"owl-stage",stageOuterClass:"owl-stage-outer",grabClass:"owl-grab"},r.Width={Default:"default",Inner:"inner",Outer:"outer"},r.Type={Event:"event",State:"state"},r.Plugins={},r.Workers=[{filter:["width","settings"],run:function(){this._width=this.$element.width()}},{filter:["width","items","settings"],run:function(t){t.current=this._items&&this._items[this.relative(this._current)]}},{filter:["items","settings"],run:function(){this.$stage.children(".cloned").remove()}},{filter:["width","items","settings"],run:function(t){var e=this.settings.margin||"",n=!this.settings.autoWidth,i=this.settings.rtl,r={width:"auto","margin-left":i?e:"","margin-right":i?"":e};!n&&this.$stage.children().css(r),t.css=r}},{filter:["width","items","settings"],run:function(t){var e=(this.width()/this.settings.items).toFixed(3)-this.settings.margin,n=null,i=this._items.length,r=!this.settings.autoWidth,s=[];for(t.items={merge:!1,width:e};i--;)n=this._mergers[i],n=this.settings.mergeFit&&Math.min(n,this.settings.items)||n,t.items.merge=n>1||t.items.merge,s[i]=r?e*n:this._items[i].width();this._widths=s}},{filter:["items","settings"],run:function(){var e=[],n=this._items,i=this.settings,r=Math.max(2*i.items,4),s=2*Math.ceil(n.length/2),o=i.loop&&n.length?i.rewind?r:Math.max(r,s):0,a="",l="";for(o/=2;o>0;)e.push(this.normalize(e.length/2,!0)),a+=n[e[e.length-1]][0].outerHTML,e.push(this.normalize(n.length-1-(e.length-1)/2,!0)),l=n[e[e.length-1]][0].outerHTML+l,o-=1;this._clones=e,t(a).addClass("cloned").appendTo(this.$stage),t(l).addClass("cloned").prependTo(this.$stage)}},{filter:["width","items","settings"],run:function(){for(var t=this.settings.rtl?1:-1,e=this._clones.length+this._items.length,n=-1,i=0,r=0,s=[];++n<e;)i=s[n-1]||0,r=this._widths[this.relative(n)]+this.settings.margin,s.push(i+r*t);this._coordinates=s}},{filter:["width","items","settings"],run:function(){var t=this.settings.stagePadding,e=this._coordinates,n={width:Math.ceil(Math.abs(e[e.length-1]))+2*t,"padding-left":t||"","padding-right":t||""};this.$stage.css(n)}},{filter:["width","items","settings"],run:function(t){var e=this._coordinates.length,n=!this.settings.autoWidth,i=this.$stage.children();if(n&&t.items.merge)for(;e--;)t.css.width=this._widths[this.relative(e)],i.eq(e).css(t.css);else n&&(t.css.width=t.items.width,i.css(t.css))}},{filter:["items"],run:function(){this._coordinates.length<1&&this.$stage.removeAttr("style")}},{filter:["width","items","settings"],run:function(t){t.current=t.current?this.$stage.children().index(t.current):0,t.current=Math.max(this.minimum(),Math.min(this.maximum(),t.current)),this.reset(t.current)}},{filter:["position"],run:function(){this.animate(this.coordinates(this._current))}},{filter:["width","position","items","settings"],run:function(){var t,e,n,i,r=this.settings.rtl?1:-1,s=2*this.settings.stagePadding,o=this.coordinates(this.current())+s,a=o+this.width()*r,l=[];for(n=0,i=this._coordinates.length;n<i;n++)t=this._coordinates[n-1]||0,e=Math.abs(this._coordinates[n])+s*r,(this.op(t,"<=",o)&&this.op(t,">",a)||this.op(e,"<",o)&&this.op(e,">",a))&&l.push(n);this.$stage.children(".active").removeClass("active"),this.$stage.children(":eq("+l.join("), :eq(")+")").addClass("active"),this.$stage.children(".center").removeClass("center"),this.settings.center&&this.$stage.children().eq(this.current()).addClass("center")}}],r.prototype.initializeStage=function(){this.$stage=this.$element.find("."+this.settings.stageClass),this.$stage.length||(this.$element.addClass(this.options.loadingClass),this.$stage=t("<"+this.settings.stageElement+">",{"class":this.settings.stageClass}).wrap(t("<div/>",{"class":this.settings.stageOuterClass})),this.$element.append(this.$stage.parent()))},r.prototype.initializeItems=function(){var e=this.$element.find(".owl-item");return e.length?(this._items=e.get().map(function(e){return t(e)}),this._mergers=this._items.map(function(){return 1}),void this.refresh()):(this.replace(this.$element.children().not(this.$stage.parent())),this.isVisible()?this.refresh():this.invalidate("width"),this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass),void 0)},r.prototype.initialize=function(){if(this.enter("initializing"),this.trigger("initialize"),this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl),this.settings.autoWidth&&!this.is("pre-loading")){var t,e,n;t=this.$element.find("img"),e=this.settings.nestedItemSelector?"."+this.settings.nestedItemSelector:i,n=this.$element.children(e).width(),t.length&&n<=0&&this.preloadAutoWidthImages(t)}this.initializeStage(),this.initializeItems(),this.registerEventHandlers(),this.leave("initializing"),this.trigger("initialized")},r.prototype.isVisible=function(){return!this.settings.checkVisibility||this.$element.is(":visible")},r.prototype.setup=function(){var e=this.viewport(),n=this.options.responsive,i=-1,r=null;n?(t.each(n,function(t){t<=e&&t>i&&(i=Number(t))}),r=t.extend({},this.options,n[i]),"function"==typeof r.stagePadding&&(r.stagePadding=r.stagePadding()),delete r.responsive,r.responsiveClass&&this.$element.attr("class",this.$element.attr("class").replace(new RegExp("("+this.options.responsiveClass+"-)\\S+\\s","g"),"$1"+i))):r=t.extend({},this.options),this.trigger("change",{property:{name:"settings",value:r}}),this._breakpoint=i,this.settings=r,this.invalidate("settings"),this.trigger("changed",{property:{name:"settings",value:this.settings}})},r.prototype.optionsLogic=function(){this.settings.autoWidth&&(this.settings.stagePadding=!1,this.settings.merge=!1)},r.prototype.prepare=function(e){var n=this.trigger("prepare",{content:e});return n.data||(n.data=t("<"+this.settings.itemElement+"/>").addClass(this.options.itemClass).append(e)),this.trigger("prepared",{content:n.data}),n.data},r.prototype.update=function(){for(var e=0,n=this._pipe.length,i=t.proxy(function(t){return this[t]},this._invalidated),r={};e<n;)(this._invalidated.all||t.grep(this._pipe[e].filter,i).length>0)&&this._pipe[e].run(r),e++;this._invalidated={},!this.is("valid")&&this.enter("valid")},r.prototype.width=function(t){switch(t=t||r.Width.Default){case r.Width.Inner:case r.Width.Outer:return this._width;default:return this._width-2*this.settings.stagePadding+this.settings.margin}},r.prototype.refresh=function(){this.enter("refreshing"),this.trigger("refresh"),this.setup(),this.optionsLogic(),this.$element.addClass(this.options.refreshClass),this.update(),this.$element.removeClass(this.options.refreshClass),this.leave("refreshing"),this.trigger("refreshed")},r.prototype.onThrottledResize=function(){e.clearTimeout(this.resizeTimer),this.resizeTimer=e.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)},r.prototype.onResize=function(){return!!this._items.length&&this._width!==this.$element.width()&&!!this.isVisible()&&(this.enter("resizing"),this.trigger("resize").isDefaultPrevented()?(this.leave("resizing"),!1):(this.invalidate("width"),this.refresh(),this.leave("resizing"),void this.trigger("resized")))},r.prototype.registerEventHandlers=function(){t.support.transition&&this.$stage.on(t.support.transition.end+".owl.core",t.proxy(this.onTransitionEnd,this)),
!1!==this.settings.responsive&&this.on(e,"resize",this._handlers.onThrottledResize),this.settings.mouseDrag&&(this.$element.addClass(this.options.dragClass),this.$stage.on("mousedown.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("dragstart.owl.core selectstart.owl.core",function(){return!1})),this.settings.touchDrag&&(this.$stage.on("touchstart.owl.core",t.proxy(this.onDragStart,this)),this.$stage.on("touchcancel.owl.core",t.proxy(this.onDragEnd,this)))},r.prototype.onDragStart=function(e){var i=null;3!==e.which&&(t.support.transform?(i=this.$stage.css("transform").replace(/.*\(|\)| /g,"").split(","),i={x:i[16===i.length?12:4],y:i[16===i.length?13:5]}):(i=this.$stage.position(),i={x:this.settings.rtl?i.left+this.$stage.width()-this.width()+this.settings.margin:i.left,y:i.top}),this.is("animating")&&(t.support.transform?this.animate(i.x):this.$stage.stop(),this.invalidate("position")),this.$element.toggleClass(this.options.grabClass,"mousedown"===e.type),this.speed(0),this._drag.time=(new Date).getTime(),this._drag.target=t(e.target),this._drag.stage.start=i,this._drag.stage.current=i,this._drag.pointer=this.pointer(e),t(n).on("mouseup.owl.core touchend.owl.core",t.proxy(this.onDragEnd,this)),t(n).one("mousemove.owl.core touchmove.owl.core",t.proxy(function(e){var i=this.difference(this._drag.pointer,this.pointer(e));t(n).on("mousemove.owl.core touchmove.owl.core",t.proxy(this.onDragMove,this)),Math.abs(i.x)<Math.abs(i.y)&&this.is("valid")||(e.preventDefault(),this.enter("dragging"),this.trigger("drag"))},this)))},r.prototype.onDragMove=function(t){var e=null,n=null,i=null,r=this.difference(this._drag.pointer,this.pointer(t)),s=this.difference(this._drag.stage.start,r);this.is("dragging")&&(t.preventDefault(),this.settings.loop?(e=this.coordinates(this.minimum()),n=this.coordinates(this.maximum()+1)-e,s.x=((s.x-e)%n+n)%n+e):(e=this.settings.rtl?this.coordinates(this.maximum()):this.coordinates(this.minimum()),n=this.settings.rtl?this.coordinates(this.minimum()):this.coordinates(this.maximum()),i=this.settings.pullDrag?-1*r.x/5:0,s.x=Math.max(Math.min(s.x,e+i),n+i)),this._drag.stage.current=s,this.animate(s.x))},r.prototype.onDragEnd=function(e){var i=this.difference(this._drag.pointer,this.pointer(e)),r=this._drag.stage.current,s=i.x>0^this.settings.rtl?"left":"right";t(n).off(".owl.core"),this.$element.removeClass(this.options.grabClass),(0!==i.x&&this.is("dragging")||!this.is("valid"))&&(this.speed(this.settings.dragEndSpeed||this.settings.smartSpeed),this.current(this.closest(r.x,0!==i.x?s:this._drag.direction)),this.invalidate("position"),this.update(),this._drag.direction=s,(Math.abs(i.x)>3||(new Date).getTime()-this._drag.time>300)&&this._drag.target.one("click.owl.core",function(){return!1})),this.is("dragging")&&(this.leave("dragging"),this.trigger("dragged"))},r.prototype.closest=function(e,n){var r=-1,s=30,o=this.width(),a=this.coordinates();return this.settings.freeDrag||t.each(a,t.proxy(function(t,l){return"left"===n&&e>l-s&&e<l+s?r=t:"right"===n&&e>l-o-s&&e<l-o+s?r=t+1:this.op(e,"<",l)&&this.op(e,">",a[t+1]!==i?a[t+1]:l-o)&&(r="left"===n?t+1:t),-1===r},this)),this.settings.loop||(this.op(e,">",a[this.minimum()])?r=e=this.minimum():this.op(e,"<",a[this.maximum()])&&(r=e=this.maximum())),r},r.prototype.animate=function(e){var n=this.speed()>0;this.is("animating")&&this.onTransitionEnd(),n&&(this.enter("animating"),this.trigger("translate")),t.support.transform3d&&t.support.transition?this.$stage.css({transform:"translate3d("+e+"px,0px,0px)",transition:this.speed()/1e3+"s"+(this.settings.slideTransition?" "+this.settings.slideTransition:"")}):n?this.$stage.animate({left:e+"px"},this.speed(),this.settings.fallbackEasing,t.proxy(this.onTransitionEnd,this)):this.$stage.css({left:e+"px"})},r.prototype.is=function(t){return this._states.current[t]&&this._states.current[t]>0},r.prototype.current=function(t){if(t===i)return this._current;if(0===this._items.length)return i;if(t=this.normalize(t),this._current!==t){var e=this.trigger("change",{property:{name:"position",value:t}});e.data!==i&&(t=this.normalize(e.data)),this._current=t,this.invalidate("position"),this.trigger("changed",{property:{name:"position",value:this._current}})}return this._current},r.prototype.invalidate=function(e){return"string"===t.type(e)&&(this._invalidated[e]=!0,this.is("valid")&&this.leave("valid")),t.map(this._invalidated,function(t,e){return e})},r.prototype.reset=function(t){(t=this.normalize(t))!==i&&(this._speed=0,this._current=t,this.suppress(["translate","translated"]),this.animate(this.coordinates(t)),this.release(["translate","translated"]))},r.prototype.normalize=function(t,e){var n=this._items.length,r=e?0:this._clones.length;return!this.isNumeric(t)||n<1?t=i:(t<0||t>=n+r)&&(t=((t-r/2)%n+n)%n+r/2),t},r.prototype.relative=function(t){return t-=this._clones.length/2,this.normalize(t,!0)},r.prototype.maximum=function(t){var e,n,i,r=this.settings,s=this._coordinates.length;if(r.loop)s=this._clones.length/2+this._items.length-1;else if(r.autoWidth||r.merge){if(e=this._items.length)for(n=this._items[--e].width(),i=this.$element.width();e--&&!((n+=this._items[e].width()+this.settings.margin)>i););s=e+1}else s=r.center?this._items.length-1:this._items.length-r.items;return t&&(s-=this._clones.length/2),Math.max(s,0)},r.prototype.minimum=function(t){return t?0:this._clones.length/2},r.prototype.items=function(t){return t===i?this._items.slice():(t=this.normalize(t,!0),this._items[t])},r.prototype.mergers=function(t){return t===i?this._mergers.slice():(t=this.normalize(t,!0),this._mergers[t])},r.prototype.clones=function(e){var n=this._clones.length/2,r=n+this._items.length,s=function(t){return t%2==0?r+t/2:n-(t+1)/2};return e===i?t.map(this._clones,function(t,e){return s(e)}):t.map(this._clones,function(t,n){return t===e?s(n):null})},r.prototype.speed=function(t){return t!==i&&(this._speed=t),this._speed},r.prototype.coordinates=function(e){var n,r=1,s=e-1;return e===i?t.map(this._coordinates,t.proxy(function(t,e){return this.coordinates(e)},this)):(this.settings.center?(this.settings.rtl&&(r=-1,s=e+1),n=this._coordinates[e],n+=(this.width()-n+(this._coordinates[s]||0))/2*r):n=this._coordinates[s]||0,n=Math.ceil(n))},r.prototype.duration=function(t,e,n){return 0===n?0:Math.min(Math.max(Math.abs(e-t),1),6)*Math.abs(n||this.settings.smartSpeed)},r.prototype.to=function(t,e){var n=this.current(),i=null,r=t-this.relative(n),s=(r>0)-(r<0),o=this._items.length,a=this.minimum(),l=this.maximum();this.settings.loop?(!this.settings.rewind&&Math.abs(r)>o/2&&(r+=-1*s*o),t=n+r,(i=((t-a)%o+o)%o+a)!==t&&i-r<=l&&i-r>0&&(n=i-r,t=i,this.reset(n))):this.settings.rewind?(l+=1,t=(t%l+l)%l):t=Math.max(a,Math.min(l,t)),this.speed(this.duration(n,t,e)),this.current(t),this.isVisible()&&this.update()},r.prototype.next=function(t){t=t||!1,this.to(this.relative(this.current())+1,t)},r.prototype.prev=function(t){t=t||!1,this.to(this.relative(this.current())-1,t)},r.prototype.onTransitionEnd=function(t){return(t===i||(t.stopPropagation(),(t.target||t.srcElement||t.originalTarget)===this.$stage.get(0)))&&(this.leave("animating"),void this.trigger("translated"))},r.prototype.viewport=function(){var i;return this.options.responsiveBaseElement!==e?i=t(this.options.responsiveBaseElement).width():e.innerWidth?i=e.innerWidth:n.documentElement&&n.documentElement.clientWidth?i=n.documentElement.clientWidth:console.warn("Can not detect viewport width."),i},r.prototype.replace=function(e){this.$stage.empty(),this._items=[],e&&(e=e instanceof jQuery?e:t(e)),this.settings.nestedItemSelector&&(e=e.find("."+this.settings.nestedItemSelector)),e.filter(function(){return 1===this.nodeType}).each(t.proxy(function(t,e){e=this.prepare(e),this.$stage.append(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)},this)),this.reset(this.isNumeric(this.settings.startPosition)?this.settings.startPosition:0),this.invalidate("items")},r.prototype.add=function(e,n){var r=this.relative(this._current);n=n===i?this._items.length:this.normalize(n,!0),e=e instanceof jQuery?e:t(e),this.trigger("add",{content:e,position:n}),e=this.prepare(e),0===this._items.length||n===this._items.length?(0===this._items.length&&this.$stage.append(e),0!==this._items.length&&this._items[n-1].after(e),this._items.push(e),this._mergers.push(1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)):(this._items[n].before(e),this._items.splice(n,0,e),this._mergers.splice(n,0,1*e.find("[data-merge]").addBack("[data-merge]").attr("data-merge")||1)),this._items[r]&&this.reset(this._items[r].index()),this.invalidate("items"),this.trigger("added",{content:e,position:n})},r.prototype.remove=function(t){(t=this.normalize(t,!0))!==i&&(this.trigger("remove",{content:this._items[t],position:t}),this._items[t].remove(),this._items.splice(t,1),this._mergers.splice(t,1),this.invalidate("items"),this.trigger("removed",{content:null,position:t}))},r.prototype.preloadAutoWidthImages=function(e){e.each(t.proxy(function(e,n){this.enter("pre-loading"),n=t(n),t(new Image).one("load",t.proxy(function(t){n.attr("src",t.target.src),n.css("opacity",1),this.leave("pre-loading"),!this.is("pre-loading")&&!this.is("initializing")&&this.refresh()},this)).attr("src",n.attr("src")||n.attr("data-src")||n.attr("data-src-retina"))},this))},r.prototype.destroy=function(){this.$element.off(".owl.core"),this.$stage.off(".owl.core"),t(n).off(".owl.core"),!1!==this.settings.responsive&&(e.clearTimeout(this.resizeTimer),this.off(e,"resize",this._handlers.onThrottledResize));for(var i in this._plugins)this._plugins[i].destroy();this.$stage.children(".cloned").remove(),this.$stage.unwrap(),this.$stage.children().contents().unwrap(),this.$stage.children().unwrap(),this.$stage.remove(),this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class",this.$element.attr("class").replace(new RegExp(this.options.responsiveClass+"-\\S+\\s","g"),"")).removeData("owl.carousel")},r.prototype.op=function(t,e,n){var i=this.settings.rtl;switch(e){case"<":return i?t>n:t<n;case">":return i?t<n:t>n;case">=":return i?t<=n:t>=n;case"<=":return i?t>=n:t<=n}},r.prototype.on=function(t,e,n,i){t.addEventListener?t.addEventListener(e,n,i):t.attachEvent&&t.attachEvent("on"+e,n)},r.prototype.off=function(t,e,n,i){t.removeEventListener?t.removeEventListener(e,n,i):t.detachEvent&&t.detachEvent("on"+e,n)},r.prototype.trigger=function(e,n,i,s,o){var a={item:{count:this._items.length,index:this.current()}},l=t.camelCase(t.grep(["on",e,i],function(t){return t}).join("-").toLowerCase()),u=t.Event([e,"owl",i||"carousel"].join(".").toLowerCase(),t.extend({relatedTarget:this},a,n));return this._supress[e]||(t.each(this._plugins,function(t,e){e.onTrigger&&e.onTrigger(u)}),this.register({type:r.Type.Event,name:e}),this.$element.trigger(u),this.settings&&"function"==typeof this.settings[l]&&this.settings[l].call(this,u)),u},r.prototype.enter=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]===i&&(this._states.current[e]=0),this._states.current[e]++},this))},r.prototype.leave=function(e){t.each([e].concat(this._states.tags[e]||[]),t.proxy(function(t,e){this._states.current[e]--},this))},r.prototype.register=function(e){if(e.type===r.Type.Event){if(t.event.special[e.name]||(t.event.special[e.name]={}),!t.event.special[e.name].owl){var n=t.event.special[e.name]._default;t.event.special[e.name]._default=function(t){return!n||!n.apply||t.namespace&&-1!==t.namespace.indexOf("owl")?t.namespace&&t.namespace.indexOf("owl")>-1:n.apply(this,arguments)},t.event.special[e.name].owl=!0}}else e.type===r.Type.State&&(this._states.tags[e.name]?this._states.tags[e.name]=this._states.tags[e.name].concat(e.tags):this._states.tags[e.name]=e.tags,this._states.tags[e.name]=t.grep(this._states.tags[e.name],t.proxy(function(n,i){return t.inArray(n,this._states.tags[e.name])===i},this)))},r.prototype.suppress=function(e){t.each(e,t.proxy(function(t,e){this._supress[e]=!0},this))},r.prototype.release=function(e){t.each(e,t.proxy(function(t,e){delete this._supress[e]},this))},r.prototype.pointer=function(t){var n={x:null,y:null};return t=t.originalEvent||t||e.event,t=t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t,t.pageX?(n.x=t.pageX,n.y=t.pageY):(n.x=t.clientX,n.y=t.clientY),n},r.prototype.isNumeric=function(t){return!isNaN(parseFloat(t))},r.prototype.difference=function(t,e){return{x:t.x-e.x,y:t.y-e.y}},t.fn.owlCarousel=function(e){var n=Array.prototype.slice.call(arguments,1);return this.each(function(){var i=t(this),s=i.data("owl.carousel");s||(s=new r(this,"object"==typeof e&&e),i.data("owl.carousel",s),t.each(["next","prev","to","destroy","refresh","replace","add","remove"],function(e,n){s.register({type:r.Type.Event,name:n}),s.$element.on(n+".owl.carousel.core",t.proxy(function(t){t.namespace&&t.relatedTarget!==this&&(this.suppress([n]),s[n].apply(this,[].slice.call(arguments,1)),this.release([n]))},s))})),"string"==typeof e&&"_"!==e.charAt(0)&&s[e].apply(s,n)})},t.fn.owlCarousel.Constructor=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._interval=null,this._visible=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoRefresh&&this.watch()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={autoRefresh:!0,autoRefreshInterval:500},r.prototype.watch=function(){this._interval||(this._visible=this._core.isVisible(),this._interval=e.setInterval(t.proxy(this.refresh,this),this._core.settings.autoRefreshInterval))},r.prototype.refresh=function(){this._core.isVisible()!==this._visible&&(this._visible=!this._visible,this._core.$element.toggleClass("owl-hidden",!this._visible),this._visible&&this._core.invalidate("width")&&this._core.refresh())},r.prototype.destroy=function(){var t,n;e.clearInterval(this._interval);for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoRefresh=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._loaded=[],this._handlers={"initialized.owl.carousel change.owl.carousel resized.owl.carousel":t.proxy(function(e){if(e.namespace&&this._core.settings&&this._core.settings.lazyLoad&&(e.property&&"position"==e.property.name||"initialized"==e.type)){var n=this._core.settings,r=n.center&&Math.ceil(n.items/2)||n.items,s=n.center&&-1*r||0,o=(e.property&&e.property.value!==i?e.property.value:this._core.current())+s,a=this._core.clones().length,l=t.proxy(function(t,e){this.load(e)},this);for(n.lazyLoadEager>0&&(r+=n.lazyLoadEager,n.loop&&(o-=n.lazyLoadEager,r++));s++<r;)this.load(a/2+this._core.relative(o)),a&&t.each(this._core.clones(this._core.relative(o)),l),o++}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers)};r.Defaults={lazyLoad:!1,lazyLoadEager:0},r.prototype.load=function(n){var i=this._core.$stage.children().eq(n),r=i&&i.find(".owl-lazy");!r||t.inArray(i.get(0),this._loaded)>-1||(r.each(t.proxy(function(n,i){var r,s=t(i),o=e.devicePixelRatio>1&&s.attr("data-src-retina")||s.attr("data-src")||s.attr("data-srcset");this._core.trigger("load",{element:s,url:o},"lazy"),s.is("img")?s.one("load.owl.lazy",t.proxy(function(){s.css("opacity",1),this._core.trigger("loaded",{element:s,url:o},"lazy")},this)).attr("src",o):s.is("source")?s.one("load.owl.lazy",t.proxy(function(){this._core.trigger("loaded",{element:s,url:o},"lazy")},this)).attr("srcset",o):(r=new Image,r.onload=t.proxy(function(){s.css({"background-image":'url("'+o+'")',opacity:"1"}),this._core.trigger("loaded",{element:s,url:o},"lazy")},this),r.src=o)},this)),this._loaded.push(i.get(0)))},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this._core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Lazy=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(n){this._core=n,this._previousHeight=null,this._handlers={"initialized.owl.carousel refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&this.update()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&"position"===t.property.name&&this.update()},this),"loaded.owl.lazy":t.proxy(function(t){t.namespace&&this._core.settings.autoHeight&&t.element.closest("."+this._core.settings.itemClass).index()===this._core.current()&&this.update()},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._intervalId=null;var i=this;t(e).on("load",function(){i._core.settings.autoHeight&&i.update()}),t(e).resize(function(){i._core.settings.autoHeight&&(null!=i._intervalId&&clearTimeout(i._intervalId),i._intervalId=setTimeout(function(){i.update()},250))})};r.Defaults={autoHeight:!1,autoHeightClass:"owl-height"},r.prototype.update=function(){var e=this._core._current,n=e+this._core.settings.items,i=this._core.settings.lazyLoad,r=this._core.$stage.children().toArray().slice(e,n),s=[],o=0;t.each(r,function(e,n){s.push(t(n).height())}),o=Math.max.apply(null,s),o<=1&&i&&this._previousHeight&&(o=this._previousHeight),this._previousHeight=o,this._core.$stage.parent().height(o).addClass(this._core.settings.autoHeightClass)},r.prototype.destroy=function(){var t,e;for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.AutoHeight=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._videos={},this._playing=null,this._handlers={"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.register({type:"state",name:"playing",tags:["interacting"]})},this),"resize.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.video&&this.isInFullScreen()&&t.preventDefault()},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._core.is("resizing")&&this._core.$stage.find(".cloned .owl-video-frame").remove()},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"===t.property.name&&this._playing&&this.stop()},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find(".owl-video");n.length&&(n.css("display","none"),this.fetch(n,t(e.content)))}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this._core.$element.on(this._handlers),this._core.$element.on("click.owl.video",".owl-video-play-icon",t.proxy(function(t){this.play(t)},this))};r.Defaults={video:!1,videoHeight:!1,videoWidth:!1},r.prototype.fetch=function(t,e){var n=function(){return t.attr("data-vimeo-id")?"vimeo":t.attr("data-vzaar-id")?"vzaar":"youtube"}(),i=t.attr("data-vimeo-id")||t.attr("data-youtube-id")||t.attr("data-vzaar-id"),r=t.attr("data-width")||this._core.settings.videoWidth,s=t.attr("data-height")||this._core.settings.videoHeight,o=t.attr("href");if(!o)throw new Error("Missing video URL.");if(i=o.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/),i[3].indexOf("youtu")>-1)n="youtube";else if(i[3].indexOf("vimeo")>-1)n="vimeo";else{if(!(i[3].indexOf("vzaar")>-1))throw new Error("Video URL not supported.");n="vzaar"}i=i[6],this._videos[o]={type:n,id:i,width:r,height:s},e.attr("data-video",o),this.thumbnail(t,this._videos[o])},r.prototype.thumbnail=function(e,n){var i,r,s,o=n.width&&n.height?"width:"+n.width+"px;height:"+n.height+"px;":"",a=e.find("img"),l="src",u="",c=this._core.settings,h=function(n){r='<div class="owl-video-play-icon"></div>',i=c.lazyLoad?t("<div/>",{"class":"owl-video-tn "+u,srcType:n}):t("<div/>",{"class":"owl-video-tn",style:"opacity:1;background-image:url("+n+")"}),e.after(i),e.after(r)};return e.wrap(t("<div/>",{"class":"owl-video-wrapper",style:o})),this._core.settings.lazyLoad&&(l="data-src",u="owl-lazy"),a.length?(h(a.attr(l)),a.remove(),!1):void("youtube"===n.type?(s="//img.youtube.com/vi/"+n.id+"/hqdefault.jpg",h(s)):"vimeo"===n.type?t.ajax({type:"GET",url:"//vimeo.com/api/v2/video/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t[0].thumbnail_large,h(s)}}):"vzaar"===n.type&&t.ajax({type:"GET",url:"//vzaar.com/api/videos/"+n.id+".json",jsonp:"callback",dataType:"jsonp",success:function(t){s=t.framegrab_url,h(s)}}))},r.prototype.stop=function(){this._core.trigger("stop",null,"video"),this._playing.find(".owl-video-frame").remove(),this._playing.removeClass("owl-video-playing"),this._playing=null,this._core.leave("playing"),this._core.trigger("stopped",null,"video")},r.prototype.play=function(e){var n,i=t(e.target),r=i.closest("."+this._core.settings.itemClass),s=this._videos[r.attr("data-video")],o=s.width||"100%",a=s.height||this._core.$stage.height();this._playing||(this._core.enter("playing"),this._core.trigger("play",null,"video"),r=this._core.items(this._core.relative(r.index())),this._core.reset(r.index()),n=t('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'),n.attr("height",a),n.attr("width",o),"youtube"===s.type?n.attr("src","//www.youtube.com/embed/"+s.id+"?autoplay=1&rel=0&v="+s.id):"vimeo"===s.type?n.attr("src","//player.vimeo.com/video/"+s.id+"?autoplay=1"):"vzaar"===s.type&&n.attr("src","//view.vzaar.com/"+s.id+"/player?autoplay=true"),t(n).wrap('<div class="owl-video-frame" />').insertAfter(r.find(".owl-video")),this._playing=r.addClass("owl-video-playing"))},r.prototype.isInFullScreen=function(){var e=n.fullscreenElement||n.mozFullScreenElement||n.webkitFullscreenElement;return e&&t(e).parent().hasClass("owl-video-frame")},r.prototype.destroy=function(){var t,e;this._core.$element.off("click.owl.video");for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Video=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this.core=e,this.core.options=t.extend({},r.Defaults,this.core.options),this.swapping=!0,this.previous=i,this.next=i,this.handlers={"change.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&(this.previous=this.core.current(),this.next=t.property.value)},this),"drag.owl.carousel dragged.owl.carousel translated.owl.carousel":t.proxy(function(t){t.namespace&&(this.swapping="translated"==t.type)},this),"translate.owl.carousel":t.proxy(function(t){t.namespace&&this.swapping&&(this.core.options.animateOut||this.core.options.animateIn)&&this.swap()},this)},this.core.$element.on(this.handlers)};r.Defaults={animateOut:!1,animateIn:!1},r.prototype.swap=function(){if(1===this.core.settings.items&&t.support.animation&&t.support.transition){this.core.speed(0);var e,n=t.proxy(this.clear,this),i=this.core.$stage.children().eq(this.previous),r=this.core.$stage.children().eq(this.next),s=this.core.settings.animateIn,o=this.core.settings.animateOut;this.core.current()!==this.previous&&(o&&(e=this.core.coordinates(this.previous)-this.core.coordinates(this.next),i.one(t.support.animation.end,n).css({left:e+"px"}).addClass("animated owl-animated-out").addClass(o)),s&&r.one(t.support.animation.end,n).addClass("animated owl-animated-in").addClass(s))}},r.prototype.clear=function(e){t(e.target).css({left:""}).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut),this.core.onTransitionEnd()},r.prototype.destroy=function(){var t,e;for(t in this.handlers)this.core.$element.off(t,this.handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.Animate=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){var r=function(e){this._core=e,this._call=null,this._time=0,this._timeout=0,this._paused=!0,this._handlers={"changed.owl.carousel":t.proxy(function(t){t.namespace&&"settings"===t.property.name?this._core.settings.autoplay?this.play():this.stop():t.namespace&&"position"===t.property.name&&this._paused&&(this._time=0)},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.autoplay&&this.play()},this),"play.owl.autoplay":t.proxy(function(t,e,n){t.namespace&&this.play(e,n)},this),"stop.owl.autoplay":t.proxy(function(t){t.namespace&&this.stop()},this),"mouseover.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"mouseleave.owl.autoplay":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.play()},this),"touchstart.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this._core.is("rotating")&&this.pause()},this),"touchend.owl.core":t.proxy(function(){this._core.settings.autoplayHoverPause&&this.play()},this)},this._core.$element.on(this._handlers),this._core.options=t.extend({},r.Defaults,this._core.options)};r.Defaults={autoplay:!1,autoplayTimeout:5e3,autoplayHoverPause:!1,autoplaySpeed:!1},r.prototype._next=function(i){this._call=e.setTimeout(t.proxy(this._next,this,i),this._timeout*(Math.round(this.read()/this._timeout)+1)-this.read()),this._core.is("interacting")||n.hidden||this._core.next(i||this._core.settings.autoplaySpeed)},r.prototype.read=function(){return(new Date).getTime()-this._time},r.prototype.play=function(n,i){var r;this._core.is("rotating")||this._core.enter("rotating"),n=n||this._core.settings.autoplayTimeout,r=Math.min(this._time%(this._timeout||n),n),this._paused?(this._time=this.read(),this._paused=!1):e.clearTimeout(this._call),this._time+=this.read()%n-r,this._timeout=n,this._call=e.setTimeout(t.proxy(this._next,this,i),n-r)},r.prototype.stop=function(){this._core.is("rotating")&&(this._time=0,this._paused=!0,e.clearTimeout(this._call),this._core.leave("rotating"))},r.prototype.pause=function(){this._core.is("rotating")&&!this._paused&&(this._time=this.read(),this._paused=!0,e.clearTimeout(this._call))},r.prototype.destroy=function(){var t,e;this.stop();for(t in this._handlers)this._core.$element.off(t,this._handlers[t]);for(e in Object.getOwnPropertyNames(this))"function"!=typeof this[e]&&(this[e]=null)},t.fn.owlCarousel.Constructor.Plugins.autoplay=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var r=function(e){this._core=e,this._initialized=!1,this._pages=[],this._controls={},this._templates=[],this.$element=this._core.$element,this._overrides={next:this._core.next,prev:this._core.prev,to:this._core.to},this._handlers={"prepared.owl.carousel":t.proxy(function(e){e.namespace&&this._core.settings.dotsData&&this._templates.push('<div class="'+this._core.settings.dotClass+'">'+t(e.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot")+"</div>")},this),"added.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,0,this._templates.pop())},this),"remove.owl.carousel":t.proxy(function(t){t.namespace&&this._core.settings.dotsData&&this._templates.splice(t.position,1)},this),"changed.owl.carousel":t.proxy(function(t){t.namespace&&"position"==t.property.name&&this.draw()},this),"initialized.owl.carousel":t.proxy(function(t){t.namespace&&!this._initialized&&(this._core.trigger("initialize",null,"navigation"),this.initialize(),this.update(),this.draw(),this._initialized=!0,this._core.trigger("initialized",null,"navigation"))},this),"refreshed.owl.carousel":t.proxy(function(t){t.namespace&&this._initialized&&(this._core.trigger("refresh",null,"navigation"),this.update(),this.draw(),this._core.trigger("refreshed",null,"navigation"))},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers)};r.Defaults={nav:!1,navText:['<span aria-label="Previous">&#x2039;</span>','<span aria-label="Next">&#x203a;</span>'],navSpeed:!1,navElement:'button type="button" role="presentation"',navContainer:!1,navContainerClass:"owl-nav",navClass:["owl-prev","owl-next"],slideBy:1,dotClass:"owl-dot",dotsClass:"owl-dots",dots:!0,dotsEach:!1,dotsData:!1,dotsSpeed:!1,dotsContainer:!1},r.prototype.initialize=function(){var e,n=this._core.settings;this._controls.$relative=(n.navContainer?t(n.navContainer):t("<div>").addClass(n.navContainerClass).appendTo(this.$element)).addClass("disabled"),this._controls.$previous=t("<"+n.navElement+">").addClass(n.navClass[0]).html(n.navText[0]).prependTo(this._controls.$relative).on("click",t.proxy(function(t){this.prev(n.navSpeed)},this)),this._controls.$next=t("<"+n.navElement+">").addClass(n.navClass[1]).html(n.navText[1]).appendTo(this._controls.$relative).on("click",t.proxy(function(t){this.next(n.navSpeed)},this)),n.dotsData||(this._templates=[t('<button role="button">').addClass(n.dotClass).append(t("<span>")).prop("outerHTML")]),this._controls.$absolute=(n.dotsContainer?t(n.dotsContainer):t("<div>").addClass(n.dotsClass).appendTo(this.$element)).addClass("disabled"),this._controls.$absolute.on("click","button",t.proxy(function(e){var i=t(e.target).parent().is(this._controls.$absolute)?t(e.target).index():t(e.target).parent().index();e.preventDefault(),this.to(i,n.dotsSpeed)},this));for(e in this._overrides)this._core[e]=t.proxy(this[e],this)},r.prototype.destroy=function(){var t,e,n,i,r;r=this._core.settings;for(t in this._handlers)this.$element.off(t,this._handlers[t]);for(e in this._controls)"$relative"===e&&r.navContainer?this._controls[e].html(""):this._controls[e].remove();for(i in this.overides)this._core[i]=this._overrides[i];for(n in Object.getOwnPropertyNames(this))"function"!=typeof this[n]&&(this[n]=null)},r.prototype.update=function(){var t,e,n,i=this._core.clones().length/2,r=i+this._core.items().length,s=this._core.maximum(!0),o=this._core.settings,a=o.center||o.autoWidth||o.dotsData?1:o.dotsEach||o.items;if("page"!==o.slideBy&&(o.slideBy=Math.min(o.slideBy,o.items)),o.dots||"page"==o.slideBy)for(this._pages=[],t=i,e=0,n=0;t<r;t++){if(e>=a||0===e){if(this._pages.push({start:Math.min(s,t-i),end:t-i+a-1}),Math.min(s,t-i)===s)break;e=0,++n}e+=this._core.mergers(this._core.relative(t))}},r.prototype.draw=function(){var e,n=this._core.settings,i=this._core.items().length<=n.items,r=this._core.relative(this._core.current()),s=n.loop||n.rewind;this._controls.$relative.toggleClass("disabled",!n.nav||i),n.nav&&(this._controls.$previous.toggleClass("disabled",!s&&r<=this._core.minimum(!0)),this._controls.$next.toggleClass("disabled",!s&&r>=this._core.maximum(!0))),this._controls.$absolute.toggleClass("disabled",!n.dots||i),n.dots&&(e=this._pages.length-this._controls.$absolute.children().length,n.dotsData&&0!==e?this._controls.$absolute.html(this._templates.join("")):e>0?this._controls.$absolute.append(new Array(e+1).join(this._templates[0])):e<0&&this._controls.$absolute.children().slice(e).remove(),this._controls.$absolute.find(".active").removeClass("active"),this._controls.$absolute.children().eq(t.inArray(this.current(),this._pages)).addClass("active"))},r.prototype.onTrigger=function(e){var n=this._core.settings;e.page={index:t.inArray(this.current(),this._pages),count:this._pages.length,size:n&&(n.center||n.autoWidth||n.dotsData?1:n.dotsEach||n.items)}},r.prototype.current=function(){var e=this._core.relative(this._core.current());
return t.grep(this._pages,t.proxy(function(t,n){return t.start<=e&&t.end>=e},this)).pop()},r.prototype.getPosition=function(e){var n,i,r=this._core.settings;return"page"==r.slideBy?(n=t.inArray(this.current(),this._pages),i=this._pages.length,e?++n:--n,n=this._pages[(n%i+i)%i].start):(n=this._core.relative(this._core.current()),i=this._core.items().length,e?n+=r.slideBy:n-=r.slideBy),n},r.prototype.next=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!0),e)},r.prototype.prev=function(e){t.proxy(this._overrides.to,this._core)(this.getPosition(!1),e)},r.prototype.to=function(e,n,i){var r;!i&&this._pages.length?(r=this._pages.length,t.proxy(this._overrides.to,this._core)(this._pages[(e%r+r)%r].start,n)):t.proxy(this._overrides.to,this._core)(e,n)},t.fn.owlCarousel.Constructor.Plugins.Navigation=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){"use strict";var r=function(n){this._core=n,this._hashes={},this.$element=this._core.$element,this._handlers={"initialized.owl.carousel":t.proxy(function(n){n.namespace&&"URLHash"===this._core.settings.startPosition&&t(e).trigger("hashchange.owl.navigation")},this),"prepared.owl.carousel":t.proxy(function(e){if(e.namespace){var n=t(e.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if(!n)return;this._hashes[n]=e.content}},this),"changed.owl.carousel":t.proxy(function(n){if(n.namespace&&"position"===n.property.name){var i=this._core.items(this._core.relative(this._core.current())),r=t.map(this._hashes,function(t,e){return t===i?e:null}).join();if(!r||e.location.hash.slice(1)===r)return;e.location.hash=r}},this)},this._core.options=t.extend({},r.Defaults,this._core.options),this.$element.on(this._handlers),t(e).on("hashchange.owl.navigation",t.proxy(function(t){var n=e.location.hash.substring(1),r=this._core.$stage.children(),s=this._hashes[n]&&r.index(this._hashes[n]);s!==i&&s!==this._core.current()&&this._core.to(this._core.relative(s),!1,!0)},this))};r.Defaults={URLhashListener:!1},r.prototype.destroy=function(){var n,i;t(e).off("hashchange.owl.navigation");for(n in this._handlers)this._core.$element.off(n,this._handlers[n]);for(i in Object.getOwnPropertyNames(this))"function"!=typeof this[i]&&(this[i]=null)},t.fn.owlCarousel.Constructor.Plugins.Hash=r}(window.Zepto||window.jQuery,window,document),function(t,e,n,i){function r(e,n){var r=!1,s=e.charAt(0).toUpperCase()+e.slice(1);return t.each((e+" "+a.join(s+" ")+s).split(" "),function(t,e){if(o[e]!==i)return r=!n||e,!1}),r}function s(t){return r(t,!0)}var o=t("<support>").get(0).style,a="Webkit Moz O ms".split(" "),l={transition:{end:{WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd",transition:"transitionend"}},animation:{end:{WebkitAnimation:"webkitAnimationEnd",MozAnimation:"animationend",OAnimation:"oAnimationEnd",animation:"animationend"}}},u={csstransforms:function(){return!!r("transform")},csstransforms3d:function(){return!!r("perspective")},csstransitions:function(){return!!r("transition")},cssanimations:function(){return!!r("animation")}};u.csstransitions()&&(t.support.transition=new String(s("transition")),t.support.transition.end=l.transition.end[t.support.transition]),u.cssanimations()&&(t.support.animation=new String(s("animation")),t.support.animation.end=l.animation.end[t.support.animation]),u.csstransforms()&&(t.support.transform=new String(s("transform")),t.support.transform3d=u.csstransforms3d())}(window.Zepto||window.jQuery,window,document),$(".owl-projekt").owlCarousel({loop:!0,margin:10,autoHeight:!1,autoplay:!0,autoplayTimeout:10500,nav:!1,responsiveClass:!0,responsive:{0:{items:1},600:{items:2},1e3:{items:3,loop:!1}}}),$(".owl-otziv").owlCarousel({loop:!1,margin:0,autoHeight:!1,autoplay:!0,autoplayTimeout:10500,nav:!1,responsive:{0:{items:1},600:{items:1},1e3:{items:1}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
